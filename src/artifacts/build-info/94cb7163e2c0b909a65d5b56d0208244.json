{
	"id": "94cb7163e2c0b909a65d5b56d0208244",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/LPToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"./libraries/ERC20BurnableUpgradeable.sol\";\nimport \"./OwnableUpgradeable.sol\";\nimport \"./libraries/SafeMathUpgradeable.sol\";\nimport \"./libraries/ERC20PermitUpgradeable.sol\";\nimport \"./interfaces/ISwap.sol\";\n\n/**\n * @title Liquidity Provider Token\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\n * It is used to represent user's shares when providing liquidity to swap contracts.\n * @dev Only Swap contracts should initialize and own LPToken contracts.\n */\ncontract LPToken is ERC20PermitUpgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @notice Initializes this LPToken contract with the given name and symbol\n     * @dev The caller of this function will become the owner. A Swap contract should call this\n     * in its initializer function.\n     * @param name name of this token\n     * @param symbol symbol of this token\n     */\n    function initialize(string memory name, string memory symbol)\n        external\n        initializer\n        returns (bool)\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __ERC20Permit_init(name);\n        __Ownable_init_unchained();\n        return true;\n    }\n\n    /**\n     * @notice Mints the given amount of LPToken to the recipient.\n     * @dev only owner can call this mint function\n     * @param recipient address of account to receive the tokens\n     * @param amount amount of tokens to mint\n     */\n    function mint(address recipient, uint256 amount) external onlyOwner {\n        require(amount != 0, \"LPToken: cannot mint 0\");\n        _mint(recipient, amount);\n    }\n\n    /**\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n     * minting and burning. * This assumes the owner is set to a Swap contract's address.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20Upgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n        require(to != address(this), \"LPToken: cannot send to itself\");\n    }\n}"
			},
			"src/interfaces/ISwap.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity  >=0.6.0 <0.8.2;\n\n\nimport \"./IERC20.sol\";\n\ninterface ISwap {\n    // pool data view functions\n    function getA() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalances() external view returns (uint256[] memory);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function getNumberOfTokens() external view returns (uint256);\n\n    function getLpToken() external view returns (IERC20);\n\n    // min return calculation functions\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount);\n\n    // state modifying functions\n    function initialize(\n        IERC20[] memory pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 a,\n        uint256 fee,\n        uint256 adminFee,\n        address lpTokenTargetAddress\n    ) external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n}"
			},
			"src/libraries/ERC20PermitUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5 <0.8.2;\n\nimport \"./ERC20Upgradeable.sol\";\nimport \"../interfaces/IERC20PermitUpgradeable.sol\";\nimport \"./ECDSAUpgradeable.sol\";\nimport \"./CountersUpgradeable.sol\";\nimport \"./EIP712Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _nonces[owner].current(),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n    uint256[49] private __gap;\n}"
			},
			"src/libraries/SafeMathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"
			},
			"src/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\nimport \"./libraries/ContextUpgradeable.sol\";\nimport \"./proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}"
			},
			"src/libraries/ERC20BurnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}"
			},
			"src/proxy/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.2;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}"
			},
			"src/libraries/EIP712Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                _getChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    function _getChainId() private view returns (uint256 chainId) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}"
			},
			"src/libraries/CountersUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\nimport \"./SafeMathUpgradeable.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary CountersUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}"
			},
			"src/libraries/ECDSAUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}"
			},
			"src/interfaces/IERC20PermitUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}"
			},
			"src/libraries/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../interfaces/IERC20Upgradeable.sol\";\nimport \"./SafeMathUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}"
			},
			"src/libraries/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}"
			},
			"src/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"src/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
			},
			"src/interfaces/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"src/LPToken.sol": {
				"LPToken": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Only Swap contracts should initialize and own LPToken contracts.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"initialize(string,string)": {
								"details": "The caller of this function will become the owner. A Swap contract should call this in its initializer function.",
								"params": {
									"name": "name of this token",
									"symbol": "symbol of this token"
								}
							},
							"mint(address,uint256)": {
								"details": "only owner can call this mint function",
								"params": {
									"amount": "amount of tokens to mint",
									"recipient": "address of account to receive the tokens"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "Liquidity Provider Token",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/LPToken.sol\":570:2229  contract LPToken is ERC20PermitUpgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/LPToken.sol\":570:2229  contract LPToken is ERC20PermitUpgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_25\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_24:\n      dup1\n      0x3644e515\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x4cd88b76\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_31\n      tag_32\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_31\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2972:3085  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n    tag_8:\n      tag_37\n      tag_51\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":5928:6143  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_9:\n      tag_31\n      tag_55\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"src/LPToken.sol\":1574:1739  function mint(address recipient, uint256 amount) external onlyOwner {... */\n    tag_10:\n      tag_58\n      tag_59\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n    tag_58:\n      stop\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":851:940  function burn(uint256 amount) public virtual {... */\n    tag_11:\n      tag_58\n      tag_62\n      calldatasize\n      0x04\n      tag_63\n      jump\t// in\n    tag_62:\n      tag_64\n      jump\t// in\n        /* \"src/LPToken.sol\":1017:1323  function initialize(string memory name, string memory symbol)... */\n    tag_12:\n      tag_31\n      tag_66\n      calldatasize\n      0x04\n      tag_67\n      jump\t// in\n    tag_66:\n      tag_68\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_37\n      tag_71\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_71:\n      tag_73\n      jump\t// in\n        /* \"src/OwnableUpgradeable.sol\":1969:2114  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_58\n      tag_76\n      jump\t// in\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1246:1536  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_15:\n      tag_58\n      tag_78\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2730:2848  function nonces(address owner) public view override returns (uint256) {... */\n    tag_16:\n      tag_37\n      tag_81\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n        /* \"src/OwnableUpgradeable.sol\":1337:1422  function owner() public view virtual returns (address) {... */\n    tag_17:\n      tag_84\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":2709:2802  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      tag_27\n      tag_89\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":6630:6896  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_19:\n      tag_31\n      tag_92\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_92:\n      tag_93\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4066:4238  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_20:\n      tag_31\n      tag_96\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1864:2669  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {... */\n    tag_21:\n      tag_58\n      tag_100\n      calldatasize\n      0x04\n      tag_101\n      jump\t// in\n    tag_100:\n      tag_102\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_22:\n      tag_37\n      tag_104\n      calldatasize\n      0x04\n      tag_105\n      jump\t// in\n    tag_104:\n      tag_106\n      jump\t// in\n        /* \"src/OwnableUpgradeable.sol\":2263:2503  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_58\n      tag_109\n      calldatasize\n      0x04\n      tag_72\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n    tag_28:\n        /* \"src/libraries/ERC20Upgradeable.sol\":2552:2565  string memory */\n      0x60\n        /* \"src/libraries/ERC20Upgradeable.sol\":2584:2589  _name */\n      0x36\n        /* \"src/libraries/ERC20Upgradeable.sol\":2577:2589  return _name */\n      dup1\n      sload\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_114\n      swap1\n      tag_113\n      jump\t// in\n    tag_114:\n      dup1\n      iszero\n      tag_115\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_116\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_115)\n    tag_116:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_117:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_117\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_115:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_34:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4666:4670  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4721  _approve(_msgSender(), spender, amount) */\n      tag_119\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4703  _msgSender() */\n      tag_120\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4701  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4703  _msgSender() */\n      jump\t// in\n    tag_120:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4705:4712  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4714:4720  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4690  _approve */\n      tag_122\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4721  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_119:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":4738:4742  true */\n      0x01\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_38:\n        /* \"src/libraries/ERC20Upgradeable.sol\":3661:3673  _totalSupply */\n      sload(0x35)\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_44:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5322:5326  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5374  _transfer(sender, recipient, amount) */\n      tag_125\n        /* \"src/libraries/ERC20Upgradeable.sol\":5348:5354  sender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5356:5365  recipient */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5367:5373  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5347  _transfer */\n      tag_126\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5374  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_125:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5505  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_127\n        /* \"src/libraries/ERC20Upgradeable.sol\":5393:5399  sender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5413  _msgSender() */\n      tag_128\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5411  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5413  _msgSender() */\n      jump\t// in\n    tag_128:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_129\n        /* \"src/libraries/ERC20Upgradeable.sol\":5453:5459  amount */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5434  _allowances[sender] */\n      dup11\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5426  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5434  _allowances[sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5447  _msgSender() */\n      tag_130\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5445  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5447  _msgSender() */\n      jump\t// in\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5448  _allowances[sender][_msgSender()] */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5452  _allowances[sender][_msgSender()].sub */\n      tag_131\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      jump\t// in\n    tag_129:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5392  _approve */\n      tag_122\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5505  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_127:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":5522:5526  true */\n      0x01\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n    tag_47:\n        /* \"src/libraries/ERC20Upgradeable.sol\":3498:3507  _decimals */\n      and(0xff, sload(0x38))\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2972:3085  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n    tag_51:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":3032:3039  bytes32 */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":3058:3078  _domainSeparatorV4() */\n      tag_134\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":3058:3076  _domainSeparatorV4 */\n      tag_135\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":3058:3078  _domainSeparatorV4() */\n      jump\t// in\n    tag_134:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":3051:3078  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2972:3085  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":5928:6143  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_56:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6016:6020  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6032:6115  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_119\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6053  _msgSender() */\n      tag_138\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6051  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6053  _msgSender() */\n      jump\t// in\n    tag_138:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6055:6062  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6114  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_129\n        /* \"src/libraries/ERC20Upgradeable.sol\":6103:6113  addedValue */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6075  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6089  _allowances[_msgSender()] */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6088  _msgSender() */\n      tag_140\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6086  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6088  _msgSender() */\n      jump\t// in\n    tag_140:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6089  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6098  _allowances[_msgSender()][spender] */\n      swap2\n      dup13\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6102  _allowances[_msgSender()][spender].add */\n      tag_141\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6114  _allowances[_msgSender()][spender].add(addedValue) */\n      jump\t// in\n        /* \"src/LPToken.sol\":1574:1739  function mint(address recipient, uint256 amount) external onlyOwner {... */\n    tag_60:\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      tag_143\n        /* \"src/OwnableUpgradeable.sol\":1560:1570  _msgSender */\n      tag_121\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      jump\t// in\n    tag_143:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      tag_144\n        /* \"src/OwnableUpgradeable.sol\":1549:1554  owner */\n      tag_85\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      jump\t// in\n    tag_144:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n      eq\n        /* \"src/OwnableUpgradeable.sol\":1541:1609  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_145\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_147\n      jump\t// in\n    tag_146:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_145:\n        /* \"src/LPToken.sol\":1660:1671  amount != 0 */\n      dup1\n        /* \"src/LPToken.sol\":1652:1698  require(amount != 0, \"LPToken: cannot mint 0\") */\n      tag_149\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_151\n      jump\t// in\n    tag_149:\n        /* \"src/LPToken.sol\":1708:1732  _mint(recipient, amount) */\n      tag_152\n        /* \"src/LPToken.sol\":1714:1723  recipient */\n      dup3\n        /* \"src/LPToken.sol\":1725:1731  amount */\n      dup3\n        /* \"src/LPToken.sol\":1708:1713  _mint */\n      tag_153\n        /* \"src/LPToken.sol\":1708:1732  _mint(recipient, amount) */\n      jump\t// in\n    tag_152:\n        /* \"src/LPToken.sol\":1574:1739  function mint(address recipient, uint256 amount) external onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":851:940  function burn(uint256 amount) public virtual {... */\n    tag_64:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":906:933  _burn(_msgSender(), amount) */\n      tag_155\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":912:924  _msgSender() */\n      tag_156\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":912:922  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":912:924  _msgSender() */\n      jump\t// in\n    tag_156:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":926:932  amount */\n      dup3\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":906:911  _burn */\n      tag_157\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":906:933  _burn(_msgSender(), amount) */\n      jump\t// in\n    tag_155:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":851:940  function burn(uint256 amount) public virtual {... */\n      pop\n      jump\t// out\n        /* \"src/LPToken.sol\":1017:1323  function initialize(string memory name, string memory symbol)... */\n    tag_68:\n        /* \"src/LPToken.sol\":1133:1137  bool */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      dup1\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_160\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_160\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_160:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_162\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_162:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_163:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_166\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_166:\n        /* \"src/LPToken.sol\":1153:1179  __Context_init_unchained() */\n      tag_168\n        /* \"src/LPToken.sol\":1153:1177  __Context_init_unchained */\n      tag_169\n        /* \"src/LPToken.sol\":1153:1179  __Context_init_unchained() */\n      jump\t// in\n    tag_168:\n        /* \"src/LPToken.sol\":1189:1225  __ERC20_init_unchained(name, symbol) */\n      tag_170\n        /* \"src/LPToken.sol\":1212:1216  name */\n      dup5\n        /* \"src/LPToken.sol\":1218:1224  symbol */\n      dup5\n        /* \"src/LPToken.sol\":1189:1211  __ERC20_init_unchained */\n      tag_171\n        /* \"src/LPToken.sol\":1189:1225  __ERC20_init_unchained(name, symbol) */\n      jump\t// in\n    tag_170:\n        /* \"src/LPToken.sol\":1235:1259  __ERC20Permit_init(name) */\n      tag_172\n        /* \"src/LPToken.sol\":1254:1258  name */\n      dup5\n        /* \"src/LPToken.sol\":1235:1253  __ERC20Permit_init */\n      tag_173\n        /* \"src/LPToken.sol\":1235:1259  __ERC20Permit_init(name) */\n      jump\t// in\n    tag_172:\n        /* \"src/LPToken.sol\":1269:1295  __Ownable_init_unchained() */\n      tag_174\n        /* \"src/LPToken.sol\":1269:1293  __Ownable_init_unchained */\n      tag_175\n        /* \"src/LPToken.sol\":1269:1295  __Ownable_init_unchained() */\n      jump\t// in\n    tag_174:\n        /* \"src/LPToken.sol\":1312:1316  true */\n      0x01\n        /* \"src/LPToken.sol\":1305:1316  return true */\n      swap2\n      pop\n        /* \"src/proxy/Initializable.sol\":1794:1808  isTopLevelCall */\n      dup1\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      iszero\n      tag_176\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n    tag_176:\n        /* \"src/LPToken.sol\":1017:1323  function initialize(string memory name, string memory symbol)... */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      dup2\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":3812:3819  uint256 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3847  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_177:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/OwnableUpgradeable.sol\":1969:2114  function renounceOwnership() public virtual onlyOwner {... */\n    tag_76:\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      tag_179\n        /* \"src/OwnableUpgradeable.sol\":1560:1570  _msgSender */\n      tag_121\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      jump\t// in\n    tag_179:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      tag_180\n        /* \"src/OwnableUpgradeable.sol\":1549:1554  owner */\n      tag_85\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      jump\t// in\n    tag_180:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n      eq\n        /* \"src/OwnableUpgradeable.sol\":1541:1609  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_181\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_147\n      jump\t// in\n    tag_181:\n        /* \"src/OwnableUpgradeable.sol\":2059:2065  _owner */\n      sload(0xfe)\n        /* \"src/OwnableUpgradeable.sol\":2038:2078  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n        /* \"src/OwnableUpgradeable.sol\":2075:2076  0 */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":2059:2065  _owner */\n      and\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2038:2078  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2075:2076  0 */\n      dup4\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2038:2078  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"src/OwnableUpgradeable.sol\":2088:2094  _owner */\n      0xfe\n        /* \"src/OwnableUpgradeable.sol\":2088:2107  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"src/OwnableUpgradeable.sol\":1969:2114  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1246:1536  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_79:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1322:1348  uint256 decreasedAllowance */\n      0x00\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1435  allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\") */\n      tag_185\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1388:1394  amount */\n      dup3\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1435  allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      data_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db\n      0x24\n      swap2\n      codecopy\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1383  allowance(account, _msgSender()) */\n      tag_186\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1361:1368  account */\n      dup7\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1370:1382  _msgSender() */\n      tag_104\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1370:1380  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1370:1382  _msgSender() */\n      jump\t// in\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1383  allowance(account, _msgSender()) */\n    tag_186:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1387  allowance(account, _msgSender()).sub */\n      swap2\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1435  allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\") */\n      swap1\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1387  allowance(account, _msgSender()).sub */\n      tag_131\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1351:1435  allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\") */\n      jump\t// in\n    tag_185:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1322:1435  uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\") */\n      swap1\n      pop\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1446:1497  _approve(account, _msgSender(), decreasedAllowance) */\n      tag_188\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1455:1462  account */\n      dup4\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1464:1476  _msgSender() */\n      tag_189\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1464:1474  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1464:1476  _msgSender() */\n      jump\t// in\n    tag_189:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1478:1496  decreasedAllowance */\n      dup4\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1446:1454  _approve */\n      tag_122\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1446:1497  _approve(account, _msgSender(), decreasedAllowance) */\n      jump\t// in\n    tag_188:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1507:1529  _burn(account, amount) */\n      tag_190\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1513:1520  account */\n      dup4\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1522:1528  amount */\n      dup4\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1507:1512  _burn */\n      tag_157\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1507:1529  _burn(account, amount) */\n      jump\t// in\n    tag_190:\n        /* \"src/libraries/ERC20BurnableUpgradeable.sol\":1246:1536  function burnFrom(address account, uint256 amount) public virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2730:2848  function nonces(address owner) public view override returns (uint256) {... */\n    tag_82:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2831  _nonces[owner] */\n      dup2\n      and\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2791:2798  uint256 */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2831  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2824  _nonces */\n      0x99\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2831  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2841  _nonces[owner].current() */\n      tag_192\n      swap1\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2839  _nonces[owner].current */\n      tag_193\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2817:2841  _nonces[owner].current() */\n      jump\t// in\n    tag_192:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2810:2841  return _nonces[owner].current() */\n      swap3\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2730:2848  function nonces(address owner) public view override returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"src/OwnableUpgradeable.sol\":1337:1422  function owner() public view virtual returns (address) {... */\n    tag_85:\n        /* \"src/OwnableUpgradeable.sol\":1409:1415  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0xfe))\n        /* \"src/OwnableUpgradeable.sol\":1337:1422  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":2709:2802  function symbol() public view virtual returns (string memory) {... */\n    tag_89:\n        /* \"src/libraries/ERC20Upgradeable.sol\":2756:2769  string memory */\n      0x60\n        /* \"src/libraries/ERC20Upgradeable.sol\":2788:2795  _symbol */\n      0x37\n        /* \"src/libraries/ERC20Upgradeable.sol\":2781:2795  return _symbol */\n      dup1\n      sload\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":6630:6896  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_93:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6723:6727  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6739:6868  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_119\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6760  _msgSender() */\n      tag_203\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6758  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6760  _msgSender() */\n      jump\t// in\n    tag_203:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6762:6769  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_129\n        /* \"src/libraries/ERC20Upgradeable.sol\":6810:6825  subtractedValue */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6782  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6796  _allowances[_msgSender()] */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6795  _msgSender() */\n      tag_205\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6793  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6795  _msgSender() */\n      jump\t// in\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6796  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6805  _allowances[_msgSender()][spender] */\n      swap2\n      dup14\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6809  _allowances[_msgSender()][spender].sub */\n      tag_131\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4066:4238  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_97:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4152:4156  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4210  _transfer(_msgSender(), recipient, amount) */\n      tag_119\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4190  _msgSender() */\n      tag_208\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4188  _msgSender */\n      tag_121\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4190  _msgSender() */\n      jump\t// in\n    tag_208:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4192:4201  recipient */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4203:4209  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4177  _transfer */\n      tag_126\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4210  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1864:2669  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {... */\n    tag_102:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2091:2099  deadline */\n      dup4\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2072:2087  block.timestamp */\n      timestamp\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2072:2099  block.timestamp <= deadline */\n      gt\n      iszero\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2064:2133  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      tag_210\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_212\n      jump\t// in\n    tag_210:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2144:2162  bytes32 structHash */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2216:2232  _PERMIT_TYPEHASH */\n      sload(0x9a)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2250:2255  owner */\n      dup9\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2273:2280  spender */\n      dup9\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2298:2303  value */\n      dup9\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2345  _nonces[owner].current() */\n      tag_213\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2328  _nonces */\n      0x99\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2335  _nonces[owner] */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2329:2334  owner */\n      dup15\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2335  _nonces[owner] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2343  _nonces[owner].current */\n      tag_193\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2321:2345  _nonces[owner].current() */\n      jump\t// in\n    tag_213:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2363:2371  deadline */\n      dup10\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2188:2385  abi.encode(... */\n      add(0x20, mload(0x40))\n      tag_214\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_215\n      jump\t// in\n    tag_214:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2165:2395  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2144:2395  bytes32 structHash = keccak256(... */\n      swap1\n      pop\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2406:2418  bytes32 hash */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2421:2449  _hashTypedDataV4(structHash) */\n      tag_216\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2438:2448  structHash */\n      dup3\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2421:2437  _hashTypedDataV4 */\n      tag_217\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2421:2449  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_216:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2406:2449  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2460:2474  address signer */\n      0x00\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2477:2516  ECDSAUpgradeable.recover(hash, v, r, s) */\n      tag_218\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2502:2506  hash */\n      dup3\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2508:2509  v */\n      dup8\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2511:2512  r */\n      dup8\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2514:2515  s */\n      dup8\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2477:2501  ECDSAUpgradeable.recover */\n      tag_219\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2477:2516  ECDSAUpgradeable.recover(hash, v, r, s) */\n      jump\t// in\n    tag_218:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2460:2516  address signer = ECDSAUpgradeable.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2544:2549  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2534:2549  signer == owner */\n      and\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2534:2540  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2534:2549  signer == owner */\n      and\n      eq\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2526:2584  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      tag_220\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_222\n      jump\t// in\n    tag_220:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2609  _nonces[owner] */\n      dup11\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2602  _nonces */\n      0x99\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2609  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2621  _nonces[owner].increment() */\n      tag_223\n      swap1\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2619  _nonces[owner].increment */\n      tag_224\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2595:2621  _nonces[owner].increment() */\n      jump\t// in\n    tag_223:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2631:2662  _approve(owner, spender, value) */\n      tag_225\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2640:2645  owner */\n      dup11\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2647:2654  spender */\n      dup11\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2656:2661  value */\n      dup11\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2631:2639  _approve */\n      tag_122\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":2631:2662  _approve(owner, spender, value) */\n      jump\t// in\n    tag_225:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1864:2669  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_106:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":4385:4392  uint256 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4422  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4438  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"src/OwnableUpgradeable.sol\":2263:2503  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_110:\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      tag_228\n        /* \"src/OwnableUpgradeable.sol\":1560:1570  _msgSender */\n      tag_121\n        /* \"src/OwnableUpgradeable.sol\":1560:1572  _msgSender() */\n      jump\t// in\n    tag_228:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      tag_229\n        /* \"src/OwnableUpgradeable.sol\":1549:1554  owner */\n      tag_85\n        /* \"src/OwnableUpgradeable.sol\":1549:1556  owner() */\n      jump\t// in\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":1549:1572  owner() == _msgSender() */\n      and\n      eq\n        /* \"src/OwnableUpgradeable.sol\":1541:1609  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_230\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_147\n      jump\t// in\n    tag_230:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/OwnableUpgradeable.sol\":2351:2373  newOwner != address(0) */\n      dup2\n      and\n        /* \"src/OwnableUpgradeable.sol\":2343:2416  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_233\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_235\n      jump\t// in\n    tag_233:\n        /* \"src/OwnableUpgradeable.sol\":2452:2458  _owner */\n      sload(0xfe)\n        /* \"src/OwnableUpgradeable.sol\":2431:2469  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup5\n      and\n      swap3\n        /* \"src/OwnableUpgradeable.sol\":2452:2458  _owner */\n      and\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2431:2469  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2452:2458  _owner */\n      0x00\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":2431:2469  OwnershipTransferred(_owner, newOwner) */\n      log3\n        /* \"src/OwnableUpgradeable.sol\":2479:2485  _owner */\n      0xfe\n        /* \"src/OwnableUpgradeable.sol\":2479:2496  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"src/OwnableUpgradeable.sol\":2263:2503  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      jump\t// out\n        /* \"src/libraries/ContextUpgradeable.sol\":828:941  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_121:\n        /* \"src/libraries/ContextUpgradeable.sol\":923:933  msg.sender */\n      caller\n        /* \"src/libraries/ContextUpgradeable.sol\":828:941  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":9694:10034  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9795:9814  owner != address(0) */\n      dup4\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":9787:9855  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_238\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_240\n      jump\t// in\n    tag_238:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9873:9894  spender != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":9865:9933  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_241\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_243\n      jump\t// in\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9962  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9955  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9962  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9971  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9980  _allowances[owner][spender] = amount */\n      dup5\n      swap1\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9995:10027  Approval(owner, spender, amount) */\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap1\n      tag_244\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9974:9980  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9995:10027  Approval(owner, spender, amount) */\n      tag_53\n      jump\t// in\n    tag_244:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"src/libraries/ERC20Upgradeable.sol\":9694:10034  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":7370:7900  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7475:7495  sender != address(0) */\n      dup4\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":7467:7537  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_248\n      jump\t// in\n    tag_246:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7555:7578  recipient != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":7547:7618  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_249\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_251\n      jump\t// in\n    tag_249:\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7676  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_252\n        /* \"src/libraries/ERC20Upgradeable.sol\":7650:7656  sender */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7658:7667  recipient */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7669:7675  amount */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7649  _beforeTokenTransfer */\n      tag_253\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7676  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_252:\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_254\n        /* \"src/libraries/ERC20Upgradeable.sol\":7729:7735  amount */\n      dup2\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7724  _balances[sender] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7716  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7724  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7728  _balances[sender].sub */\n      tag_131\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      jump\t// in\n    tag_254:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7704  _balances[sender] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7696  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7704  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7778  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7831  _balances[recipient] */\n      swap1\n      dup5\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7843  _balances[recipient].add(amount) */\n      tag_255\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7836:7842  amount */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7835  _balances[recipient].add */\n      tag_141\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7843  _balances[recipient].add(amount) */\n      jump\t// in\n    tag_255:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7808  _balances[recipient] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7797  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7808  _balances[recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7843  _balances[recipient] = _balances[recipient].add(amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7858:7893  Transfer(sender, recipient, amount) */\n      swap2\n      mload\n      swap1\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_244\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7886:7892  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7858:7893  Transfer(sender, recipient, amount) */\n      tag_53\n      jump\t// in\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5443:5606  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_131:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5529:5536  uint256 */\n      0x00\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5564:5576  errorMessage */\n      dup2\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5556:5562  b <= a */\n      dup5\n      dup5\n      gt\n      iszero\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5548:5577  require(b <= a, errorMessage) */\n      tag_258\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_258:\n      pop\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5599  a - b */\n      tag_260\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5598:5599  b */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5595  a */\n      dup6\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5599  a - b */\n      tag_261\n      jump\t// in\n    tag_260:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5587:5599  return a - b */\n      swap5\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5443:5606  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":2695:2855  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_135:\n        /* \"src/libraries/EIP712Upgradeable.sol\":2748:2755  bytes32 */\n      0x00\n        /* \"src/libraries/EIP712Upgradeable.sol\":2774:2848  _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash()) */\n      tag_134\n        /* \"src/libraries/EIP712Upgradeable.sol\":1459:1554  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"src/libraries/EIP712Upgradeable.sol\":2808:2825  _EIP712NameHash() */\n      tag_264\n        /* \"src/libraries/EIP712Upgradeable.sol\":2808:2823  _EIP712NameHash */\n      tag_265\n        /* \"src/libraries/EIP712Upgradeable.sol\":2808:2825  _EIP712NameHash() */\n      jump\t// in\n    tag_264:\n        /* \"src/libraries/EIP712Upgradeable.sol\":2827:2847  _EIP712VersionHash() */\n      tag_266\n        /* \"src/libraries/EIP712Upgradeable.sol\":2827:2845  _EIP712VersionHash */\n      tag_267\n        /* \"src/libraries/EIP712Upgradeable.sol\":2827:2847  _EIP712VersionHash() */\n      jump\t// in\n    tag_266:\n        /* \"src/libraries/EIP712Upgradeable.sol\":2774:2795  _buildDomainSeparator */\n      tag_268\n        /* \"src/libraries/EIP712Upgradeable.sol\":2774:2848  _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash()) */\n      jump\t// in\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2701:2876  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_141:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2759:2766  uint256 */\n      0x00\n      dup1\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2795  a + b */\n      tag_270\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2794:2795  b */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2791  a */\n      dup6\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2795  a + b */\n      tag_271\n      jump\t// in\n    tag_270:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2778:2795  uint256 c = a + b */\n      swap1\n      pop\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2818:2819  a */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2813:2814  c */\n      dup2\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2813:2819  c >= a */\n      lt\n      iszero\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2805:2851  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_272\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_274\n      jump\t// in\n    tag_272:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2868:2869  c */\n      swap4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2701:2876  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":8171:8541  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_153:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":8254:8275  account != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":8246:8311  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_276\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_278\n      jump\t// in\n    tag_276:\n        /* \"src/libraries/ERC20Upgradeable.sol\":8322:8371  _beforeTokenTransfer(address(0), account, amount) */\n      tag_279\n        /* \"src/libraries/ERC20Upgradeable.sol\":8351:8352  0 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":8355:8362  account */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":8364:8370  amount */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":8322:8342  _beforeTokenTransfer */\n      tag_253\n        /* \"src/libraries/ERC20Upgradeable.sol\":8322:8371  _beforeTokenTransfer(address(0), account, amount) */\n      jump\t// in\n    tag_279:\n        /* \"src/libraries/ERC20Upgradeable.sol\":8397:8409  _totalSupply */\n      sload(0x35)\n        /* \"src/libraries/ERC20Upgradeable.sol\":8397:8421  _totalSupply.add(amount) */\n      tag_280\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":8414:8420  amount */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":8397:8413  _totalSupply.add */\n      tag_141\n        /* \"src/libraries/ERC20Upgradeable.sol\":8397:8421  _totalSupply.add(amount) */\n      jump\t// in\n    tag_280:\n        /* \"src/libraries/ERC20Upgradeable.sol\":8382:8394  _totalSupply */\n      0x35\n        /* \"src/libraries/ERC20Upgradeable.sol\":8382:8421  _totalSupply = _totalSupply.add(amount) */\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8470  _balances[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8461  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8470  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8482  _balances[account].add(amount) */\n      tag_281\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":8475:8481  amount */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8474  _balances[account].add */\n      tag_141\n        /* \"src/libraries/ERC20Upgradeable.sol\":8452:8482  _balances[account].add(amount) */\n      jump\t// in\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":8431:8449  _balances[account] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":8431:8440  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":8431:8449  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":8431:8482  _balances[account] = _balances[account].add(amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":8497:8534  Transfer(address(0), account, amount) */\n      swap2\n      mload\n        /* \"src/libraries/ERC20Upgradeable.sol\":8431:8449  _balances[account] */\n      swap1\n      swap2\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":8497:8534  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_282\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":8527:8533  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":8497:8534  Transfer(address(0), account, amount) */\n      tag_53\n      jump\t// in\n    tag_282:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"src/libraries/ERC20Upgradeable.sol\":8171:8541  function _mint(address account, uint256 amount) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":8861:9271  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_157:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":8944:8965  account != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":8936:9003  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_284\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_286\n      jump\t// in\n    tag_284:\n        /* \"src/libraries/ERC20Upgradeable.sol\":9014:9063  _beforeTokenTransfer(account, address(0), amount) */\n      tag_287\n        /* \"src/libraries/ERC20Upgradeable.sol\":9035:9042  account */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":9052:9053  0 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":9056:9062  amount */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":9014:9034  _beforeTokenTransfer */\n      tag_253\n        /* \"src/libraries/ERC20Upgradeable.sol\":9014:9063  _beforeTokenTransfer(account, address(0), amount) */\n      jump\t// in\n    tag_287:\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9163  _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\") */\n      tag_288\n        /* \"src/libraries/ERC20Upgradeable.sol\":9118:9124  amount */\n      dup2\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9163  _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      data_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd\n      0x22\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9113  _balances[account] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9104  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9113  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9163  _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9117  _balances[account].sub */\n      tag_131\n        /* \"src/libraries/ERC20Upgradeable.sol\":9095:9163  _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\") */\n      jump\t// in\n    tag_288:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9074:9092  _balances[account] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9074:9083  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":9074:9092  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":9074:9163  _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\") */\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9188:9200  _totalSupply */\n      sload(0x35)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9188:9212  _totalSupply.sub(amount) */\n      tag_289\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9205:9211  amount */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":9188:9204  _totalSupply.sub */\n      tag_290\n        /* \"src/libraries/ERC20Upgradeable.sol\":9188:9212  _totalSupply.sub(amount) */\n      jump\t// in\n    tag_289:\n        /* \"src/libraries/ERC20Upgradeable.sol\":9173:9185  _totalSupply */\n      0x35\n        /* \"src/libraries/ERC20Upgradeable.sol\":9173:9212  _totalSupply = _totalSupply.sub(amount) */\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9227:9264  Transfer(account, address(0), amount) */\n      mload(0x40)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9253:9254  0 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9227:9264  Transfer(account, address(0), amount) */\n      dup5\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_282\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9257:9263  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9227:9264  Transfer(account, address(0), amount) */\n      tag_53\n      jump\t// in\n        /* \"src/proxy/Initializable.sol\":1952:2075  function _isConstructor() private view returns (bool) {... */\n    tag_161:\n        /* \"src/proxy/Initializable.sol\":2000:2004  bool */\n      0x00\n        /* \"src/proxy/Initializable.sol\":2024:2068  AddressUpgradeable.isContract(address(this)) */\n      tag_293\n        /* \"src/proxy/Initializable.sol\":2062:2066  this */\n      address\n        /* \"src/proxy/Initializable.sol\":2024:2053  AddressUpgradeable.isContract */\n      tag_294\n        /* \"src/proxy/Initializable.sol\":2024:2068  AddressUpgradeable.isContract(address(this)) */\n      jump\t// in\n    tag_293:\n        /* \"src/proxy/Initializable.sol\":2023:2068  !AddressUpgradeable.isContract(address(this)) */\n      iszero\n        /* \"src/proxy/Initializable.sol\":2016:2068  return !AddressUpgradeable.isContract(address(this)) */\n      swap1\n      pop\n        /* \"src/proxy/Initializable.sol\":1952:2075  function _isConstructor() private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ContextUpgradeable.sol\":759:823  function __Context_init_unchained() internal initializer {... */\n    tag_169:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_297\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_297\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_297:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_298\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_298:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_299\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_299:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_301\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_301:\n        /* \"src/proxy/Initializable.sol\":1794:1808  isTopLevelCall */\n      dup1\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      iszero\n      tag_155\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/libraries/ContextUpgradeable.sol\":759:823  function __Context_init_unchained() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":2264:2442  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {... */\n    tag_171:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_306\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_306\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_306:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_307\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_307:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_308\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_308:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_310\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_310:\n        /* \"src/libraries/ERC20Upgradeable.sol\":2371:2384  _name = name_ */\n      dup3\n      mload\n      tag_312\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":2371:2376  _name */\n      0x36\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":2371:2384  _name = name_ */\n      0x20\n      dup7\n      add\n      swap1\n      tag_313\n      jump\t// in\n    tag_312:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":2394:2411  _symbol = symbol_ */\n      dup2\n      mload\n      tag_314\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":2394:2401  _symbol */\n      0x37\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":2394:2411  _symbol = symbol_ */\n      0x20\n      dup6\n      add\n      swap1\n      tag_313\n      jump\t// in\n    tag_314:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":2421:2430  _decimals */\n      0x38\n        /* \"src/libraries/ERC20Upgradeable.sol\":2421:2435  _decimals = 18 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":2433:2435  18 */\n      0x12\n        /* \"src/libraries/ERC20Upgradeable.sol\":2421:2435  _decimals = 18 */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_190\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":2264:2442  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1387:1587  function __ERC20Permit_init(string memory name) internal initializer {... */\n    tag_173:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_318\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_318\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_318:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_319\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_319:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_320\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_320:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_322\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_322:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1466:1492  __Context_init_unchained() */\n      tag_324\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1466:1490  __Context_init_unchained */\n      tag_169\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1466:1492  __Context_init_unchained() */\n      jump\t// in\n    tag_324:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1502:1536  __EIP712_init_unchained(name, \"1\") */\n      tag_325\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1526:1530  name */\n      dup3\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1502:1536  __EIP712_init_unchained(name, \"1\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xf8, 0x31)\n      dup2\n      mstore\n      pop\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1502:1525  __EIP712_init_unchained */\n      tag_326\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1502:1536  __EIP712_init_unchained(name, \"1\") */\n      jump\t// in\n    tag_325:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1546:1580  __ERC20Permit_init_unchained(name) */\n      tag_327\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1575:1579  name */\n      dup3\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1546:1574  __ERC20Permit_init_unchained */\n      tag_328\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1546:1580  __ERC20Permit_init_unchained(name) */\n      jump\t// in\n    tag_327:\n        /* \"src/proxy/Initializable.sol\":1794:1808  isTopLevelCall */\n      dup1\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      iszero\n      tag_152\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1387:1587  function __ERC20Permit_init(string memory name) internal initializer {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/OwnableUpgradeable.sol\":1069:1261  function __Ownable_init_unchained() internal initializer {... */\n    tag_175:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_332\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_332\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_332:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_333\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_333:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_334\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_334:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_336\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_336:\n        /* \"src/OwnableUpgradeable.sol\":1136:1153  address msgSender */\n      0x00\n        /* \"src/OwnableUpgradeable.sol\":1156:1168  _msgSender() */\n      tag_338\n        /* \"src/OwnableUpgradeable.sol\":1156:1166  _msgSender */\n      tag_121\n        /* \"src/OwnableUpgradeable.sol\":1156:1168  _msgSender() */\n      jump\t// in\n    tag_338:\n        /* \"src/OwnableUpgradeable.sol\":1178:1184  _owner */\n      0xfe\n        /* \"src/OwnableUpgradeable.sol\":1178:1196  _owner = msgSender */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/OwnableUpgradeable.sol\":1211:1254  OwnershipTransferred(address(0), msgSender) */\n      mload(0x40)\n        /* \"src/OwnableUpgradeable.sol\":1178:1196  _owner = msgSender */\n      swap2\n      swap3\n      pop\n      swap1\n      0x00\n      swap1\n        /* \"src/OwnableUpgradeable.sol\":1211:1254  OwnershipTransferred(address(0), msgSender) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n      dup3\n      swap1\n      log3\n        /* \"src/proxy/Initializable.sol\":1778:1779  _ */\n      pop\n        /* \"src/proxy/Initializable.sol\":1794:1808  isTopLevelCall */\n      dup1\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      iszero\n      tag_155\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/OwnableUpgradeable.sol\":1069:1261  function __Ownable_init_unchained() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"src/libraries/CountersUpgradeable.sol\":1133:1245  function current(Counter storage counter) internal view returns (uint256) {... */\n    tag_193:\n        /* \"src/libraries/CountersUpgradeable.sol\":1224:1238  counter._value */\n      sload\n      swap1\n        /* \"src/libraries/CountersUpgradeable.sol\":1133:1245  function current(Counter storage counter) internal view returns (uint256) {... */\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":3813:3996  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_217:\n        /* \"src/libraries/EIP712Upgradeable.sol\":3890:3897  bytes32 */\n      0x00\n        /* \"src/libraries/EIP712Upgradeable.sol\":3955:3975  _domainSeparatorV4() */\n      tag_342\n        /* \"src/libraries/EIP712Upgradeable.sol\":3955:3973  _domainSeparatorV4 */\n      tag_135\n        /* \"src/libraries/EIP712Upgradeable.sol\":3955:3975  _domainSeparatorV4() */\n      jump\t// in\n    tag_342:\n        /* \"src/libraries/EIP712Upgradeable.sol\":3977:3987  structHash */\n      dup3\n        /* \"src/libraries/EIP712Upgradeable.sol\":3926:3988  abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash) */\n      add(0x20, mload(0x40))\n      tag_343\n      swap3\n      swap2\n      swap1\n      tag_344\n      jump\t// in\n    tag_343:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/libraries/EIP712Upgradeable.sol\":3916:3989  keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/libraries/EIP712Upgradeable.sol\":3909:3989  return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash)) */\n      swap1\n      pop\n        /* \"src/libraries/EIP712Upgradeable.sol\":3813:3996  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/libraries/ECDSAUpgradeable.sol\":1971:3385  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_219:\n        /* \"src/libraries/ECDSAUpgradeable.sol\":2056:2063  address */\n      0x00\n        /* \"src/libraries/ECDSAUpgradeable.sol\":2971:3037  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"src/libraries/ECDSAUpgradeable.sol\":2957:3037  uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup3\n      gt\n      iszero\n        /* \"src/libraries/ECDSAUpgradeable.sol\":2949:3076  require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\") */\n      tag_346\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_348\n      jump\t// in\n    tag_346:\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3094:3095  v */\n      dup4\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3094:3101  v == 27 */\n      0xff\n      and\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3099:3101  27 */\n      0x1b\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3094:3101  v == 27 */\n      eq\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3094:3112  v == 27 || v == 28 */\n      dup1\n      tag_349\n      jumpi\n      pop\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3105:3106  v */\n      dup4\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3105:3112  v == 28 */\n      0xff\n      and\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3110:3112  28 */\n      0x1c\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3105:3112  v == 28 */\n      eq\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3094:3112  v == 27 || v == 28 */\n    tag_349:\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3086:3151  require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\") */\n      tag_350\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_352\n      jump\t// in\n    tag_350:\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3246:3260  address signer */\n      0x00\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3263:3287  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3273:3277  hash */\n      dup7\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3279:3280  v */\n      dup7\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3282:3283  r */\n      dup7\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3285:3286  s */\n      dup7\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3263:3287  ecrecover(hash, v, r, s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      tag_353\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_354\n      jump\t// in\n    tag_353:\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_356\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_356:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3305:3325  signer != address(0) */\n      dup2\n      and\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3297:3354  require(signer != address(0), \"ECDSA: invalid signature\") */\n      tag_357\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_359\n      jump\t// in\n    tag_357:\n        /* \"src/libraries/ECDSAUpgradeable.sol\":3372:3378  signer */\n      swap6\n        /* \"src/libraries/ECDSAUpgradeable.sol\":1971:3385  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/CountersUpgradeable.sol\":1251:1429  function increment(Counter storage counter) internal {... */\n    tag_224:\n        /* \"src/libraries/CountersUpgradeable.sol\":1421:1422  1 */\n      0x01\n        /* \"src/libraries/CountersUpgradeable.sol\":1403:1410  counter */\n      dup2\n        /* \"src/libraries/CountersUpgradeable.sol\":1403:1417  counter._value */\n      0x00\n      add\n      0x00\n        /* \"src/libraries/CountersUpgradeable.sol\":1403:1422  counter._value += 1 */\n      dup3\n      dup3\n      sload\n      tag_361\n      swap2\n      swap1\n      tag_271\n      jump\t// in\n    tag_361:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n        /* \"src/libraries/CountersUpgradeable.sol\":1251:1429  function increment(Counter storage counter) internal {... */\n      jump\t// out\n        /* \"src/LPToken.sol\":1948:2227  function _beforeTokenTransfer(... */\n    tag_253:\n        /* \"src/LPToken.sol\":2104:2148  super._beforeTokenTransfer(from, to, amount) */\n      tag_363\n        /* \"src/LPToken.sol\":2131:2135  from */\n      dup4\n        /* \"src/LPToken.sol\":2137:2139  to */\n      dup4\n        /* \"src/LPToken.sol\":2141:2147  amount */\n      dup4\n        /* \"src/LPToken.sol\":2104:2130  super._beforeTokenTransfer */\n      tag_190\n        /* \"src/LPToken.sol\":2104:2148  super._beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_363:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/LPToken.sol\":2166:2185  to != address(this) */\n      dup3\n      and\n        /* \"src/LPToken.sol\":2180:2184  this */\n      address\n        /* \"src/LPToken.sol\":2166:2185  to != address(this) */\n      eq\n      iszero\n        /* \"src/LPToken.sol\":2158:2220  require(to != address(this), \"LPToken: cannot send to itself\") */\n      tag_190\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_367\n      jump\t// in\n        /* \"src/libraries/EIP712Upgradeable.sol\":4558:4661  function _EIP712NameHash() internal virtual view returns (bytes32) {... */\n    tag_265:\n        /* \"src/libraries/EIP712Upgradeable.sol\":4642:4654  _HASHED_NAME */\n      sload(0x65)\n        /* \"src/libraries/EIP712Upgradeable.sol\":4558:4661  function _EIP712NameHash() internal virtual view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":4900:5009  function _EIP712VersionHash() internal virtual view returns (bytes32) {... */\n    tag_267:\n        /* \"src/libraries/EIP712Upgradeable.sol\":4987:5002  _HASHED_VERSION */\n      sload(0x66)\n        /* \"src/libraries/EIP712Upgradeable.sol\":4900:5009  function _EIP712VersionHash() internal virtual view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":2861:3188  function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {... */\n    tag_268:\n        /* \"src/libraries/EIP712Upgradeable.sol\":2963:2970  bytes32 */\n      0x00\n        /* \"src/libraries/EIP712Upgradeable.sol\":3040:3048  typeHash */\n      dup4\n        /* \"src/libraries/EIP712Upgradeable.sol\":3066:3070  name */\n      dup4\n        /* \"src/libraries/EIP712Upgradeable.sol\":3088:3095  version */\n      dup4\n        /* \"src/libraries/EIP712Upgradeable.sol\":3113:3126  _getChainId() */\n      tag_371\n        /* \"src/libraries/EIP712Upgradeable.sol\":3113:3124  _getChainId */\n      tag_372\n        /* \"src/libraries/EIP712Upgradeable.sol\":3113:3126  _getChainId() */\n      jump\t// in\n    tag_371:\n        /* \"src/libraries/EIP712Upgradeable.sol\":3152:3156  this */\n      address\n        /* \"src/libraries/EIP712Upgradeable.sol\":3012:3171  abi.encode(... */\n      add(0x20, mload(0x40))\n      tag_373\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_374\n      jump\t// in\n    tag_373:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/libraries/EIP712Upgradeable.sol\":2989:3181  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/libraries/EIP712Upgradeable.sol\":2982:3181  return keccak256(... */\n      swap1\n      pop\n        /* \"src/libraries/EIP712Upgradeable.sol\":2861:3188  function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3147:3302  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_290:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3205:3212  uint256 */\n      0x00\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3237:3238  a */\n      dup3\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3232:3233  b */\n      dup3\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3232:3238  b <= a */\n      gt\n      iszero\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3224:3273  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_376\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_378\n      jump\t// in\n    tag_376:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3290:3295  a - b */\n      tag_272\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3294:3295  b */\n      dup3\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3290:3291  a */\n      dup5\n        /* \"src/libraries/SafeMathUpgradeable.sol\":3290:3295  a - b */\n      tag_261\n      jump\t// in\n        /* \"src/utils/AddressUpgradeable.sol\":737:1150  function isContract(address account) internal view returns (bool) {... */\n    tag_294:\n        /* \"src/utils/AddressUpgradeable.sol\":1097:1117  extcodesize(account) */\n      extcodesize\n        /* \"src/utils/AddressUpgradeable.sol\":1135:1143  size > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"src/utils/AddressUpgradeable.sol\":737:1150  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":2317:2609  function __EIP712_init_unchained(string memory name, string memory version) internal initializer {... */\n    tag_326:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_383\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_383\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_383:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_384\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_384:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_385\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_385:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_387\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_387:\n        /* \"src/libraries/EIP712Upgradeable.sol\":2445:2467  keccak256(bytes(name)) */\n      dup3\n      mload\n      0x20\n      dup1\n      dup6\n      add\n      swap2\n      swap1\n      swap2\n      keccak256\n        /* \"src/libraries/EIP712Upgradeable.sol\":2501:2526  keccak256(bytes(version)) */\n      dup4\n      mload\n      swap2\n      dup5\n      add\n      swap2\n      swap1\n      swap2\n      keccak256\n        /* \"src/libraries/EIP712Upgradeable.sol\":2536:2548  _HASHED_NAME */\n      0x65\n        /* \"src/libraries/EIP712Upgradeable.sol\":2536:2561  _HASHED_NAME = hashedName */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"src/libraries/EIP712Upgradeable.sol\":2571:2586  _HASHED_VERSION */\n      0x66\n        /* \"src/libraries/EIP712Upgradeable.sol\":2571:2602  _HASHED_VERSION = hashedVersion */\n      sstore\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_190\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/libraries/EIP712Upgradeable.sol\":2317:2609  function __EIP712_init_unchained(string memory name, string memory version) internal initializer {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1593:1803  function __ERC20Permit_init_unchained(string memory name) internal initializer {... */\n    tag_328:\n        /* \"src/proxy/Initializable.sol\":1512:1525  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"src/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      tag_392\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_392\n        /* \"src/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_161\n        /* \"src/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_392:\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_393\n      jumpi\n      pop\n        /* \"src/proxy/Initializable.sol\":1550:1562  _initialized */\n      and(0xff, sload(0x00))\n        /* \"src/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_393:\n        /* \"src/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_394\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_146\n      swap1\n      tag_165\n      jump\t// in\n    tag_394:\n        /* \"src/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1647:1660  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"src/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_396\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      and\n        /* \"src/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"src/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"src/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_396:\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1701:1796  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1682:1698  _PERMIT_TYPEHASH */\n      0x9a\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1682:1796  _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      sstore\n        /* \"src/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_152\n      jumpi\n        /* \"src/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"src/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"src/libraries/ERC20PermitUpgradeable.sol\":1593:1803  function __ERC20Permit_init_unchained(string memory name) internal initializer {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/EIP712Upgradeable.sol\":4002:4322  function _getChainId() private view returns (uint256 chainId) {... */\n    tag_372:\n        /* \"src/libraries/EIP712Upgradeable.sol\":4297:4306  chainid() */\n      chainid\n      swap1\n        /* \"src/libraries/EIP712Upgradeable.sol\":4272:4316  {... */\n      jump\t// out\n    tag_313:\n      dup3\n      dup1\n      sload\n      tag_401\n      swap1\n      tag_113\n      jump\t// in\n    tag_401:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_403\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_406)\n    tag_403:\n      dup3\n      0x1f\n      lt\n      tag_404\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_406)\n    tag_404:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_406\n      jumpi\n      swap2\n      dup3\n      add\n    tag_405:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_406\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_405)\n    tag_406:\n      pop\n      tag_407\n      swap3\n      swap2\n      pop\n      tag_408\n      jump\t// in\n    tag_407:\n      pop\n      swap1\n      jump\t// out\n    tag_408:\n    tag_409:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_407\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_409)\n        /* \"#utility.yul\":14:189   */\n    tag_412:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_177\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:907   */\n    tag_415:\n      0x00\n        /* \"#utility.yul\":292:295   */\n      dup3\n        /* \"#utility.yul\":285:289   */\n      0x1f\n        /* \"#utility.yul\":277:283   */\n      dup4\n        /* \"#utility.yul\":273:290   */\n      add\n        /* \"#utility.yul\":269:296   */\n      slt\n        /* \"#utility.yul\":259:261   */\n      tag_417\n      jumpi\n        /* \"#utility.yul\":314:319   */\n      dup1\n        /* \"#utility.yul\":307:312   */\n      dup2\n        /* \"#utility.yul\":300:320   */\n      revert\n        /* \"#utility.yul\":259:261   */\n    tag_417:\n        /* \"#utility.yul\":354:360   */\n      dup2\n        /* \"#utility.yul\":341:361   */\n      calldataload\n        /* \"#utility.yul\":380:398   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":417:419   */\n      dup1\n        /* \"#utility.yul\":413:415   */\n      dup3\n        /* \"#utility.yul\":410:420   */\n      gt\n        /* \"#utility.yul\":407:409   */\n      iszero\n      tag_419\n      jumpi\n        /* \"#utility.yul\":423:441   */\n      tag_419\n      tag_420\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":472:474   */\n      0x40\n        /* \"#utility.yul\":466:475   */\n      mload\n        /* \"#utility.yul\":541:543   */\n      0x1f\n        /* \"#utility.yul\":522:535   */\n      dup4\n      add\n      not(0x1f)\n        /* \"#utility.yul\":518:545   */\n      and\n        /* \"#utility.yul\":506:546   */\n      dup2\n      add\n        /* \"#utility.yul\":548:552   */\n      0x20\n        /* \"#utility.yul\":502:553   */\n      add\n        /* \"#utility.yul\":568:586   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":588:610   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":565:611   */\n      or\n        /* \"#utility.yul\":562:564   */\n      iszero\n      tag_422\n      jumpi\n        /* \"#utility.yul\":614:632   */\n      tag_422\n      tag_420\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":650:652   */\n      0x40\n        /* \"#utility.yul\":643:665   */\n      mstore\n        /* \"#utility.yul\":674:692   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":711:726   */\n      dup5\n      dup4\n      add\n        /* \"#utility.yul\":728:732   */\n      0x20\n        /* \"#utility.yul\":707:733   */\n      add\n        /* \"#utility.yul\":704:739   */\n      dup7\n      lt\n        /* \"#utility.yul\":701:703   */\n      iszero\n      tag_423\n      jumpi\n        /* \"#utility.yul\":756:761   */\n      dup4\n        /* \"#utility.yul\":749:754   */\n      dup5\n        /* \"#utility.yul\":742:762   */\n      revert\n        /* \"#utility.yul\":701:703   */\n    tag_423:\n        /* \"#utility.yul\":824:826   */\n      dup3\n        /* \"#utility.yul\":817:821   */\n      0x20\n        /* \"#utility.yul\":809:815   */\n      dup7\n        /* \"#utility.yul\":805:822   */\n      add\n        /* \"#utility.yul\":798:802   */\n      0x20\n        /* \"#utility.yul\":790:796   */\n      dup4\n        /* \"#utility.yul\":786:803   */\n      add\n        /* \"#utility.yul\":773:827   */\n      calldatacopy\n        /* \"#utility.yul\":847:862   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":864:868   */\n      0x20\n        /* \"#utility.yul\":843:869   */\n      add\n        /* \"#utility.yul\":836:877   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":851:857   */\n      swap4\n        /* \"#utility.yul\":249:907   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":912:1110   */\n    tag_72:\n      0x00\n        /* \"#utility.yul\":1024:1026   */\n      0x20\n        /* \"#utility.yul\":1012:1021   */\n      dup3\n        /* \"#utility.yul\":1003:1010   */\n      dup5\n        /* \"#utility.yul\":999:1022   */\n      sub\n        /* \"#utility.yul\":995:1027   */\n      slt\n        /* \"#utility.yul\":992:994   */\n      iszero\n      tag_425\n      jumpi\n        /* \"#utility.yul\":1045:1051   */\n      dup1\n        /* \"#utility.yul\":1037:1043   */\n      dup2\n        /* \"#utility.yul\":1030:1052   */\n      revert\n        /* \"#utility.yul\":992:994   */\n    tag_425:\n        /* \"#utility.yul\":1073:1104   */\n      tag_272\n        /* \"#utility.yul\":1094:1103   */\n      dup3\n        /* \"#utility.yul\":1073:1104   */\n      tag_412\n      jump\t// in\n        /* \"#utility.yul\":1115:1389   */\n    tag_105:\n      0x00\n      dup1\n        /* \"#utility.yul\":1244:1246   */\n      0x40\n        /* \"#utility.yul\":1232:1241   */\n      dup4\n        /* \"#utility.yul\":1223:1230   */\n      dup6\n        /* \"#utility.yul\":1219:1242   */\n      sub\n        /* \"#utility.yul\":1215:1247   */\n      slt\n        /* \"#utility.yul\":1212:1214   */\n      iszero\n      tag_428\n      jumpi\n        /* \"#utility.yul\":1265:1271   */\n      dup1\n        /* \"#utility.yul\":1257:1263   */\n      dup2\n        /* \"#utility.yul\":1250:1272   */\n      revert\n        /* \"#utility.yul\":1212:1214   */\n    tag_428:\n        /* \"#utility.yul\":1293:1324   */\n      tag_429\n        /* \"#utility.yul\":1314:1323   */\n      dup4\n        /* \"#utility.yul\":1293:1324   */\n      tag_412\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":1283:1324   */\n      swap2\n      pop\n        /* \"#utility.yul\":1343:1383   */\n      tag_430\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1368:1377   */\n      dup5\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"#utility.yul\":1343:1383   */\n      tag_412\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":1333:1383   */\n      swap1\n      pop\n        /* \"#utility.yul\":1202:1389   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1394:1736   */\n    tag_43:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1540:1542   */\n      0x60\n        /* \"#utility.yul\":1528:1537   */\n      dup5\n        /* \"#utility.yul\":1519:1526   */\n      dup7\n        /* \"#utility.yul\":1515:1538   */\n      sub\n        /* \"#utility.yul\":1511:1543   */\n      slt\n        /* \"#utility.yul\":1508:1510   */\n      iszero\n      tag_432\n      jumpi\n        /* \"#utility.yul\":1561:1567   */\n      dup1\n        /* \"#utility.yul\":1553:1559   */\n      dup2\n        /* \"#utility.yul\":1546:1568   */\n      revert\n        /* \"#utility.yul\":1508:1510   */\n    tag_432:\n        /* \"#utility.yul\":1589:1620   */\n      tag_433\n        /* \"#utility.yul\":1610:1619   */\n      dup5\n        /* \"#utility.yul\":1589:1620   */\n      tag_412\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":1579:1620   */\n      swap3\n      pop\n        /* \"#utility.yul\":1639:1679   */\n      tag_434\n        /* \"#utility.yul\":1675:1677   */\n      0x20\n        /* \"#utility.yul\":1664:1673   */\n      dup6\n        /* \"#utility.yul\":1660:1678   */\n      add\n        /* \"#utility.yul\":1639:1679   */\n      tag_412\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":1629:1679   */\n      swap2\n      pop\n        /* \"#utility.yul\":1726:1728   */\n      0x40\n        /* \"#utility.yul\":1715:1724   */\n      dup5\n        /* \"#utility.yul\":1711:1729   */\n      add\n        /* \"#utility.yul\":1698:1730   */\n      calldataload\n        /* \"#utility.yul\":1688:1730   */\n      swap1\n      pop\n        /* \"#utility.yul\":1498:1736   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1741:2458   */\n    tag_101:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1953:1956   */\n      0xe0\n        /* \"#utility.yul\":1941:1950   */\n      dup9\n        /* \"#utility.yul\":1932:1939   */\n      dup11\n        /* \"#utility.yul\":1928:1951   */\n      sub\n        /* \"#utility.yul\":1924:1957   */\n      slt\n        /* \"#utility.yul\":1921:1923   */\n      iszero\n      tag_436\n      jumpi\n        /* \"#utility.yul\":1975:1981   */\n      dup3\n        /* \"#utility.yul\":1967:1973   */\n      dup4\n        /* \"#utility.yul\":1960:1982   */\n      revert\n        /* \"#utility.yul\":1921:1923   */\n    tag_436:\n        /* \"#utility.yul\":2003:2034   */\n      tag_437\n        /* \"#utility.yul\":2024:2033   */\n      dup9\n        /* \"#utility.yul\":2003:2034   */\n      tag_412\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":1993:2034   */\n      swap7\n      pop\n        /* \"#utility.yul\":2053:2093   */\n      tag_438\n        /* \"#utility.yul\":2089:2091   */\n      0x20\n        /* \"#utility.yul\":2078:2087   */\n      dup10\n        /* \"#utility.yul\":2074:2092   */\n      add\n        /* \"#utility.yul\":2053:2093   */\n      tag_412\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":2043:2093   */\n      swap6\n      pop\n        /* \"#utility.yul\":2140:2142   */\n      0x40\n        /* \"#utility.yul\":2129:2138   */\n      dup9\n        /* \"#utility.yul\":2125:2143   */\n      add\n        /* \"#utility.yul\":2112:2144   */\n      calldataload\n        /* \"#utility.yul\":2102:2144   */\n      swap5\n      pop\n        /* \"#utility.yul\":2191:2193   */\n      0x60\n        /* \"#utility.yul\":2180:2189   */\n      dup9\n        /* \"#utility.yul\":2176:2194   */\n      add\n        /* \"#utility.yul\":2163:2195   */\n      calldataload\n        /* \"#utility.yul\":2153:2195   */\n      swap4\n      pop\n        /* \"#utility.yul\":2245:2248   */\n      0x80\n        /* \"#utility.yul\":2234:2243   */\n      dup9\n        /* \"#utility.yul\":2230:2249   */\n      add\n        /* \"#utility.yul\":2217:2250   */\n      calldataload\n        /* \"#utility.yul\":2290:2294   */\n      0xff\n        /* \"#utility.yul\":2283:2288   */\n      dup2\n        /* \"#utility.yul\":2279:2295   */\n      and\n        /* \"#utility.yul\":2272:2277   */\n      dup2\n        /* \"#utility.yul\":2269:2296   */\n      eq\n        /* \"#utility.yul\":2259:2261   */\n      tag_439\n      jumpi\n        /* \"#utility.yul\":2315:2321   */\n      dup4\n        /* \"#utility.yul\":2307:2313   */\n      dup5\n        /* \"#utility.yul\":2300:2322   */\n      revert\n        /* \"#utility.yul\":2259:2261   */\n    tag_439:\n        /* \"#utility.yul\":1911:2458   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":2343:2348   */\n      swap5\n        /* \"#utility.yul\":2395:2398   */\n      0xa0\n        /* \"#utility.yul\":2380:2399   */\n      dup5\n      add\n        /* \"#utility.yul\":2367:2400   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":2447:2450   */\n      0xc0\n        /* \"#utility.yul\":2432:2451   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2419:2452   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":1911:2458   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2463:2729   */\n    tag_33:\n      0x00\n      dup1\n        /* \"#utility.yul\":2592:2594   */\n      0x40\n        /* \"#utility.yul\":2580:2589   */\n      dup4\n        /* \"#utility.yul\":2571:2578   */\n      dup6\n        /* \"#utility.yul\":2567:2590   */\n      sub\n        /* \"#utility.yul\":2563:2595   */\n      slt\n        /* \"#utility.yul\":2560:2562   */\n      iszero\n      tag_441\n      jumpi\n        /* \"#utility.yul\":2613:2619   */\n      dup2\n        /* \"#utility.yul\":2605:2611   */\n      dup3\n        /* \"#utility.yul\":2598:2620   */\n      revert\n        /* \"#utility.yul\":2560:2562   */\n    tag_441:\n        /* \"#utility.yul\":2641:2672   */\n      tag_442\n        /* \"#utility.yul\":2662:2671   */\n      dup4\n        /* \"#utility.yul\":2641:2672   */\n      tag_412\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":2631:2672   */\n      swap5\n        /* \"#utility.yul\":2719:2721   */\n      0x20\n        /* \"#utility.yul\":2704:2722   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2691:2723   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2550:2729   */\n      jump\t// out\n        /* \"#utility.yul\":2734:3311   */\n    tag_67:\n      0x00\n      dup1\n        /* \"#utility.yul\":2883:2885   */\n      0x40\n        /* \"#utility.yul\":2871:2880   */\n      dup4\n        /* \"#utility.yul\":2862:2869   */\n      dup6\n        /* \"#utility.yul\":2858:2881   */\n      sub\n        /* \"#utility.yul\":2854:2886   */\n      slt\n        /* \"#utility.yul\":2851:2853   */\n      iszero\n      tag_444\n      jumpi\n        /* \"#utility.yul\":2904:2910   */\n      dup2\n        /* \"#utility.yul\":2896:2902   */\n      dup3\n        /* \"#utility.yul\":2889:2911   */\n      revert\n        /* \"#utility.yul\":2851:2853   */\n    tag_444:\n        /* \"#utility.yul\":2949:2958   */\n      dup3\n        /* \"#utility.yul\":2936:2959   */\n      calldataload\n        /* \"#utility.yul\":2978:2996   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3019:3021   */\n      dup1\n        /* \"#utility.yul\":3011:3017   */\n      dup3\n        /* \"#utility.yul\":3008:3022   */\n      gt\n        /* \"#utility.yul\":3005:3007   */\n      iszero\n      tag_445\n      jumpi\n        /* \"#utility.yul\":3040:3046   */\n      dup4\n        /* \"#utility.yul\":3032:3038   */\n      dup5\n        /* \"#utility.yul\":3025:3047   */\n      revert\n        /* \"#utility.yul\":3005:3007   */\n    tag_445:\n        /* \"#utility.yul\":3068:3120   */\n      tag_446\n        /* \"#utility.yul\":3112:3119   */\n      dup7\n        /* \"#utility.yul\":3103:3109   */\n      dup4\n        /* \"#utility.yul\":3092:3101   */\n      dup8\n        /* \"#utility.yul\":3088:3110   */\n      add\n        /* \"#utility.yul\":3068:3120   */\n      tag_415\n      jump\t// in\n    tag_446:\n        /* \"#utility.yul\":3058:3120   */\n      swap4\n      pop\n        /* \"#utility.yul\":3173:3175   */\n      0x20\n        /* \"#utility.yul\":3162:3171   */\n      dup6\n        /* \"#utility.yul\":3158:3176   */\n      add\n        /* \"#utility.yul\":3145:3177   */\n      calldataload\n        /* \"#utility.yul\":3129:3177   */\n      swap2\n      pop\n        /* \"#utility.yul\":3202:3204   */\n      dup1\n        /* \"#utility.yul\":3192:3200   */\n      dup3\n        /* \"#utility.yul\":3189:3205   */\n      gt\n        /* \"#utility.yul\":3186:3188   */\n      iszero\n      tag_447\n      jumpi\n        /* \"#utility.yul\":3223:3229   */\n      dup3\n        /* \"#utility.yul\":3215:3221   */\n      dup4\n        /* \"#utility.yul\":3208:3230   */\n      revert\n        /* \"#utility.yul\":3186:3188   */\n    tag_447:\n      pop\n        /* \"#utility.yul\":3251:3305   */\n      tag_448\n        /* \"#utility.yul\":3297:3304   */\n      dup6\n        /* \"#utility.yul\":3286:3294   */\n      dup3\n        /* \"#utility.yul\":3275:3284   */\n      dup7\n        /* \"#utility.yul\":3271:3295   */\n      add\n        /* \"#utility.yul\":3251:3305   */\n      tag_415\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":3241:3305   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2841:3311   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3316:3506   */\n    tag_63:\n      0x00\n        /* \"#utility.yul\":3428:3430   */\n      0x20\n        /* \"#utility.yul\":3416:3425   */\n      dup3\n        /* \"#utility.yul\":3407:3414   */\n      dup5\n        /* \"#utility.yul\":3403:3426   */\n      sub\n        /* \"#utility.yul\":3399:3431   */\n      slt\n        /* \"#utility.yul\":3396:3398   */\n      iszero\n      tag_450\n      jumpi\n        /* \"#utility.yul\":3449:3455   */\n      dup1\n        /* \"#utility.yul\":3441:3447   */\n      dup2\n        /* \"#utility.yul\":3434:3456   */\n      revert\n        /* \"#utility.yul\":3396:3398   */\n    tag_450:\n      pop\n        /* \"#utility.yul\":3477:3500   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3386:3506   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3511:3903   */\n    tag_344:\n      shl(0xf0, 0x1901)\n        /* \"#utility.yul\":3769:3796   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3821:3822   */\n      0x02\n        /* \"#utility.yul\":3812:3823   */\n      dup2\n      add\n        /* \"#utility.yul\":3805:3832   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":3857:3859   */\n      0x22\n        /* \"#utility.yul\":3848:3860   */\n      dup3\n      add\n        /* \"#utility.yul\":3841:3869   */\n      mstore\n        /* \"#utility.yul\":3894:3896   */\n      0x42\n        /* \"#utility.yul\":3885:3897   */\n      add\n      swap1\n        /* \"#utility.yul\":3759:3903   */\n      jump\t// out\n        /* \"#utility.yul\":3908:4111   */\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4072:4104   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4054:4105   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4042:4044   */\n      0x20\n        /* \"#utility.yul\":4027:4045   */\n      add\n      swap1\n        /* \"#utility.yul\":4009:4111   */\n      jump\t// out\n        /* \"#utility.yul\":4116:4303   */\n    tag_36:\n        /* \"#utility.yul\":4281:4295   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4274:4296   */\n      iszero\n        /* \"#utility.yul\":4256:4297   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4244:4246   */\n      0x20\n        /* \"#utility.yul\":4229:4247   */\n      add\n      swap1\n        /* \"#utility.yul\":4211:4303   */\n      jump\t// out\n        /* \"#utility.yul\":4308:4485   */\n    tag_53:\n        /* \"#utility.yul\":4454:4479   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":4442:4444   */\n      0x20\n        /* \"#utility.yul\":4427:4445   */\n      add\n      swap1\n        /* \"#utility.yul\":4409:4485   */\n      jump\t// out\n        /* \"#utility.yul\":4490:5081   */\n    tag_215:\n        /* \"#utility.yul\":4777:4802   */\n      swap6\n      dup7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4876:4891   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":4871:4873   */\n      0x20\n        /* \"#utility.yul\":4856:4874   */\n      dup8\n      add\n        /* \"#utility.yul\":4849:4892   */\n      mstore\n        /* \"#utility.yul\":4928:4943   */\n      swap3\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":4923:4925   */\n      0x40\n        /* \"#utility.yul\":4908:4926   */\n      dup6\n      add\n        /* \"#utility.yul\":4901:4944   */\n      mstore\n        /* \"#utility.yul\":4975:4977   */\n      0x60\n        /* \"#utility.yul\":4960:4978   */\n      dup5\n      add\n        /* \"#utility.yul\":4953:4987   */\n      mstore\n        /* \"#utility.yul\":5018:5021   */\n      0x80\n        /* \"#utility.yul\":5003:5022   */\n      dup4\n      add\n        /* \"#utility.yul\":4996:5031   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":4829:4832   */\n      0xa0\n        /* \"#utility.yul\":5047:5066   */\n      dup3\n      add\n        /* \"#utility.yul\":5040:5075   */\n      mstore\n        /* \"#utility.yul\":4764:4767   */\n      0xc0\n        /* \"#utility.yul\":4749:4768   */\n      add\n      swap1\n        /* \"#utility.yul\":4731:5081   */\n      jump\t// out\n        /* \"#utility.yul\":5086:5575   */\n    tag_374:\n        /* \"#utility.yul\":5345:5370   */\n      swap5\n      dup6\n      mstore\n        /* \"#utility.yul\":5401:5403   */\n      0x20\n        /* \"#utility.yul\":5386:5404   */\n      dup6\n      add\n        /* \"#utility.yul\":5379:5413   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":5444:5446   */\n      0x40\n        /* \"#utility.yul\":5429:5447   */\n      dup5\n      add\n        /* \"#utility.yul\":5422:5456   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":5487:5489   */\n      0x60\n        /* \"#utility.yul\":5472:5490   */\n      dup4\n      add\n        /* \"#utility.yul\":5465:5499   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5536:5568   */\n      and\n        /* \"#utility.yul\":5530:5533   */\n      0x80\n        /* \"#utility.yul\":5515:5534   */\n      dup3\n      add\n        /* \"#utility.yul\":5508:5569   */\n      mstore\n        /* \"#utility.yul\":5332:5335   */\n      0xa0\n        /* \"#utility.yul\":5317:5336   */\n      add\n      swap1\n        /* \"#utility.yul\":5299:5575   */\n      jump\t// out\n        /* \"#utility.yul\":5580:5978   */\n    tag_354:\n        /* \"#utility.yul\":5807:5832   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":5880:5884   */\n      0xff\n        /* \"#utility.yul\":5868:5885   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":5863:5865   */\n      0x20\n        /* \"#utility.yul\":5848:5866   */\n      dup5\n      add\n        /* \"#utility.yul\":5841:5886   */\n      mstore\n        /* \"#utility.yul\":5917:5919   */\n      0x40\n        /* \"#utility.yul\":5902:5920   */\n      dup4\n      add\n        /* \"#utility.yul\":5895:5929   */\n      mstore\n        /* \"#utility.yul\":5960:5962   */\n      0x60\n        /* \"#utility.yul\":5945:5963   */\n      dup3\n      add\n        /* \"#utility.yul\":5938:5972   */\n      mstore\n        /* \"#utility.yul\":5794:5797   */\n      0x80\n        /* \"#utility.yul\":5779:5798   */\n      add\n      swap1\n        /* \"#utility.yul\":5761:5978   */\n      jump\t// out\n        /* \"#utility.yul\":5983:6586   */\n    tag_30:\n      0x00\n        /* \"#utility.yul\":6124:6126   */\n      0x20\n        /* \"#utility.yul\":6153:6155   */\n      dup1\n        /* \"#utility.yul\":6142:6151   */\n      dup4\n        /* \"#utility.yul\":6135:6156   */\n      mstore\n        /* \"#utility.yul\":6185:6191   */\n      dup4\n        /* \"#utility.yul\":6179:6192   */\n      mload\n        /* \"#utility.yul\":6228:6234   */\n      dup1\n        /* \"#utility.yul\":6223:6225   */\n      dup3\n        /* \"#utility.yul\":6212:6221   */\n      dup6\n        /* \"#utility.yul\":6208:6226   */\n      add\n        /* \"#utility.yul\":6201:6235   */\n      mstore\n        /* \"#utility.yul\":6253:6257   */\n      dup3\n        /* \"#utility.yul\":6266:6406   */\n    tag_459:\n        /* \"#utility.yul\":6280:6286   */\n      dup2\n        /* \"#utility.yul\":6277:6278   */\n      dup2\n        /* \"#utility.yul\":6274:6287   */\n      lt\n        /* \"#utility.yul\":6266:6406   */\n      iszero\n      tag_461\n      jumpi\n        /* \"#utility.yul\":6375:6389   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":6371:6394   */\n      dup4\n      add\n        /* \"#utility.yul\":6365:6395   */\n      mload\n        /* \"#utility.yul\":6341:6358   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":6360:6362   */\n      0x40\n        /* \"#utility.yul\":6337:6363   */\n      add\n        /* \"#utility.yul\":6330:6396   */\n      mstore\n        /* \"#utility.yul\":6295:6305   */\n      dup3\n      add\n        /* \"#utility.yul\":6266:6406   */\n      jump(tag_459)\n    tag_461:\n        /* \"#utility.yul\":6424:6430   */\n      dup2\n        /* \"#utility.yul\":6421:6422   */\n      dup2\n        /* \"#utility.yul\":6418:6431   */\n      gt\n        /* \"#utility.yul\":6415:6417   */\n      iszero\n      tag_462\n      jumpi\n        /* \"#utility.yul\":6494:6498   */\n      dup4\n        /* \"#utility.yul\":6489:6491   */\n      0x40\n        /* \"#utility.yul\":6480:6486   */\n      dup4\n        /* \"#utility.yul\":6469:6478   */\n      dup8\n        /* \"#utility.yul\":6465:6487   */\n      add\n        /* \"#utility.yul\":6461:6492   */\n      add\n        /* \"#utility.yul\":6454:6499   */\n      mstore\n        /* \"#utility.yul\":6415:6417   */\n    tag_462:\n      pop\n        /* \"#utility.yul\":6570:6572   */\n      0x1f\n        /* \"#utility.yul\":6549:6564   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":6545:6574   */\n      and\n        /* \"#utility.yul\":6530:6575   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":6577:6579   */\n      0x40\n        /* \"#utility.yul\":6526:6580   */\n      add\n      swap4\n        /* \"#utility.yul\":6104:6586   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6591:6939   */\n    tag_359:\n        /* \"#utility.yul\":6793:6795   */\n      0x20\n        /* \"#utility.yul\":6775:6796   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6832:6834   */\n      0x18\n        /* \"#utility.yul\":6812:6830   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6805:6835   */\n      mstore\n        /* \"#utility.yul\":6871:6897   */\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n        /* \"#utility.yul\":6866:6868   */\n      0x40\n        /* \"#utility.yul\":6851:6869   */\n      dup3\n      add\n        /* \"#utility.yul\":6844:6898   */\n      mstore\n        /* \"#utility.yul\":6930:6932   */\n      0x60\n        /* \"#utility.yul\":6915:6933   */\n      add\n      swap1\n        /* \"#utility.yul\":6765:6939   */\n      jump\t// out\n        /* \"#utility.yul\":6944:7343   */\n    tag_251:\n        /* \"#utility.yul\":7146:7148   */\n      0x20\n        /* \"#utility.yul\":7128:7149   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7185:7187   */\n      0x23\n        /* \"#utility.yul\":7165:7183   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7158:7188   */\n      mstore\n        /* \"#utility.yul\":7224:7258   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":7219:7221   */\n      0x40\n        /* \"#utility.yul\":7204:7222   */\n      dup3\n      add\n        /* \"#utility.yul\":7197:7259   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":7290:7292   */\n      0x60\n        /* \"#utility.yul\":7275:7293   */\n      dup3\n      add\n        /* \"#utility.yul\":7268:7301   */\n      mstore\n        /* \"#utility.yul\":7333:7336   */\n      0x80\n        /* \"#utility.yul\":7318:7337   */\n      add\n      swap1\n        /* \"#utility.yul\":7118:7343   */\n      jump\t// out\n        /* \"#utility.yul\":7348:7750   */\n    tag_235:\n        /* \"#utility.yul\":7550:7552   */\n      0x20\n        /* \"#utility.yul\":7532:7553   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7589:7591   */\n      0x26\n        /* \"#utility.yul\":7569:7587   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7562:7592   */\n      mstore\n        /* \"#utility.yul\":7628:7662   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":7623:7625   */\n      0x40\n        /* \"#utility.yul\":7608:7626   */\n      dup3\n      add\n        /* \"#utility.yul\":7601:7663   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":7694:7696   */\n      0x60\n        /* \"#utility.yul\":7679:7697   */\n      dup3\n      add\n        /* \"#utility.yul\":7672:7708   */\n      mstore\n        /* \"#utility.yul\":7740:7743   */\n      0x80\n        /* \"#utility.yul\":7725:7744   */\n      add\n      swap1\n        /* \"#utility.yul\":7522:7750   */\n      jump\t// out\n        /* \"#utility.yul\":7755:8153   */\n    tag_243:\n        /* \"#utility.yul\":7957:7959   */\n      0x20\n        /* \"#utility.yul\":7939:7960   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7996:7998   */\n      0x22\n        /* \"#utility.yul\":7976:7994   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7969:7999   */\n      mstore\n        /* \"#utility.yul\":8035:8069   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":8030:8032   */\n      0x40\n        /* \"#utility.yul\":8015:8033   */\n      dup3\n      add\n        /* \"#utility.yul\":8008:8070   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":8101:8103   */\n      0x60\n        /* \"#utility.yul\":8086:8104   */\n      dup3\n      add\n        /* \"#utility.yul\":8079:8111   */\n      mstore\n        /* \"#utility.yul\":8143:8146   */\n      0x80\n        /* \"#utility.yul\":8128:8147   */\n      add\n      swap1\n        /* \"#utility.yul\":7929:8153   */\n      jump\t// out\n        /* \"#utility.yul\":8158:8509   */\n    tag_274:\n        /* \"#utility.yul\":8360:8362   */\n      0x20\n        /* \"#utility.yul\":8342:8363   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8399:8401   */\n      0x1b\n        /* \"#utility.yul\":8379:8397   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8372:8402   */\n      mstore\n        /* \"#utility.yul\":8438:8467   */\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n        /* \"#utility.yul\":8433:8435   */\n      0x40\n        /* \"#utility.yul\":8418:8436   */\n      dup3\n      add\n        /* \"#utility.yul\":8411:8468   */\n      mstore\n        /* \"#utility.yul\":8500:8502   */\n      0x60\n        /* \"#utility.yul\":8485:8503   */\n      add\n      swap1\n        /* \"#utility.yul\":8332:8509   */\n      jump\t// out\n        /* \"#utility.yul\":8514:8867   */\n    tag_212:\n        /* \"#utility.yul\":8716:8718   */\n      0x20\n        /* \"#utility.yul\":8698:8719   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8755:8757   */\n      0x1d\n        /* \"#utility.yul\":8735:8753   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8728:8758   */\n      mstore\n        /* \"#utility.yul\":8794:8825   */\n      0x45524332305065726d69743a206578706972656420646561646c696e65000000\n        /* \"#utility.yul\":8789:8791   */\n      0x40\n        /* \"#utility.yul\":8774:8792   */\n      dup3\n      add\n        /* \"#utility.yul\":8767:8826   */\n      mstore\n        /* \"#utility.yul\":8858:8860   */\n      0x60\n        /* \"#utility.yul\":8843:8861   */\n      add\n      swap1\n        /* \"#utility.yul\":8688:8867   */\n      jump\t// out\n        /* \"#utility.yul\":8872:9226   */\n    tag_378:\n        /* \"#utility.yul\":9074:9076   */\n      0x20\n        /* \"#utility.yul\":9056:9077   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9113:9115   */\n      0x1e\n        /* \"#utility.yul\":9093:9111   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9086:9116   */\n      mstore\n        /* \"#utility.yul\":9152:9184   */\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n        /* \"#utility.yul\":9147:9149   */\n      0x40\n        /* \"#utility.yul\":9132:9150   */\n      dup3\n      add\n        /* \"#utility.yul\":9125:9185   */\n      mstore\n        /* \"#utility.yul\":9217:9219   */\n      0x60\n        /* \"#utility.yul\":9202:9220   */\n      add\n      swap1\n        /* \"#utility.yul\":9046:9226   */\n      jump\t// out\n        /* \"#utility.yul\":9231:9629   */\n    tag_348:\n        /* \"#utility.yul\":9433:9435   */\n      0x20\n        /* \"#utility.yul\":9415:9436   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9472:9474   */\n      0x22\n        /* \"#utility.yul\":9452:9470   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9445:9475   */\n      mstore\n        /* \"#utility.yul\":9511:9545   */\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n        /* \"#utility.yul\":9506:9508   */\n      0x40\n        /* \"#utility.yul\":9491:9509   */\n      dup3\n      add\n        /* \"#utility.yul\":9484:9546   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":9577:9579   */\n      0x60\n        /* \"#utility.yul\":9562:9580   */\n      dup3\n      add\n        /* \"#utility.yul\":9555:9587   */\n      mstore\n        /* \"#utility.yul\":9619:9622   */\n      0x80\n        /* \"#utility.yul\":9604:9623   */\n      add\n      swap1\n        /* \"#utility.yul\":9405:9629   */\n      jump\t// out\n        /* \"#utility.yul\":9634:10044   */\n    tag_165:\n        /* \"#utility.yul\":9836:9838   */\n      0x20\n        /* \"#utility.yul\":9818:9839   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9875:9877   */\n      0x2e\n        /* \"#utility.yul\":9855:9873   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9848:9878   */\n      mstore\n        /* \"#utility.yul\":9914:9948   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":9909:9911   */\n      0x40\n        /* \"#utility.yul\":9894:9912   */\n      dup3\n      add\n        /* \"#utility.yul\":9887:9949   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":9980:9982   */\n      0x60\n        /* \"#utility.yul\":9965:9983   */\n      dup3\n      add\n        /* \"#utility.yul\":9958:10002   */\n      mstore\n        /* \"#utility.yul\":10034:10037   */\n      0x80\n        /* \"#utility.yul\":10019:10038   */\n      add\n      swap1\n        /* \"#utility.yul\":9808:10044   */\n      jump\t// out\n        /* \"#utility.yul\":10049:10447   */\n    tag_352:\n        /* \"#utility.yul\":10251:10253   */\n      0x20\n        /* \"#utility.yul\":10233:10254   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10290:10292   */\n      0x22\n        /* \"#utility.yul\":10270:10288   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10263:10293   */\n      mstore\n        /* \"#utility.yul\":10329:10363   */\n      0x45434453413a20696e76616c6964207369676e6174757265202776272076616c\n        /* \"#utility.yul\":10324:10326   */\n      0x40\n        /* \"#utility.yul\":10309:10327   */\n      dup3\n      add\n        /* \"#utility.yul\":10302:10364   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":10395:10397   */\n      0x60\n        /* \"#utility.yul\":10380:10398   */\n      dup3\n      add\n        /* \"#utility.yul\":10373:10405   */\n      mstore\n        /* \"#utility.yul\":10437:10440   */\n      0x80\n        /* \"#utility.yul\":10422:10441   */\n      add\n      swap1\n        /* \"#utility.yul\":10223:10447   */\n      jump\t// out\n        /* \"#utility.yul\":10452:10806   */\n    tag_222:\n        /* \"#utility.yul\":10654:10656   */\n      0x20\n        /* \"#utility.yul\":10636:10657   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10693:10695   */\n      0x1e\n        /* \"#utility.yul\":10673:10691   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10666:10696   */\n      mstore\n        /* \"#utility.yul\":10732:10764   */\n      0x45524332305065726d69743a20696e76616c6964207369676e61747572650000\n        /* \"#utility.yul\":10727:10729   */\n      0x40\n        /* \"#utility.yul\":10712:10730   */\n      dup3\n      add\n        /* \"#utility.yul\":10705:10765   */\n      mstore\n        /* \"#utility.yul\":10797:10799   */\n      0x60\n        /* \"#utility.yul\":10782:10800   */\n      add\n      swap1\n        /* \"#utility.yul\":10626:10806   */\n      jump\t// out\n        /* \"#utility.yul\":10811:11167   */\n    tag_147:\n        /* \"#utility.yul\":11013:11015   */\n      0x20\n        /* \"#utility.yul\":10995:11016   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11032:11050   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":11025:11055   */\n      mstore\n        /* \"#utility.yul\":11091:11125   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":11086:11088   */\n      0x40\n        /* \"#utility.yul\":11071:11089   */\n      dup3\n      add\n        /* \"#utility.yul\":11064:11126   */\n      mstore\n        /* \"#utility.yul\":11158:11160   */\n      0x60\n        /* \"#utility.yul\":11143:11161   */\n      add\n      swap1\n        /* \"#utility.yul\":10985:11167   */\n      jump\t// out\n        /* \"#utility.yul\":11172:11569   */\n    tag_286:\n        /* \"#utility.yul\":11374:11376   */\n      0x20\n        /* \"#utility.yul\":11356:11377   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11413:11415   */\n      0x21\n        /* \"#utility.yul\":11393:11411   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":11386:11416   */\n      mstore\n        /* \"#utility.yul\":11452:11486   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":11447:11449   */\n      0x40\n        /* \"#utility.yul\":11432:11450   */\n      dup3\n      add\n        /* \"#utility.yul\":11425:11487   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":11518:11520   */\n      0x60\n        /* \"#utility.yul\":11503:11521   */\n      dup3\n      add\n        /* \"#utility.yul\":11496:11527   */\n      mstore\n        /* \"#utility.yul\":11559:11562   */\n      0x80\n        /* \"#utility.yul\":11544:11563   */\n      add\n      swap1\n        /* \"#utility.yul\":11346:11569   */\n      jump\t// out\n        /* \"#utility.yul\":11574:11975   */\n    tag_248:\n        /* \"#utility.yul\":11776:11778   */\n      0x20\n        /* \"#utility.yul\":11758:11779   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11815:11817   */\n      0x25\n        /* \"#utility.yul\":11795:11813   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":11788:11818   */\n      mstore\n        /* \"#utility.yul\":11854:11888   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":11849:11851   */\n      0x40\n        /* \"#utility.yul\":11834:11852   */\n      dup3\n      add\n        /* \"#utility.yul\":11827:11889   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":11920:11922   */\n      0x60\n        /* \"#utility.yul\":11905:11923   */\n      dup3\n      add\n        /* \"#utility.yul\":11898:11933   */\n      mstore\n        /* \"#utility.yul\":11965:11968   */\n      0x80\n        /* \"#utility.yul\":11950:11969   */\n      add\n      swap1\n        /* \"#utility.yul\":11748:11975   */\n      jump\t// out\n        /* \"#utility.yul\":11980:12380   */\n    tag_240:\n        /* \"#utility.yul\":12182:12184   */\n      0x20\n        /* \"#utility.yul\":12164:12185   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":12221:12223   */\n      0x24\n        /* \"#utility.yul\":12201:12219   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":12194:12224   */\n      mstore\n        /* \"#utility.yul\":12260:12294   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":12255:12257   */\n      0x40\n        /* \"#utility.yul\":12240:12258   */\n      dup3\n      add\n        /* \"#utility.yul\":12233:12295   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":12326:12328   */\n      0x60\n        /* \"#utility.yul\":12311:12329   */\n      dup3\n      add\n        /* \"#utility.yul\":12304:12338   */\n      mstore\n        /* \"#utility.yul\":12370:12373   */\n      0x80\n        /* \"#utility.yul\":12355:12374   */\n      add\n      swap1\n        /* \"#utility.yul\":12154:12380   */\n      jump\t// out\n        /* \"#utility.yul\":12385:12731   */\n    tag_151:\n        /* \"#utility.yul\":12587:12589   */\n      0x20\n        /* \"#utility.yul\":12569:12590   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":12626:12628   */\n      0x16\n        /* \"#utility.yul\":12606:12624   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":12599:12629   */\n      mstore\n      shl(0x54, 0x04c50546f6b656e3a2063616e6e6f74206d696e74203)\n        /* \"#utility.yul\":12660:12662   */\n      0x40\n        /* \"#utility.yul\":12645:12663   */\n      dup3\n      add\n        /* \"#utility.yul\":12638:12690   */\n      mstore\n        /* \"#utility.yul\":12722:12724   */\n      0x60\n        /* \"#utility.yul\":12707:12725   */\n      add\n      swap1\n        /* \"#utility.yul\":12559:12731   */\n      jump\t// out\n        /* \"#utility.yul\":12736:13090   */\n    tag_367:\n        /* \"#utility.yul\":12938:12940   */\n      0x20\n        /* \"#utility.yul\":12920:12941   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":12977:12979   */\n      0x1e\n        /* \"#utility.yul\":12957:12975   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":12950:12980   */\n      mstore\n        /* \"#utility.yul\":13016:13048   */\n      0x4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c660000\n        /* \"#utility.yul\":13011:13013   */\n      0x40\n        /* \"#utility.yul\":12996:13014   */\n      dup3\n      add\n        /* \"#utility.yul\":12989:13049   */\n      mstore\n        /* \"#utility.yul\":13081:13083   */\n      0x60\n        /* \"#utility.yul\":13066:13084   */\n      add\n      swap1\n        /* \"#utility.yul\":12910:13090   */\n      jump\t// out\n        /* \"#utility.yul\":13095:13450   */\n    tag_278:\n        /* \"#utility.yul\":13297:13299   */\n      0x20\n        /* \"#utility.yul\":13279:13300   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":13336:13338   */\n      0x1f\n        /* \"#utility.yul\":13316:13334   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":13309:13339   */\n      mstore\n        /* \"#utility.yul\":13375:13408   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":13370:13372   */\n      0x40\n        /* \"#utility.yul\":13355:13373   */\n      dup3\n      add\n        /* \"#utility.yul\":13348:13409   */\n      mstore\n        /* \"#utility.yul\":13441:13443   */\n      0x60\n        /* \"#utility.yul\":13426:13444   */\n      add\n      swap1\n        /* \"#utility.yul\":13269:13450   */\n      jump\t// out\n        /* \"#utility.yul\":13637:13821   */\n    tag_49:\n        /* \"#utility.yul\":13809:13813   */\n      0xff\n        /* \"#utility.yul\":13797:13814   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":13779:13815   */\n      dup2\n      mstore\n        /* \"#utility.yul\":13767:13769   */\n      0x20\n        /* \"#utility.yul\":13752:13770   */\n      add\n      swap1\n        /* \"#utility.yul\":13734:13821   */\n      jump\t// out\n        /* \"#utility.yul\":13826:13954   */\n    tag_271:\n      0x00\n        /* \"#utility.yul\":13897:13898   */\n      dup3\n        /* \"#utility.yul\":13893:13899   */\n      not\n        /* \"#utility.yul\":13890:13891   */\n      dup3\n        /* \"#utility.yul\":13887:13900   */\n      gt\n        /* \"#utility.yul\":13884:13886   */\n      iszero\n      tag_485\n      jumpi\n        /* \"#utility.yul\":13903:13921   */\n      tag_485\n      tag_486\n      jump\t// in\n    tag_485:\n      pop\n        /* \"#utility.yul\":13939:13948   */\n      add\n      swap1\n        /* \"#utility.yul\":13874:13954   */\n      jump\t// out\n        /* \"#utility.yul\":13959:14084   */\n    tag_261:\n      0x00\n        /* \"#utility.yul\":14027:14028   */\n      dup3\n        /* \"#utility.yul\":14024:14025   */\n      dup3\n        /* \"#utility.yul\":14021:14029   */\n      lt\n        /* \"#utility.yul\":14018:14020   */\n      iszero\n      tag_489\n      jumpi\n        /* \"#utility.yul\":14032:14050   */\n      tag_489\n      tag_486\n      jump\t// in\n    tag_489:\n      pop\n        /* \"#utility.yul\":14069:14078   */\n      sub\n      swap1\n        /* \"#utility.yul\":14008:14084   */\n      jump\t// out\n        /* \"#utility.yul\":14089:14469   */\n    tag_113:\n        /* \"#utility.yul\":14174:14175   */\n      0x02\n        /* \"#utility.yul\":14164:14176   */\n      dup2\n      div\n        /* \"#utility.yul\":14221:14222   */\n      0x01\n        /* \"#utility.yul\":14211:14223   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":14232:14234   */\n      tag_491\n      jumpi\n        /* \"#utility.yul\":14286:14290   */\n      0x7f\n        /* \"#utility.yul\":14278:14284   */\n      dup3\n        /* \"#utility.yul\":14274:14291   */\n      and\n        /* \"#utility.yul\":14264:14291   */\n      swap2\n      pop\n        /* \"#utility.yul\":14232:14234   */\n    tag_491:\n        /* \"#utility.yul\":14339:14341   */\n      0x20\n        /* \"#utility.yul\":14331:14337   */\n      dup3\n        /* \"#utility.yul\":14328:14342   */\n      lt\n        /* \"#utility.yul\":14308:14326   */\n      dup2\n        /* \"#utility.yul\":14305:14343   */\n      eq\n        /* \"#utility.yul\":14302:14304   */\n      iszero\n      tag_492\n      jumpi\n        /* \"#utility.yul\":14385:14395   */\n      0x4e487b71\n        /* \"#utility.yul\":14380:14383   */\n      0xe0\n        /* \"#utility.yul\":14376:14396   */\n      shl\n        /* \"#utility.yul\":14373:14374   */\n      0x00\n        /* \"#utility.yul\":14366:14397   */\n      mstore\n        /* \"#utility.yul\":14420:14424   */\n      0x22\n        /* \"#utility.yul\":14417:14418   */\n      0x04\n        /* \"#utility.yul\":14410:14425   */\n      mstore\n        /* \"#utility.yul\":14448:14452   */\n      0x24\n        /* \"#utility.yul\":14445:14446   */\n      0x00\n        /* \"#utility.yul\":14438:14453   */\n      revert\n        /* \"#utility.yul\":14302:14304   */\n    tag_492:\n      pop\n        /* \"#utility.yul\":14144:14469   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14474:14601   */\n    tag_486:\n        /* \"#utility.yul\":14535:14545   */\n      0x4e487b71\n        /* \"#utility.yul\":14530:14533   */\n      0xe0\n        /* \"#utility.yul\":14526:14546   */\n      shl\n        /* \"#utility.yul\":14523:14524   */\n      0x00\n        /* \"#utility.yul\":14516:14547   */\n      mstore\n        /* \"#utility.yul\":14566:14570   */\n      0x11\n        /* \"#utility.yul\":14563:14564   */\n      0x04\n        /* \"#utility.yul\":14556:14571   */\n      mstore\n        /* \"#utility.yul\":14590:14594   */\n      0x24\n        /* \"#utility.yul\":14587:14588   */\n      0x00\n        /* \"#utility.yul\":14580:14595   */\n      revert\n        /* \"#utility.yul\":14606:14733   */\n    tag_420:\n        /* \"#utility.yul\":14667:14677   */\n      0x4e487b71\n        /* \"#utility.yul\":14662:14665   */\n      0xe0\n        /* \"#utility.yul\":14658:14678   */\n      shl\n        /* \"#utility.yul\":14655:14656   */\n      0x00\n        /* \"#utility.yul\":14648:14679   */\n      mstore\n        /* \"#utility.yul\":14698:14702   */\n      0x41\n        /* \"#utility.yul\":14695:14696   */\n      0x04\n        /* \"#utility.yul\":14688:14703   */\n      mstore\n        /* \"#utility.yul\":14722:14726   */\n      0x24\n        /* \"#utility.yul\":14719:14720   */\n      0x00\n        /* \"#utility.yul\":14712:14727   */\n      revert\n    stop\n    data_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd 45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db 45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa26469706673582212206645b07de9eccc99d460bc716b01c134617a86ce9dd34cddef8fa63c03a68d2164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50611d4b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b857806395d89b411161007c57806395d89b4114610263578063a457c2d71461026b578063a9059cbb1461027e578063d505accf14610291578063dd62ed3e146102a4578063f2fde38b146102b757610137565b806370a082311461020d578063715018a61461022057806379cc6790146102285780637ecebe001461023b5780638da5cb5b1461024e57610137565b80633644e515116100ff5780633644e515146101b757806339509351146101bf57806340c10f19146101d257806342966c68146101e75780634cd88b76146101fa57610137565b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017a57806323b872dd1461018f578063313ce567146101a2575b600080fd5b6101446102ca565b6040516101519190611718565b60405180910390f35b61016d6101683660046115b5565b61035c565b6040516101519190611686565b610182610379565b6040516101519190611691565b61016d61019d366004611509565b61037f565b6101aa610406565b6040516101519190611bb8565b61018261040f565b61016d6101cd3660046115b5565b61041e565b6101e56101e03660046115b5565b61046c565b005b6101e56101f536600461163f565b6104df565b61016d6102083660046115de565b6104f3565b61018261021b3660046114bd565b6105a2565b6101e56105c1565b6101e56102363660046115b5565b61064a565b6101826102493660046114bd565b61069f565b6102566106c6565b6040516101519190611672565b6101446106d5565b61016d6102793660046115b5565b6106e4565b61016d61028c3660046115b5565b61074c565b6101e561029f366004611544565b610760565b6101826102b23660046114d7565b610869565b6101e56102c53660046114bd565b610894565b6060603680546102d990611bf5565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611bf5565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b5050505050905090565b6000610370610369610955565b8484610959565b50600192915050565b60355490565b600061038c848484610a0d565b6103fc84610398610955565b6103f785604051806060016040528060288152602001611ca5602891396001600160a01b038a166000908152603460205260408120906103d6610955565b6001600160a01b031681526020810191909152604001600020549190610b22565b610959565b5060019392505050565b60385460ff1690565b6000610419610b59565b905090565b600061037061042b610955565b846103f7856034600061043c610955565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610b94565b610474610955565b6001600160a01b03166104856106c6565b6001600160a01b0316146104b45760405162461bcd60e51b81526004016104ab90611a1b565b60405180910390fd5b806104d15760405162461bcd60e51b81526004016104ab90611b1a565b6104db8282610bca565b5050565b6104f06104ea610955565b82610c8a565b50565b60008054610100900460ff168061050d575061050d610d60565b8061051b575060005460ff16155b6105375760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610562576000805460ff1961ff0019909116610100171660011790555b61056a610d71565b6105748484610df3565b61057d84610eac565b610585610f63565b60019150801561059b576000805461ff00191690555b5092915050565b6001600160a01b0381166000908152603360205260409020545b919050565b6105c9610955565b6001600160a01b03166105da6106c6565b6001600160a01b0316146106005760405162461bcd60e51b81526004016104ab90611a1b565b60fe546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360fe80546001600160a01b0319169055565b600061067c82604051806060016040528060248152602001611ccd60249139610675866102b2610955565b9190610b22565b90506106908361068a610955565b83610959565b61069a8383610c8a565b505050565b6001600160a01b03811660009081526099602052604081206106c09061103d565b92915050565b60fe546001600160a01b031690565b6060603780546102d990611bf5565b60006103706106f1610955565b846103f785604051806060016040528060258152602001611cf1602591396034600061071b610955565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610b22565b6000610370610759610955565b8484610a0d565b834211156107805760405162461bcd60e51b81526004016104ab906118a4565b6000609a548888886107b5609960008e6001600160a01b03166001600160a01b0316815260200190815260200160002061103d565b896040516020016107cb9695949392919061169a565b60405160208183030381529060405280519060200120905060006107ee82611041565b905060006107fe8287878761107a565b9050896001600160a01b0316816001600160a01b0316146108315760405162461bcd60e51b81526004016104ab906119e4565b6001600160a01b038a16600090815260996020526040902061085290611170565b61085d8a8a8a610959565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61089c610955565b6001600160a01b03166108ad6106c6565b6001600160a01b0316146108d35760405162461bcd60e51b81526004016104ab90611a1b565b6001600160a01b0381166108f95760405162461bcd60e51b81526004016104ab906117e5565b60fe546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360fe80546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b03831661097f5760405162461bcd60e51b81526004016104ab90611ad6565b6001600160a01b0382166109a55760405162461bcd60e51b81526004016104ab9061182b565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a00908590611691565b60405180910390a3505050565b6001600160a01b038316610a335760405162461bcd60e51b81526004016104ab90611a91565b6001600160a01b038216610a595760405162461bcd60e51b81526004016104ab906117a2565b610a6483838361118d565b610aa181604051806060016040528060268152602001611c7f602691396001600160a01b0386166000908152603360205260409020549190610b22565b6001600160a01b038085166000908152603360205260408082209390935590841681522054610ad09082610b94565b6001600160a01b0380841660008181526033602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a00908590611691565b60008184841115610b465760405162461bcd60e51b81526004016104ab9190611718565b50610b518385611bde565b949350505050565b60006104197f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610b876111c1565b610b8f6111c7565b6111cd565b600080610ba18385611bc6565b905083811015610bc35760405162461bcd60e51b81526004016104ab9061186d565b9392505050565b6001600160a01b038216610bf05760405162461bcd60e51b81526004016104ab90611b81565b610bfc6000838361118d565b603554610c099082610b94565b6035556001600160a01b038216600090815260336020526040902054610c2f9082610b94565b6001600160a01b0383166000818152603360205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c7e908590611691565b60405180910390a35050565b6001600160a01b038216610cb05760405162461bcd60e51b81526004016104ab90611a50565b610cbc8260008361118d565b610cf981604051806060016040528060228152602001611c5d602291396001600160a01b0385166000908152603360205260409020549190610b22565b6001600160a01b038316600090815260336020526040902055603554610d1f908261120e565b6035556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c7e908590611691565b6000610d6b3061123a565b15905090565b600054610100900460ff1680610d8a5750610d8a610d60565b80610d98575060005460ff16155b610db45760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610ddf576000805460ff1961ff0019909116610100171660011790555b80156104f0576000805461ff001916905550565b600054610100900460ff1680610e0c5750610e0c610d60565b80610e1a575060005460ff16155b610e365760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610e61576000805460ff1961ff0019909116610100171660011790555b8251610e7490603690602086019061138c565b508151610e8890603790602085019061138c565b506038805460ff19166012179055801561069a576000805461ff0019169055505050565b600054610100900460ff1680610ec55750610ec5610d60565b80610ed3575060005460ff16155b610eef5760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610f1a576000805460ff1961ff0019909116610100171660011790555b610f22610d71565b610f4582604051806040016040528060018152602001603160f81b815250611240565b610f4e826112e1565b80156104db576000805461ff00191690555050565b600054610100900460ff1680610f7c5750610f7c610d60565b80610f8a575060005460ff16155b610fa65760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610fd1576000805460ff1961ff0019909116610100171660011790555b6000610fdb610955565b60fe80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156104f0576000805461ff001916905550565b5490565b600061104b610b59565b8260405160200161105d929190611657565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156110bc5760405162461bcd60e51b81526004016104ab90611912565b8360ff16601b14806110d157508360ff16601c145b6110ed5760405162461bcd60e51b81526004016104ab906119a2565b60006001868686866040516000815260200160405260405161111294939291906116fa565b6020604051602081039080840390855afa158015611134573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111675760405162461bcd60e51b81526004016104ab9061176b565b95945050505050565b60018160000160008282546111859190611bc6565b909155505050565b61119883838361069a565b6001600160a01b03821630141561069a5760405162461bcd60e51b81526004016104ab90611b4a565b60655490565b60665490565b60008383836111da611388565b306040516020016111ef9594939291906116ce565b6040516020818303038152906040528051906020012090509392505050565b6000828211156112305760405162461bcd60e51b81526004016104ab906118db565b610bc38284611bde565b3b151590565b600054610100900460ff16806112595750611259610d60565b80611267575060005460ff16155b6112835760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff161580156112ae576000805460ff1961ff0019909116610100171660011790555b8251602080850191909120835191840191909120606591909155606655801561069a576000805461ff0019169055505050565b600054610100900460ff16806112fa57506112fa610d60565b80611308575060005460ff16155b6113245760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff1615801561134f576000805460ff1961ff0019909116610100171660011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a5580156104db576000805461ff00191690555050565b4690565b82805461139890611bf5565b90600052602060002090601f0160209004810192826113ba5760008555611400565b82601f106113d357805160ff1916838001178555611400565b82800160010185558215611400579182015b828111156114005782518255916020019190600101906113e5565b5061140c929150611410565b5090565b5b8082111561140c5760008155600101611411565b80356001600160a01b03811681146105bc57600080fd5b600082601f83011261144c578081fd5b813567ffffffffffffffff8082111561146757611467611c46565b604051601f8301601f19168101602001828111828210171561148b5761148b611c46565b6040528281528483016020018610156114a2578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156114ce578081fd5b610bc382611425565b600080604083850312156114e9578081fd5b6114f283611425565b915061150060208401611425565b90509250929050565b60008060006060848603121561151d578081fd5b61152684611425565b925061153460208501611425565b9150604084013590509250925092565b600080600080600080600060e0888a03121561155e578283fd5b61156788611425565b965061157560208901611425565b95506040880135945060608801359350608088013560ff81168114611598578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156115c7578182fd5b6115d083611425565b946020939093013593505050565b600080604083850312156115f0578182fd5b823567ffffffffffffffff80821115611607578384fd5b6116138683870161143c565b93506020850135915080821115611628578283fd5b506116358582860161143c565b9150509250929050565b600060208284031215611650578081fd5b5035919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561174457858101830151858201604001528201611728565b818111156117555783604083870101525b50601f01601f1916929092016040019392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f45524332305065726d69743a206578706972656420646561646c696e65000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252601e908201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526016908201527504c50546f6b656e3a2063616e6e6f74206d696e7420360541b604082015260600190565b6020808252601e908201527f4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c660000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b60008219821115611bd957611bd9611c30565b500190565b600082821015611bf057611bf0611c30565b500390565b600281046001821680611c0957607f821691505b60208210811415611c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206645b07de9eccc99d460bc716b01c134617a86ce9dd34cddef8fa63c03a68d2164736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D4B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B7 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x24E JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x1FA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x2CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1686 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x379 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x1509 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x406 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x40F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1CD CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x41E JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x46C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E5 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x16D PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x15DE JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x21B CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x182 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x69F JUMP JUMPDEST PUSH2 0x256 PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x6D5 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x6E4 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1544 JUMP JUMPDEST PUSH2 0x760 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x14D7 JUMP JUMPDEST PUSH2 0x869 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x2C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x894 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x305 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x352 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x352 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x335 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x369 PUSH2 0x955 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x959 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38C DUP5 DUP5 DUP5 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x3FC DUP5 PUSH2 0x398 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x3F7 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CA5 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x3D6 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x38 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x419 PUSH2 0xB59 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x42B PUSH2 0x955 JUMP JUMPDEST DUP5 PUSH2 0x3F7 DUP6 PUSH1 0x34 PUSH1 0x0 PUSH2 0x43C PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0xB94 JUMP JUMPDEST PUSH2 0x474 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x485 PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH2 0x4DB DUP3 DUP3 PUSH2 0xBCA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4F0 PUSH2 0x4EA PUSH2 0x955 JUMP JUMPDEST DUP3 PUSH2 0xC8A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x50D JUMPI POP PUSH2 0x50D PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x56A PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x574 DUP5 DUP5 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x57D DUP5 PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x585 PUSH2 0xF63 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x59B JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5DA PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x600 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CCD PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x675 DUP7 PUSH2 0x2B2 PUSH2 0x955 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST SWAP1 POP PUSH2 0x690 DUP4 PUSH2 0x68A PUSH2 0x955 JUMP JUMPDEST DUP4 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x69A DUP4 DUP4 PUSH2 0xC8A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x6C0 SWAP1 PUSH2 0x103D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x6F1 PUSH2 0x955 JUMP JUMPDEST DUP5 PUSH2 0x3F7 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CF1 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x34 PUSH1 0x0 PUSH2 0x71B PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x759 PUSH2 0x955 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xA0D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x780 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD DUP9 DUP9 DUP9 PUSH2 0x7B5 PUSH1 0x99 PUSH1 0x0 DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x103D JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7CB SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x7EE DUP3 PUSH2 0x1041 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7FE DUP3 DUP8 DUP8 DUP8 PUSH2 0x107A JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x831 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x19E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x852 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x85D DUP11 DUP11 DUP11 PUSH2 0x959 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x89C PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8AD PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x97F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1AD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x182B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0xA00 SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0xA64 DUP4 DUP4 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0xAA1 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xAD0 SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xA00 SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xB46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x1718 JUMP JUMPDEST POP PUSH2 0xB51 DUP4 DUP6 PUSH2 0x1BDE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x419 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xB87 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xB8F PUSH2 0x11C7 JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBA1 DUP4 DUP6 PUSH2 0x1BC6 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x186D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B81 JUMP JUMPDEST PUSH2 0xBFC PUSH1 0x0 DUP4 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0xC09 SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x35 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC2F SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xC7E SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0xCBC DUP3 PUSH1 0x0 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0xCF9 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C5D PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x35 SLOAD PUSH2 0xD1F SWAP1 DUP3 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x35 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xC7E SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B ADDRESS PUSH2 0x123A JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xD8A JUMPI POP PUSH2 0xD8A PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xD98 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xDB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xE0C JUMPI POP PUSH2 0xE0C PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xE1A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xE36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH2 0xE74 SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x138C JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0xE88 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x138C JUMP JUMPDEST POP PUSH1 0x38 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xEC5 JUMPI POP PUSH2 0xEC5 PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xED3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xEEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xF1A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xF22 PUSH2 0xD71 JUMP JUMPDEST PUSH2 0xF45 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1240 JUMP JUMPDEST PUSH2 0xF4E DUP3 PUSH2 0x12E1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xF7C JUMPI POP PUSH2 0xF7C PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xF8A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xFA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xFD1 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0xFDB PUSH2 0x955 JUMP JUMPDEST PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104B PUSH2 0xB59 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x105D SWAP3 SWAP2 SWAP1 PUSH2 0x1657 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x10BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1912 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x10D1 JUMPI POP DUP4 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x10ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1112 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1134 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x176B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1185 SWAP2 SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x1198 DUP4 DUP4 DUP4 PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO PUSH2 0x69A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH1 0x65 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH2 0x11DA PUSH2 0x1388 JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11EF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0xBC3 DUP3 DUP5 PUSH2 0x1BDE JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1259 JUMPI POP PUSH2 0x1259 PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x1267 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x65 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x66 SSTORE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x12FA JUMPI POP PUSH2 0x12FA PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x1308 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1324 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x134F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 PUSH1 0x9A SSTORE DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1398 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x13BA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1400 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x13D3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1400 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1400 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1400 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x13E5 JUMP JUMPDEST POP PUSH2 0x140C SWAP3 SWAP2 POP PUSH2 0x1410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x140C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1411 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x144C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1467 JUMPI PUSH2 0x1467 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP5 DUP4 ADD PUSH1 0x20 ADD DUP7 LT ISZERO PUSH2 0x14A2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xBC3 DUP3 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x14F2 DUP4 PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP PUSH2 0x1500 PUSH1 0x20 DUP5 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x151D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1526 DUP5 PUSH2 0x1425 JUMP JUMPDEST SWAP3 POP PUSH2 0x1534 PUSH1 0x20 DUP6 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x155E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1567 DUP9 PUSH2 0x1425 JUMP JUMPDEST SWAP7 POP PUSH2 0x1575 PUSH1 0x20 DUP10 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1598 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15C7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15D0 DUP4 PUSH2 0x1425 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15F0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1607 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1613 DUP7 DUP4 DUP8 ADD PUSH2 0x143C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1628 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1635 DUP6 DUP3 DUP7 ADD PUSH2 0x143C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1650 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1744 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1728 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1755 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4C50546F6B656E3A2063616E6E6F74206D696E74203 PUSH1 0x54 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2063616E6E6F742073656E6420746F20697473656C660000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1BD9 JUMPI PUSH2 0x1BD9 PUSH2 0x1C30 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1BF0 JUMPI PUSH2 0x1BF0 PUSH2 0x1C30 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1C09 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1C2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E74206578636565647320616C6C6F77616E63654552 NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212206645 0xB0 PUSH30 0xE9ECCC99D460BC716B01C134617A86CE9DD34CDDEF8FA63C03A68D216473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "570:1659:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14735:16",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:16",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:16"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:16"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:16",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:16",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:16"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:16",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:16"
															},
															"nodeType": "YulIf",
															"src": "113:2:16"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:16",
														"type": ""
													}
												],
												"src": "14:175:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "249:658:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "298:24:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "307:5:16"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "314:5:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "300:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "300:20:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "300:20:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "277:6:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "285:4:16",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "273:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "273:17:16"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "292:3:16"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "269:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "269:27:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "262:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "262:35:16"
															},
															"nodeType": "YulIf",
															"src": "259:2:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "331:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "354:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "341:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "341:20:16"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "335:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "370:28:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "380:18:16",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "374:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "421:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "423:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "423:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "423:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "413:2:16"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "417:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "410:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "410:10:16"
															},
															"nodeType": "YulIf",
															"src": "407:2:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "452:23:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "472:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "466:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "466:9:16"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "456:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "484:69:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "510:6:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "526:2:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "530:4:16",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "522:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "522:13:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "541:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "537:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "537:7:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "518:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "518:27:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:40:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "548:4:16",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:51:16"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "488:10:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "612:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "614:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "614:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "614:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "571:10:16"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "583:2:16"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "568:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "568:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "591:10:16"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "603:6:16"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "588:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "588:22:16"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "565:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "565:46:16"
															},
															"nodeType": "YulIf",
															"src": "562:2:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "650:2:16",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "654:10:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "643:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "643:22:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "643:22:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "681:6:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "689:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "674:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "674:18:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "674:18:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "740:24:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "749:5:16"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "756:5:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "742:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "742:20:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "742:20:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "715:6:16"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "723:2:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "711:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "711:15:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "728:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "707:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "707:26:16"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "735:3:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "704:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "704:35:16"
															},
															"nodeType": "YulIf",
															"src": "701:2:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "790:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "798:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "786:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "786:17:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "809:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "817:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "805:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "805:17:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "824:2:16"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "773:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:54:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:54:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "851:6:16"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "859:2:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "847:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "847:15:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "864:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "843:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "843:26:16"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "871:5:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "836:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:41:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "836:41:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "886:15:16",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "895:6:16"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "886:5:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "223:6:16",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "231:3:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "239:5:16",
														"type": ""
													}
												],
												"src": "194:713:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "982:128:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1028:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1037:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1045:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1030:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1030:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1030:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1003:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1012:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "999:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "999:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1024:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "995:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "995:32:16"
															},
															"nodeType": "YulIf",
															"src": "992:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1063:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1094:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1073:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1073:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1063:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "948:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "959:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "971:6:16",
														"type": ""
													}
												],
												"src": "912:198:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:187:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1248:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1257:6:16"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1265:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1250:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1250:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1250:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1223:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1232:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1219:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1219:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1244:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1215:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1215:32:16"
															},
															"nodeType": "YulIf",
															"src": "1212:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1283:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1314:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1293:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1283:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1333:50:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1368:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1379:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1364:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1364:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1343:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1343:40:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1333:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1160:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1171:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1183:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1191:6:16",
														"type": ""
													}
												],
												"src": "1115:274:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1498:238:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1544:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1553:6:16"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1561:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1546:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1546:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1546:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1519:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1528:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1515:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1515:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1540:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1511:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1511:32:16"
															},
															"nodeType": "YulIf",
															"src": "1508:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1579:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1610:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1589:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1589:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1579:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1629:50:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1664:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1675:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1660:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1660:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1639:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1639:40:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1629:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1688:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1715:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1726:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1711:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1711:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1698:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1698:32:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1688:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1448:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1459:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1471:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1479:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1487:6:16",
														"type": ""
													}
												],
												"src": "1394:342:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1911:547:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1958:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1967:6:16"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1975:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1960:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1960:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1960:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1932:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1941:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1928:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1928:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1953:3:16",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1924:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1924:33:16"
															},
															"nodeType": "YulIf",
															"src": "1921:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1993:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2024:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2003:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2003:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1993:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2043:50:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2078:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2089:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2074:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2074:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2053:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2053:40:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2043:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2102:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2129:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2140:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2125:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2125:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2112:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2112:32:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2102:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2153:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2180:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2191:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2176:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2176:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2163:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2163:32:16"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2153:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2204:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2234:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2245:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2230:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2230:19:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2217:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2217:33:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2208:5:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2298:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2307:6:16"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2315:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2300:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2300:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2300:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2272:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2283:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2290:4:16",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2279:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2279:16:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2269:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2269:27:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2262:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2262:35:16"
															},
															"nodeType": "YulIf",
															"src": "2259:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2333:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2343:5:16"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2357:43:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2384:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2395:3:16",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2380:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2380:19:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2367:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2367:33:16"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "2357:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2409:43:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2436:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2447:3:16",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2432:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2432:19:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2419:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2419:33:16"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "2409:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1829:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1840:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1852:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1860:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1868:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1876:6:16",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1884:6:16",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "1892:6:16",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "1900:6:16",
														"type": ""
													}
												],
												"src": "1741:717:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2550:179:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2596:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2605:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2613:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2598:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2598:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2598:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2571:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2580:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2567:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2567:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2592:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2563:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2563:32:16"
															},
															"nodeType": "YulIf",
															"src": "2560:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2631:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2662:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2641:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2641:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2631:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2681:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2708:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2719:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2704:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2704:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2691:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2691:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2681:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2508:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2519:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2531:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2539:6:16",
														"type": ""
													}
												],
												"src": "2463:266:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2841:470:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2887:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2896:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2904:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2889:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2889:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2889:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2862:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2871:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2858:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2858:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2883:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2854:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2854:32:16"
															},
															"nodeType": "YulIf",
															"src": "2851:2:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2922:37:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2949:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2936:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2936:23:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2926:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2968:28:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2978:18:16",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2972:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3023:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3032:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3040:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3025:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3025:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3025:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3011:6:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3019:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3008:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3008:14:16"
															},
															"nodeType": "YulIf",
															"src": "3005:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3058:62:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3092:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3103:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3088:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3088:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3112:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string",
																	"nodeType": "YulIdentifier",
																	"src": "3068:19:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3068:52:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3058:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3129:48:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3162:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3173:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3158:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3158:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3145:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3145:32:16"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "3133:8:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3206:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "3215:6:16"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "3223:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3208:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3208:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3208:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "3192:8:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3202:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3189:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3189:16:16"
															},
															"nodeType": "YulIf",
															"src": "3186:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3241:64:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3275:9:16"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "3286:8:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3271:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3271:24:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3297:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string",
																	"nodeType": "YulIdentifier",
																	"src": "3251:19:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3251:54:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3241:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2799:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2810:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2822:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2830:6:16",
														"type": ""
													}
												],
												"src": "2734:577:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3386:120:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3432:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3441:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3449:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3434:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3434:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3434:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3407:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3416:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3403:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3403:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3428:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3399:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3399:32:16"
															},
															"nodeType": "YulIf",
															"src": "3396:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3467:33:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3490:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3477:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3477:23:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3467:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3352:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3363:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3375:6:16",
														"type": ""
													}
												],
												"src": "3316:190:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3759:144:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3776:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3785:3:16",
																				"type": "",
																				"value": "240"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3790:4:16",
																				"type": "",
																				"value": "6401"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3781:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3781:14:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3769:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3769:27:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3769:27:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3816:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3821:1:16",
																				"type": "",
																				"value": "2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3812:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3812:11:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3825:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3805:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3805:27:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3805:27:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3852:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3857:2:16",
																				"type": "",
																				"value": "34"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3848:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3848:12:16"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3862:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3841:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:28:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3841:28:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3878:19:16",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3889:3:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3894:2:16",
																		"type": "",
																		"value": "66"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3885:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3885:12:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3878:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3727:3:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3732:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3740:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3751:3:16",
														"type": ""
													}
												],
												"src": "3511:392:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4009:102:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4019:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4031:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4042:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4027:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4027:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4019:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4061:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4076:6:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4092:3:16",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4097:1:16",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4088:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4088:11:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4101:1:16",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4084:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4084:19:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4072:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4072:32:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4054:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4054:51:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4054:51:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3978:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3989:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4000:4:16",
														"type": ""
													}
												],
												"src": "3908:203:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4211:92:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4221:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4233:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4244:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4229:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4229:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4221:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4263:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4288:6:16"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4281:6:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4281:14:16"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4274:6:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4274:22:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4256:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4256:41:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4256:41:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4180:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4191:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4202:4:16",
														"type": ""
													}
												],
												"src": "4116:187:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4409:76:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4419:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4431:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4442:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4427:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4427:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4419:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4461:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4472:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4454:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4454:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4454:25:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4378:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4389:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4400:4:16",
														"type": ""
													}
												],
												"src": "4308:177:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4731:350:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4741:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4753:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4764:3:16",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4749:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4749:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4741:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4784:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4795:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4777:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4777:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4777:25:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4811:29:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4829:3:16",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4834:1:16",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4825:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4825:11:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4838:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4821:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4821:19:16"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4815:2:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4860:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4871:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4856:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4856:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4880:6:16"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4888:2:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4876:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4876:15:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4849:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4849:43:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4849:43:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4912:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4923:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4908:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4908:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "4932:6:16"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4940:2:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4928:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4928:15:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4901:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4901:43:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4901:43:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4964:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4975:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4960:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4960:18:16"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "4980:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4953:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4953:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4953:34:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5007:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5018:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5003:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5003:19:16"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "5024:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4996:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4996:35:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4996:35:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5051:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5062:3:16",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5047:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5047:19:16"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "5068:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5040:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5040:35:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5040:35:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4660:9:16",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "4671:6:16",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "4679:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4687:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4695:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4703:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4711:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4722:4:16",
														"type": ""
													}
												],
												"src": "4490:591:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5299:276:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5309:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5321:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5332:3:16",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5317:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5317:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5309:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5352:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5363:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5345:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5345:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5345:25:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5390:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5401:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5386:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5386:18:16"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5406:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5379:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5379:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5379:34:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5433:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5444:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5429:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5429:18:16"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5449:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5422:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5422:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5422:34:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5476:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5487:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5472:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5472:18:16"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "5492:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5465:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5465:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5465:34:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5519:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5530:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5515:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5515:19:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "5540:6:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5556:3:16",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5561:1:16",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5552:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5552:11:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5565:1:16",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5548:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5548:19:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5536:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5536:32:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5508:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5508:61:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5508:61:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5236:9:16",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5247:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5255:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5263:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5271:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5279:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5290:4:16",
														"type": ""
													}
												],
												"src": "5086:489:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5761:217:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5814:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5825:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5807:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5807:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5807:25:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5852:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5863:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5848:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5848:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5872:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5880:4:16",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5868:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5868:17:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5841:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5841:45:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5841:45:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5906:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5917:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5902:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5902:18:16"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5922:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5895:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5895:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5895:34:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5949:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5960:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5945:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5945:18:16"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "5965:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5938:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5938:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5938:34:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5706:9:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5717:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5725:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5733:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5741:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5752:4:16",
														"type": ""
													}
												],
												"src": "5580:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6104:482:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6114:12:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6124:2:16",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6118:2:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6142:9:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6153:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6135:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6135:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6135:21:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6165:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6185:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6179:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6179:13:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6169:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6212:9:16"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6223:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6208:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6208:18:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6228:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6201:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6201:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6201:34:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6244:13:16",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "6253:4:16"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "6248:1:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6316:90:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "6345:9:16"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6356:1:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6341:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6341:17:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6360:2:16",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6337:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6337:26:16"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "6379:6:16"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "6387:1:16"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "6375:3:16"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6375:14:16"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "6391:2:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6371:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6371:23:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "6365:5:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6365:30:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6330:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6330:66:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6330:66:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6277:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6280:6:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6274:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6274:13:16"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6288:19:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6290:15:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "6299:1:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6302:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6295:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6295:10:16"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6290:1:16"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6270:3:16",
																"statements": []
															},
															"src": "6266:140:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6440:69:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "6469:9:16"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "6480:6:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6465:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6465:22:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6489:2:16",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6461:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6461:31:16"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "6494:4:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6454:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6454:45:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6454:45:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6421:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6424:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6418:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6418:13:16"
															},
															"nodeType": "YulIf",
															"src": "6415:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6518:62:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6534:9:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "6553:6:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6561:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6549:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6549:15:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6570:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "6566:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6566:7:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "6545:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6545:29:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6530:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6530:45:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6577:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6526:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6526:54:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6518:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6073:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6084:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6095:4:16",
														"type": ""
													}
												],
												"src": "5983:603:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6765:174:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6782:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6793:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6775:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6775:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6775:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6816:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6827:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6812:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6812:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6832:2:16",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6805:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6805:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6805:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6855:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6866:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6851:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6851:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6871:26:16",
																		"type": "",
																		"value": "ECDSA: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6844:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6844:54:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6844:54:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6907:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6919:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6930:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6915:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6915:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6907:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6742:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6756:4:16",
														"type": ""
													}
												],
												"src": "6591:348:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7118:225:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7135:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7146:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7128:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7128:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7128:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7169:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7180:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7165:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7165:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7185:2:16",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7158:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7158:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7158:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7208:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7219:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7204:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7204:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7224:34:16",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7197:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7197:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7197:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7279:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7290:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7275:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7275:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7295:5:16",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7268:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7268:33:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7268:33:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7310:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7322:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7333:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7318:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7318:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7310:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7095:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7109:4:16",
														"type": ""
													}
												],
												"src": "6944:399:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7522:228:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7539:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7550:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7532:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7532:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7532:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7573:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7584:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7569:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7569:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7589:2:16",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7562:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7562:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7562:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7612:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7623:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7608:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7608:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7628:34:16",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7601:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7601:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7601:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7683:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7694:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7679:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7679:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7699:8:16",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7672:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7672:36:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7672:36:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7717:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7729:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7740:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7725:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7725:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7717:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7499:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7513:4:16",
														"type": ""
													}
												],
												"src": "7348:402:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7929:224:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7946:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7957:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7939:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7939:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7939:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7980:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7991:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7976:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7976:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7996:2:16",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7969:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7969:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7969:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8019:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8030:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8015:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8015:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8035:34:16",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8008:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8008:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8008:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8090:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8101:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8086:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8086:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8106:4:16",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8079:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8079:32:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8079:32:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8120:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8132:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8143:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8128:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8128:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8120:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7906:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7920:4:16",
														"type": ""
													}
												],
												"src": "7755:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8332:177:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8349:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8360:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8342:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8342:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8342:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8383:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8394:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8379:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8379:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8399:2:16",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8372:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8372:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8372:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8422:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8433:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8418:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8418:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8438:29:16",
																		"type": "",
																		"value": "SafeMath: addition overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8411:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8411:57:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8411:57:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8477:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8489:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8500:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8485:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8485:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8477:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8309:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8323:4:16",
														"type": ""
													}
												],
												"src": "8158:351:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8688:179:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8705:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8716:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8698:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8698:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8698:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8739:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8750:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8735:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8735:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8755:2:16",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8728:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8728:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8728:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8778:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8789:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8774:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8774:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8794:31:16",
																		"type": "",
																		"value": "ERC20Permit: expired deadline"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8767:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8767:59:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8767:59:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8835:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8847:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8858:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8843:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8843:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8835:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8665:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8679:4:16",
														"type": ""
													}
												],
												"src": "8514:353:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9046:180:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9063:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9074:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9056:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9056:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9056:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9097:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9108:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9093:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9093:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9113:2:16",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9086:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9086:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9086:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9136:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9147:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9132:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9132:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9152:32:16",
																		"type": "",
																		"value": "SafeMath: subtraction overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9125:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9125:60:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9125:60:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9194:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9206:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9217:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9202:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9202:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9194:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9023:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9037:4:16",
														"type": ""
													}
												],
												"src": "8872:354:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9405:224:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9422:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9433:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9415:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9415:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9415:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9456:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9467:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9452:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9452:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9472:2:16",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9445:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9445:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9445:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9495:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9506:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9491:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9491:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9511:34:16",
																		"type": "",
																		"value": "ECDSA: invalid signature 's' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9484:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9484:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9484:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9566:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9577:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9562:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9562:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9582:4:16",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9555:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9555:32:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9555:32:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9596:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9608:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9619:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9604:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9604:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9596:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9382:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9396:4:16",
														"type": ""
													}
												],
												"src": "9231:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9808:236:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9825:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9836:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9818:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9818:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9818:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9859:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9870:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9855:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9855:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9875:2:16",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9848:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9848:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9848:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9898:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9909:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9894:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9894:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9914:34:16",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9887:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9887:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9887:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9969:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9980:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9965:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9965:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9985:16:16",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9958:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9958:44:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9958:44:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10011:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10023:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10034:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10019:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10019:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10011:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9785:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9799:4:16",
														"type": ""
													}
												],
												"src": "9634:410:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10223:224:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10240:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10251:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10233:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10233:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10233:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10274:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10285:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10270:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10270:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10290:2:16",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10263:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10263:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10263:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10313:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10324:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10309:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10309:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10329:34:16",
																		"type": "",
																		"value": "ECDSA: invalid signature 'v' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10302:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10302:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10302:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10384:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10395:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10380:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10380:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10400:4:16",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10373:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10373:32:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10373:32:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10414:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10426:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10437:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10422:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10422:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10414:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10200:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10214:4:16",
														"type": ""
													}
												],
												"src": "10049:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10626:180:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10643:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10654:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10636:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10636:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10636:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10677:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10688:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10673:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10673:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10693:2:16",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10666:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10666:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10666:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10716:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10727:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10712:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10712:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10732:32:16",
																		"type": "",
																		"value": "ERC20Permit: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10705:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10705:60:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10705:60:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10774:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10786:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10797:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10782:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10782:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10774:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10603:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10617:4:16",
														"type": ""
													}
												],
												"src": "10452:354:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10985:182:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11002:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11013:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10995:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10995:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10995:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11036:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11047:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11032:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11032:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11052:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11025:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11025:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11025:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11075:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11086:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11071:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11071:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11091:34:16",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11064:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11064:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11064:62:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11135:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11147:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11158:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11143:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11143:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11135:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10962:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10976:4:16",
														"type": ""
													}
												],
												"src": "10811:356:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11346:223:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11363:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11374:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11356:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11356:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11356:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11397:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11408:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11393:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11393:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11413:2:16",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11386:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11386:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11386:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11436:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11447:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11432:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11432:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11452:34:16",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11425:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11425:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11425:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11507:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11518:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11503:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11503:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11523:3:16",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11496:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11496:31:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11496:31:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11536:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11548:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11559:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11544:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11544:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11536:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11323:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11337:4:16",
														"type": ""
													}
												],
												"src": "11172:397:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11748:227:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11765:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11776:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11758:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11758:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11758:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11799:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11810:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11795:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11795:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11815:2:16",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11788:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11788:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11788:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11838:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11849:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11834:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11834:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11854:34:16",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11827:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11827:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11827:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11909:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11920:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11905:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11905:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11925:7:16",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11898:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11898:35:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11898:35:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11942:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11954:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11965:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11950:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11950:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11942:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11725:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11739:4:16",
														"type": ""
													}
												],
												"src": "11574:401:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12154:226:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12171:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12182:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12164:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12164:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12164:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12205:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12216:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12201:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12201:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12221:2:16",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12194:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12194:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12194:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12244:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12255:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12240:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12240:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12260:34:16",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12233:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12233:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12233:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12315:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12326:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12311:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12311:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12331:6:16",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12304:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12304:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12304:34:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12347:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12359:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12370:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12355:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12355:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12347:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12131:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12145:4:16",
														"type": ""
													}
												],
												"src": "11980:400:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12559:172:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12576:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12587:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12569:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12569:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12569:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12610:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12621:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12606:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12606:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12626:2:16",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12599:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12599:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12599:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12649:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12660:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12645:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12645:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12665:24:16",
																		"type": "",
																		"value": "LPToken: cannot mint 0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12638:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12638:52:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12638:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12699:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12711:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12722:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12707:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12707:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12699:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12536:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12550:4:16",
														"type": ""
													}
												],
												"src": "12385:346:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12910:180:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12927:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12938:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12920:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12920:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12920:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12961:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12972:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12957:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12957:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12977:2:16",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12950:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12950:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12950:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13000:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13011:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12996:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12996:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13016:32:16",
																		"type": "",
																		"value": "LPToken: cannot send to itself"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12989:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12989:60:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12989:60:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13058:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13070:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13081:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13066:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13066:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13058:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12887:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12901:4:16",
														"type": ""
													}
												],
												"src": "12736:354:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13269:181:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13286:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13297:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13279:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13279:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13279:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13320:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13331:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13316:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13316:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13336:2:16",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13309:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13309:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13309:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13359:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13370:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13355:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13355:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13375:33:16",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13348:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13348:61:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13348:61:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13418:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13430:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13441:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13426:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13426:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13418:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13246:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13260:4:16",
														"type": ""
													}
												],
												"src": "13095:355:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13556:76:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13566:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13578:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13589:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13574:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13574:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13566:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13608:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13619:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13601:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13601:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13601:25:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13525:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13536:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13547:4:16",
														"type": ""
													}
												],
												"src": "13455:177:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13734:87:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13744:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13756:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13767:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13752:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13752:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13744:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13786:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "13801:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13809:4:16",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13797:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13797:17:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13779:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13779:36:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13779:36:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13703:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13714:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13725:4:16",
														"type": ""
													}
												],
												"src": "13637:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13874:80:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13901:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13903:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13903:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13903:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13890:1:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "13897:1:16"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "13893:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13893:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13887:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13887:13:16"
															},
															"nodeType": "YulIf",
															"src": "13884:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13932:16:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13943:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13946:1:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13939:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13939:9:16"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "13932:3:16"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13857:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13860:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "13866:3:16",
														"type": ""
													}
												],
												"src": "13826:128:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14008:76:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14030:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "14032:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14032:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14032:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14024:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14027:1:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "14021:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14021:8:16"
															},
															"nodeType": "YulIf",
															"src": "14018:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14061:17:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14073:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14076:1:16"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "14069:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14069:9:16"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "14061:4:16"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13990:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13993:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "13999:4:16",
														"type": ""
													}
												],
												"src": "13959:125:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14144:325:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14154:22:16",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "14168:4:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14174:1:16",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "14164:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14164:12:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "14154:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14185:38:16",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "14215:4:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14221:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "14211:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14211:12:16"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "14189:18:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14262:31:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "14264:27:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "14278:6:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14286:4:16",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "14274:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14274:17:16"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14264:6:16"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "14242:18:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14235:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14235:26:16"
															},
															"nodeType": "YulIf",
															"src": "14232:2:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14352:111:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14373:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "14380:3:16",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "14385:10:16",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "14376:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14376:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14366:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14366:31:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14366:31:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14417:1:16",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14420:4:16",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14410:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14410:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14410:15:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14445:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14448:4:16",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14438:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14438:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14438:15:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "14308:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14331:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14339:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "14328:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14328:14:16"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "14305:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14305:38:16"
															},
															"nodeType": "YulIf",
															"src": "14302:2:16"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "14124:4:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14133:6:16",
														"type": ""
													}
												],
												"src": "14089:380:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14506:95:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14523:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14530:3:16",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14535:10:16",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14526:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14526:20:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14516:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14516:31:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14516:31:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14563:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14566:4:16",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14556:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14556:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14556:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14587:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14590:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14580:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14580:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14580:15:16"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "14474:127:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14638:95:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14655:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14662:3:16",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14667:10:16",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14658:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14658:20:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14648:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14648:31:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14648:31:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14695:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14698:4:16",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14688:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14688:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14688:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14719:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14722:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14712:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14712:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14712:15:16"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14606:127:16"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_t_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, and(add(_1, 0x1f), not(31))), 0x20)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), array)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xff))) { revert(value4, value4) }\n        value4 := value\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_t_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_t_string(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"SafeMath: subtraction overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 'v' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"LPToken: cannot mint 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"LPToken: cannot send to itself\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 16,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b857806395d89b411161007c57806395d89b4114610263578063a457c2d71461026b578063a9059cbb1461027e578063d505accf14610291578063dd62ed3e146102a4578063f2fde38b146102b757610137565b806370a082311461020d578063715018a61461022057806379cc6790146102285780637ecebe001461023b5780638da5cb5b1461024e57610137565b80633644e515116100ff5780633644e515146101b757806339509351146101bf57806340c10f19146101d257806342966c68146101e75780634cd88b76146101fa57610137565b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017a57806323b872dd1461018f578063313ce567146101a2575b600080fd5b6101446102ca565b6040516101519190611718565b60405180910390f35b61016d6101683660046115b5565b61035c565b6040516101519190611686565b610182610379565b6040516101519190611691565b61016d61019d366004611509565b61037f565b6101aa610406565b6040516101519190611bb8565b61018261040f565b61016d6101cd3660046115b5565b61041e565b6101e56101e03660046115b5565b61046c565b005b6101e56101f536600461163f565b6104df565b61016d6102083660046115de565b6104f3565b61018261021b3660046114bd565b6105a2565b6101e56105c1565b6101e56102363660046115b5565b61064a565b6101826102493660046114bd565b61069f565b6102566106c6565b6040516101519190611672565b6101446106d5565b61016d6102793660046115b5565b6106e4565b61016d61028c3660046115b5565b61074c565b6101e561029f366004611544565b610760565b6101826102b23660046114d7565b610869565b6101e56102c53660046114bd565b610894565b6060603680546102d990611bf5565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611bf5565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b5050505050905090565b6000610370610369610955565b8484610959565b50600192915050565b60355490565b600061038c848484610a0d565b6103fc84610398610955565b6103f785604051806060016040528060288152602001611ca5602891396001600160a01b038a166000908152603460205260408120906103d6610955565b6001600160a01b031681526020810191909152604001600020549190610b22565b610959565b5060019392505050565b60385460ff1690565b6000610419610b59565b905090565b600061037061042b610955565b846103f7856034600061043c610955565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610b94565b610474610955565b6001600160a01b03166104856106c6565b6001600160a01b0316146104b45760405162461bcd60e51b81526004016104ab90611a1b565b60405180910390fd5b806104d15760405162461bcd60e51b81526004016104ab90611b1a565b6104db8282610bca565b5050565b6104f06104ea610955565b82610c8a565b50565b60008054610100900460ff168061050d575061050d610d60565b8061051b575060005460ff16155b6105375760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610562576000805460ff1961ff0019909116610100171660011790555b61056a610d71565b6105748484610df3565b61057d84610eac565b610585610f63565b60019150801561059b576000805461ff00191690555b5092915050565b6001600160a01b0381166000908152603360205260409020545b919050565b6105c9610955565b6001600160a01b03166105da6106c6565b6001600160a01b0316146106005760405162461bcd60e51b81526004016104ab90611a1b565b60fe546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360fe80546001600160a01b0319169055565b600061067c82604051806060016040528060248152602001611ccd60249139610675866102b2610955565b9190610b22565b90506106908361068a610955565b83610959565b61069a8383610c8a565b505050565b6001600160a01b03811660009081526099602052604081206106c09061103d565b92915050565b60fe546001600160a01b031690565b6060603780546102d990611bf5565b60006103706106f1610955565b846103f785604051806060016040528060258152602001611cf1602591396034600061071b610955565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610b22565b6000610370610759610955565b8484610a0d565b834211156107805760405162461bcd60e51b81526004016104ab906118a4565b6000609a548888886107b5609960008e6001600160a01b03166001600160a01b0316815260200190815260200160002061103d565b896040516020016107cb9695949392919061169a565b60405160208183030381529060405280519060200120905060006107ee82611041565b905060006107fe8287878761107a565b9050896001600160a01b0316816001600160a01b0316146108315760405162461bcd60e51b81526004016104ab906119e4565b6001600160a01b038a16600090815260996020526040902061085290611170565b61085d8a8a8a610959565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61089c610955565b6001600160a01b03166108ad6106c6565b6001600160a01b0316146108d35760405162461bcd60e51b81526004016104ab90611a1b565b6001600160a01b0381166108f95760405162461bcd60e51b81526004016104ab906117e5565b60fe546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360fe80546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b03831661097f5760405162461bcd60e51b81526004016104ab90611ad6565b6001600160a01b0382166109a55760405162461bcd60e51b81526004016104ab9061182b565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a00908590611691565b60405180910390a3505050565b6001600160a01b038316610a335760405162461bcd60e51b81526004016104ab90611a91565b6001600160a01b038216610a595760405162461bcd60e51b81526004016104ab906117a2565b610a6483838361118d565b610aa181604051806060016040528060268152602001611c7f602691396001600160a01b0386166000908152603360205260409020549190610b22565b6001600160a01b038085166000908152603360205260408082209390935590841681522054610ad09082610b94565b6001600160a01b0380841660008181526033602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a00908590611691565b60008184841115610b465760405162461bcd60e51b81526004016104ab9190611718565b50610b518385611bde565b949350505050565b60006104197f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610b876111c1565b610b8f6111c7565b6111cd565b600080610ba18385611bc6565b905083811015610bc35760405162461bcd60e51b81526004016104ab9061186d565b9392505050565b6001600160a01b038216610bf05760405162461bcd60e51b81526004016104ab90611b81565b610bfc6000838361118d565b603554610c099082610b94565b6035556001600160a01b038216600090815260336020526040902054610c2f9082610b94565b6001600160a01b0383166000818152603360205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c7e908590611691565b60405180910390a35050565b6001600160a01b038216610cb05760405162461bcd60e51b81526004016104ab90611a50565b610cbc8260008361118d565b610cf981604051806060016040528060228152602001611c5d602291396001600160a01b0385166000908152603360205260409020549190610b22565b6001600160a01b038316600090815260336020526040902055603554610d1f908261120e565b6035556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c7e908590611691565b6000610d6b3061123a565b15905090565b600054610100900460ff1680610d8a5750610d8a610d60565b80610d98575060005460ff16155b610db45760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610ddf576000805460ff1961ff0019909116610100171660011790555b80156104f0576000805461ff001916905550565b600054610100900460ff1680610e0c5750610e0c610d60565b80610e1a575060005460ff16155b610e365760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610e61576000805460ff1961ff0019909116610100171660011790555b8251610e7490603690602086019061138c565b508151610e8890603790602085019061138c565b506038805460ff19166012179055801561069a576000805461ff0019169055505050565b600054610100900460ff1680610ec55750610ec5610d60565b80610ed3575060005460ff16155b610eef5760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610f1a576000805460ff1961ff0019909116610100171660011790555b610f22610d71565b610f4582604051806040016040528060018152602001603160f81b815250611240565b610f4e826112e1565b80156104db576000805461ff00191690555050565b600054610100900460ff1680610f7c5750610f7c610d60565b80610f8a575060005460ff16155b610fa65760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff16158015610fd1576000805460ff1961ff0019909116610100171660011790555b6000610fdb610955565b60fe80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156104f0576000805461ff001916905550565b5490565b600061104b610b59565b8260405160200161105d929190611657565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156110bc5760405162461bcd60e51b81526004016104ab90611912565b8360ff16601b14806110d157508360ff16601c145b6110ed5760405162461bcd60e51b81526004016104ab906119a2565b60006001868686866040516000815260200160405260405161111294939291906116fa565b6020604051602081039080840390855afa158015611134573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111675760405162461bcd60e51b81526004016104ab9061176b565b95945050505050565b60018160000160008282546111859190611bc6565b909155505050565b61119883838361069a565b6001600160a01b03821630141561069a5760405162461bcd60e51b81526004016104ab90611b4a565b60655490565b60665490565b60008383836111da611388565b306040516020016111ef9594939291906116ce565b6040516020818303038152906040528051906020012090509392505050565b6000828211156112305760405162461bcd60e51b81526004016104ab906118db565b610bc38284611bde565b3b151590565b600054610100900460ff16806112595750611259610d60565b80611267575060005460ff16155b6112835760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff161580156112ae576000805460ff1961ff0019909116610100171660011790555b8251602080850191909120835191840191909120606591909155606655801561069a576000805461ff0019169055505050565b600054610100900460ff16806112fa57506112fa610d60565b80611308575060005460ff16155b6113245760405162461bcd60e51b81526004016104ab90611954565b600054610100900460ff1615801561134f576000805460ff1961ff0019909116610100171660011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a5580156104db576000805461ff00191690555050565b4690565b82805461139890611bf5565b90600052602060002090601f0160209004810192826113ba5760008555611400565b82601f106113d357805160ff1916838001178555611400565b82800160010185558215611400579182015b828111156114005782518255916020019190600101906113e5565b5061140c929150611410565b5090565b5b8082111561140c5760008155600101611411565b80356001600160a01b03811681146105bc57600080fd5b600082601f83011261144c578081fd5b813567ffffffffffffffff8082111561146757611467611c46565b604051601f8301601f19168101602001828111828210171561148b5761148b611c46565b6040528281528483016020018610156114a2578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156114ce578081fd5b610bc382611425565b600080604083850312156114e9578081fd5b6114f283611425565b915061150060208401611425565b90509250929050565b60008060006060848603121561151d578081fd5b61152684611425565b925061153460208501611425565b9150604084013590509250925092565b600080600080600080600060e0888a03121561155e578283fd5b61156788611425565b965061157560208901611425565b95506040880135945060608801359350608088013560ff81168114611598578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156115c7578182fd5b6115d083611425565b946020939093013593505050565b600080604083850312156115f0578182fd5b823567ffffffffffffffff80821115611607578384fd5b6116138683870161143c565b93506020850135915080821115611628578283fd5b506116358582860161143c565b9150509250929050565b600060208284031215611650578081fd5b5035919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b8181101561174457858101830151858201604001528201611728565b818111156117555783604083870101525b50601f01601f1916929092016040019392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f45524332305065726d69743a206578706972656420646561646c696e65000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252601e908201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526016908201527504c50546f6b656e3a2063616e6e6f74206d696e7420360541b604082015260600190565b6020808252601e908201527f4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c660000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b60008219821115611bd957611bd9611c30565b500190565b600082821015611bf057611bf0611c30565b500390565b600281046001821680611c0957607f821691505b60208210811415611c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206645b07de9eccc99d460bc716b01c134617a86ce9dd34cddef8fa63c03a68d2164736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B7 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x24E JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x1FA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x2CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1718 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1686 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x379 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x1509 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x406 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1BB8 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x40F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1CD CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x41E JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x46C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E5 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x16D PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x15DE JUMP JUMPDEST PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x21B CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x182 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x69F JUMP JUMPDEST PUSH2 0x256 PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x6D5 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x6E4 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0x74C JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1544 JUMP JUMPDEST PUSH2 0x760 JUMP JUMPDEST PUSH2 0x182 PUSH2 0x2B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x14D7 JUMP JUMPDEST PUSH2 0x869 JUMP JUMPDEST PUSH2 0x1E5 PUSH2 0x2C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x894 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x305 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x352 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x327 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x352 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x335 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x369 PUSH2 0x955 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x959 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38C DUP5 DUP5 DUP5 PUSH2 0xA0D JUMP JUMPDEST PUSH2 0x3FC DUP5 PUSH2 0x398 PUSH2 0x955 JUMP JUMPDEST PUSH2 0x3F7 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CA5 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x3D6 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x38 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x419 PUSH2 0xB59 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x42B PUSH2 0x955 JUMP JUMPDEST DUP5 PUSH2 0x3F7 DUP6 PUSH1 0x34 PUSH1 0x0 PUSH2 0x43C PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0xB94 JUMP JUMPDEST PUSH2 0x474 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x485 PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B1A JUMP JUMPDEST PUSH2 0x4DB DUP3 DUP3 PUSH2 0xBCA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4F0 PUSH2 0x4EA PUSH2 0x955 JUMP JUMPDEST DUP3 PUSH2 0xC8A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x50D JUMPI POP PUSH2 0x50D PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x51B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x56A PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x574 DUP5 DUP5 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x57D DUP5 PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x585 PUSH2 0xF63 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP DUP1 ISZERO PUSH2 0x59B JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5DA PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x600 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CCD PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x675 DUP7 PUSH2 0x2B2 PUSH2 0x955 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST SWAP1 POP PUSH2 0x690 DUP4 PUSH2 0x68A PUSH2 0x955 JUMP JUMPDEST DUP4 PUSH2 0x959 JUMP JUMPDEST PUSH2 0x69A DUP4 DUP4 PUSH2 0xC8A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x6C0 SWAP1 PUSH2 0x103D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x2D9 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x6F1 PUSH2 0x955 JUMP JUMPDEST DUP5 PUSH2 0x3F7 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1CF1 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x34 PUSH1 0x0 PUSH2 0x71B PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x370 PUSH2 0x759 PUSH2 0x955 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xA0D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x780 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9A SLOAD DUP9 DUP9 DUP9 PUSH2 0x7B5 PUSH1 0x99 PUSH1 0x0 DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x103D JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7CB SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x7EE DUP3 PUSH2 0x1041 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7FE DUP3 DUP8 DUP8 DUP8 PUSH2 0x107A JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x831 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x19E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x852 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x85D DUP11 DUP11 DUP11 PUSH2 0x959 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x89C PUSH2 0x955 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8AD PUSH2 0x6C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x17E5 JUMP JUMPDEST PUSH1 0xFE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x97F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1AD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x182B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0xA00 SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A91 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x17A2 JUMP JUMPDEST PUSH2 0xA64 DUP4 DUP4 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0xAA1 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C7F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xAD0 SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xA00 SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xB46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP2 SWAP1 PUSH2 0x1718 JUMP JUMPDEST POP PUSH2 0xB51 DUP4 DUP6 PUSH2 0x1BDE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x419 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xB87 PUSH2 0x11C1 JUMP JUMPDEST PUSH2 0xB8F PUSH2 0x11C7 JUMP JUMPDEST PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBA1 DUP4 DUP6 PUSH2 0x1BC6 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x186D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B81 JUMP JUMPDEST PUSH2 0xBFC PUSH1 0x0 DUP4 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH1 0x35 SLOAD PUSH2 0xC09 SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x35 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC2F SWAP1 DUP3 PUSH2 0xB94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xC7E SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0xCBC DUP3 PUSH1 0x0 DUP4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0xCF9 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C5D PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x35 SLOAD PUSH2 0xD1F SWAP1 DUP3 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x35 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xC7E SWAP1 DUP6 SWAP1 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B ADDRESS PUSH2 0x123A JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xD8A JUMPI POP PUSH2 0xD8A PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xD98 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xDB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xDDF JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xE0C JUMPI POP PUSH2 0xE0C PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xE1A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xE36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH2 0xE74 SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x138C JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0xE88 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x138C JUMP JUMPDEST POP PUSH1 0x38 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xEC5 JUMPI POP PUSH2 0xEC5 PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xED3 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xEEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xF1A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xF22 PUSH2 0xD71 JUMP JUMPDEST PUSH2 0xF45 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1240 JUMP JUMPDEST PUSH2 0xF4E DUP3 PUSH2 0x12E1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xF7C JUMPI POP PUSH2 0xF7C PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0xF8A JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xFA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xFD1 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 PUSH2 0xFDB PUSH2 0x955 JUMP JUMPDEST PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP DUP1 ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104B PUSH2 0xB59 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x105D SWAP3 SWAP2 SWAP1 PUSH2 0x1657 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x10BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1912 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x10D1 JUMPI POP DUP4 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x10ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1112 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1134 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x176B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1185 SWAP2 SWAP1 PUSH2 0x1BC6 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x1198 DUP4 DUP4 DUP4 PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO PUSH2 0x69A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH1 0x65 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x66 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH2 0x11DA PUSH2 0x1388 JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11EF SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0xBC3 DUP3 DUP5 PUSH2 0x1BDE JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x1259 JUMPI POP PUSH2 0x1259 PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x1267 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1283 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x65 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x66 SSTORE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x12FA JUMPI POP PUSH2 0x12FA PUSH2 0xD60 JUMP JUMPDEST DUP1 PUSH2 0x1308 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1324 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4AB SWAP1 PUSH2 0x1954 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x134F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 PUSH1 0x9A SSTORE DUP1 ISZERO PUSH2 0x4DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1398 SWAP1 PUSH2 0x1BF5 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x13BA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1400 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x13D3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1400 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1400 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1400 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x13E5 JUMP JUMPDEST POP PUSH2 0x140C SWAP3 SWAP2 POP PUSH2 0x1410 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x140C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1411 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x144C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1467 JUMPI PUSH2 0x1467 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP3 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x148B JUMPI PUSH2 0x148B PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP5 DUP4 ADD PUSH1 0x20 ADD DUP7 LT ISZERO PUSH2 0x14A2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP2 DUP3 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xBC3 DUP3 PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14E9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x14F2 DUP4 PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP PUSH2 0x1500 PUSH1 0x20 DUP5 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x151D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1526 DUP5 PUSH2 0x1425 JUMP JUMPDEST SWAP3 POP PUSH2 0x1534 PUSH1 0x20 DUP6 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x155E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1567 DUP9 PUSH2 0x1425 JUMP JUMPDEST SWAP7 POP PUSH2 0x1575 PUSH1 0x20 DUP10 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1598 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15C7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15D0 DUP4 PUSH2 0x1425 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15F0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1607 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1613 DUP7 DUP4 DUP8 ADD PUSH2 0x143C JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1628 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1635 DUP6 DUP3 DUP7 ADD PUSH2 0x143C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1650 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1744 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1728 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1755 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4C50546F6B656E3A2063616E6E6F74206D696E74203 PUSH1 0x54 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2063616E6E6F742073656E6420746F20697473656C660000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1BD9 JUMPI PUSH2 0x1BD9 PUSH2 0x1C30 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1BF0 JUMPI PUSH2 0x1BF0 PUSH2 0x1C30 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1C09 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1C2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E74206578636565647320616C6C6F77616E63654552 NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212206645 0xB0 PUSH30 0xE9ECCC99D460BC716B01C134617A86CE9DD34CDDEF8FA63C03A68D216473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "570:1659:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2507:89:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4583:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3574:106::-;;;:::i;:::-;;;;;;;:::i;5216:317::-;;;;;;:::i;:::-;;:::i;3425:89::-;;;:::i;:::-;;;;;;;:::i;2972:113:11:-;;;:::i;5928:215:12:-;;;;;;:::i;:::-;;:::i;1574:165:0:-;;;;;;:::i;:::-;;:::i;:::-;;851:89:10;;;;;;:::i;:::-;;:::i;1017:306:0:-;;;;;;:::i;:::-;;:::i;3738:125:12:-;;;;;;:::i;:::-;;:::i;1969:145:1:-;;;:::i;1246:290:10:-;;;;;;:::i;:::-;;:::i;2730:118:11:-;;;;;;:::i;:::-;;:::i;1337:85:1:-;;;:::i;:::-;;;;;;;:::i;2709:93:12:-;;;:::i;6630:266::-;;;;;;:::i;:::-;;:::i;4066:172::-;;;;;;:::i;:::-;;:::i;1864:805:11:-;;;;;;:::i;:::-;;:::i;4296:149:12:-;;;;;;:::i;:::-;;:::i;2263:240:1:-;;;;;;:::i;:::-;;:::i;2507:89:12:-;2552:13;2584:5;2577:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2507:89;:::o;4583:166::-;4666:4;4682:39;4691:12;:10;:12::i;:::-;4705:7;4714:6;4682:8;:39::i;:::-;-1:-1:-1;4738:4:12;4583:166;;;;:::o;3574:106::-;3661:12;;3574:106;:::o;5216:317::-;5322:4;5338:36;5348:6;5356:9;5367:6;5338:9;:36::i;:::-;5384:121;5393:6;5401:12;:10;:12::i;:::-;5415:89;5453:6;5415:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5415:19:12;;;;;;:11;:19;;;;;;5435:12;:10;:12::i;:::-;-1:-1:-1;;;;;5415:33:12;;;;;;;;;;;;-1:-1:-1;5415:33:12;;;:89;:37;:89::i;:::-;5384:8;:121::i;:::-;-1:-1:-1;5522:4:12;5216:317;;;;;:::o;3425:89::-;3498:9;;;;3425:89;:::o;2972:113:11:-;3032:7;3058:20;:18;:20::i;:::-;3051:27;;2972:113;:::o;5928:215:12:-;6016:4;6032:83;6041:12;:10;:12::i;:::-;6055:7;6064:50;6103:10;6064:11;:25;6076:12;:10;:12::i;:::-;-1:-1:-1;;;;;6064:25:12;;;;;;;;;;;;;;;;;-1:-1:-1;6064:25:12;;;:34;;;;;;;;;;;:38;:50::i;1574:165:0:-;1560:12:1;:10;:12::i;:::-;-1:-1:-1;;;;;1549:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1549:23:1;;1541:68;;;;-1:-1:-1;;;1541:68:1;;;;;;;:::i;:::-;;;;;;;;;1660:11:0;1652:46:::1;;;;-1:-1:-1::0;;;1652:46:0::1;;;;;;;:::i;:::-;1708:24;1714:9;1725:6;1708:5;:24::i;:::-;1574:165:::0;;:::o;851:89:10:-;906:27;912:12;:10;:12::i;:::-;926:6;906:5;:27::i;:::-;851:89;:::o;1017:306:0:-;1133:4;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;1153:26:0::1;:24;:26::i;:::-;1189:36;1212:4;1218:6;1189:22;:36::i;:::-;1235:24;1254:4;1235:18;:24::i;:::-;1269:26;:24;:26::i;:::-;1312:4;1305:11;;1794:14:14::0;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;1790:66;1017:306:0;;;;;:::o;3738:125:12:-;-1:-1:-1;;;;;3838:18:12;;3812:7;3838:18;;;:9;:18;;;;;;3738:125;;;;:::o;1969:145:1:-;1560:12;:10;:12::i;:::-;-1:-1:-1;;;;;1549:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1549:23:1;;1541:68;;;;-1:-1:-1;;;1541:68:1;;;;;;;:::i;:::-;2059:6:::1;::::0;2038:40:::1;::::0;2075:1:::1;::::0;-1:-1:-1;;;;;2059:6:1::1;::::0;2038:40:::1;::::0;2075:1;;2038:40:::1;2088:6;:19:::0;;-1:-1:-1;;;;;;2088:19:1::1;::::0;;1969:145::o;1246:290:10:-;1322:26;1351:84;1388:6;1351:84;;;;;;;;;;;;;;;;;:32;1361:7;1370:12;:10;:12::i;1351:32::-;:36;:84;:36;:84::i;:::-;1322:113;;1446:51;1455:7;1464:12;:10;:12::i;:::-;1478:18;1446:8;:51::i;:::-;1507:22;1513:7;1522:6;1507:5;:22::i;:::-;1246:290;;;:::o;2730:118:11:-;-1:-1:-1;;;;;2817:14:11;;2791:7;2817:14;;;:7;:14;;;;;:24;;:22;:24::i;:::-;2810:31;2730:118;-1:-1:-1;;2730:118:11:o;1337:85:1:-;1409:6;;-1:-1:-1;;;;;1409:6:1;1337:85;:::o;2709:93:12:-;2756:13;2788:7;2781:14;;;;;:::i;6630:266::-;6723:4;6739:129;6748:12;:10;:12::i;:::-;6762:7;6771:96;6810:15;6771:96;;;;;;;;;;;;;;;;;:11;:25;6783:12;:10;:12::i;:::-;-1:-1:-1;;;;;6771:25:12;;;;;;;;;;;;;;;;;-1:-1:-1;6771:25:12;;;:34;;;;;;;;;;;:96;:38;:96::i;4066:172::-;4152:4;4168:42;4178:12;:10;:12::i;:::-;4192:9;4203:6;4168:9;:42::i;1864:805:11:-;2091:8;2072:15;:27;;2064:69;;;;-1:-1:-1;;;2064:69:11;;;;;;;:::i;:::-;2144:18;2216:16;;2250:5;2273:7;2298:5;2321:24;:7;:14;2329:5;-1:-1:-1;;;;;2321:14:11;-1:-1:-1;;;;;2321:14:11;;;;;;;;;;;;:22;:24::i;:::-;2363:8;2188:197;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2165:230;;;;;;2144:251;;2406:12;2421:28;2438:10;2421:16;:28::i;:::-;2406:43;;2460:14;2477:39;2502:4;2508:1;2511;2514;2477:24;:39::i;:::-;2460:56;;2544:5;-1:-1:-1;;;;;2534:15:11;:6;-1:-1:-1;;;;;2534:15:11;;2526:58;;;;-1:-1:-1;;;2526:58:11;;;;;;;:::i;:::-;-1:-1:-1;;;;;2595:14:11;;;;;;:7;:14;;;;;:26;;:24;:26::i;:::-;2631:31;2640:5;2647:7;2656:5;2631:8;:31::i;:::-;1864:805;;;;;;;;;;:::o;4296:149:12:-;-1:-1:-1;;;;;4411:18:12;;;4385:7;4411:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4296:149::o;2263:240:1:-;1560:12;:10;:12::i;:::-;-1:-1:-1;;;;;1549:23:1;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1549:23:1;;1541:68;;;;-1:-1:-1;;;1541:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;2351:22:1;::::1;2343:73;;;;-1:-1:-1::0;;;2343:73:1::1;;;;;;;:::i;:::-;2452:6;::::0;2431:38:::1;::::0;-1:-1:-1;;;;;2431:38:1;;::::1;::::0;2452:6:::1;::::0;2431:38:::1;::::0;2452:6:::1;::::0;2431:38:::1;2479:6;:17:::0;;-1:-1:-1;;;;;;2479:17:1::1;-1:-1:-1::0;;;;;2479:17:1;;;::::1;::::0;;;::::1;::::0;;2263:240::o;828:113:6:-;923:10;828:113;:::o;9694:340:12:-;-1:-1:-1;;;;;9795:19:12;;9787:68;;;;-1:-1:-1;;;9787:68:12;;;;;;;:::i;:::-;-1:-1:-1;;;;;9873:21:12;;9865:68;;;;-1:-1:-1;;;9865:68:12;;;;;;;:::i;:::-;-1:-1:-1;;;;;9944:18:12;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;9995:32;;;;;9974:6;;9995:32;:::i;:::-;;;;;;;;9694:340;;;:::o;7370:530::-;-1:-1:-1;;;;;7475:20:12;;7467:70;;;;-1:-1:-1;;;7467:70:12;;;;;;;:::i;:::-;-1:-1:-1;;;;;7555:23:12;;7547:71;;;;-1:-1:-1;;;7547:71:12;;;;;;;:::i;:::-;7629:47;7650:6;7658:9;7669:6;7629:20;:47::i;:::-;7707:71;7729:6;7707:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7707:17:12;;;;;;:9;:17;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7687:17:12;;;;;;;:9;:17;;;;;;:91;;;;7811:20;;;;;;;:32;;7836:6;7811:24;:32::i;:::-;-1:-1:-1;;;;;7788:20:12;;;;;;;:9;:20;;;;;;;:55;;;;7858:35;;;;;;;;;;7886:6;;7858:35;:::i;5443:163:13:-;5529:7;5564:12;5556:6;;;;5548:29;;;;-1:-1:-1;;;5548:29:13;;;;;;;;:::i;:::-;-1:-1:-1;5594:5:13;5598:1;5594;:5;:::i;:::-;5587:12;5443:163;-1:-1:-1;;;;5443:163:13:o;2695:160:9:-;2748:7;2774:74;1459:95;2808:17;:15;:17::i;:::-;2827:20;:18;:20::i;:::-;2774:21;:74::i;2701:175:13:-;2759:7;;2790:5;2794:1;2790;:5;:::i;:::-;2778:17;;2818:1;2813;:6;;2805:46;;;;-1:-1:-1;;;2805:46:13;;;;;;;:::i;:::-;2868:1;2701:175;-1:-1:-1;;;2701:175:13:o;8171:370:12:-;-1:-1:-1;;;;;8254:21:12;;8246:65;;;;-1:-1:-1;;;8246:65:12;;;;;;;:::i;:::-;8322:49;8351:1;8355:7;8364:6;8322:20;:49::i;:::-;8397:12;;:24;;8414:6;8397:16;:24::i;:::-;8382:12;:39;-1:-1:-1;;;;;8452:18:12;;;;;;:9;:18;;;;;;:30;;8475:6;8452:22;:30::i;:::-;-1:-1:-1;;;;;8431:18:12;;;;;;:9;:18;;;;;;:51;;;;8497:37;;8431:18;;;8497:37;;;;8527:6;;8497:37;:::i;:::-;;;;;;;;8171:370;;:::o;8861:410::-;-1:-1:-1;;;;;8944:21:12;;8936:67;;;;-1:-1:-1;;;8936:67:12;;;;;;;:::i;:::-;9014:49;9035:7;9052:1;9056:6;9014:20;:49::i;:::-;9095:68;9118:6;9095:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9095:18:12;;;;;;:9;:18;;;;;;;:68;:22;:68::i;:::-;-1:-1:-1;;;;;9074:18:12;;;;;;:9;:18;;;;;:89;9188:12;;:24;;9205:6;9188:16;:24::i;:::-;9173:12;:39;9227:37;;9253:1;;-1:-1:-1;;;;;9227:37:12;;;;;;;9257:6;;9227:37;:::i;1952:123:14:-;2000:4;2024:44;2062:4;2024:29;:44::i;:::-;2023:45;2016:52;;1952:123;:::o;759:64:6:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;1794:14;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;759:64:6;:::o;2264:178:12:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;2371:13:12;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2394:17:12;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2421:9:12::1;:14:::0;;-1:-1:-1;;2421:14:12::1;2433:2;2421:14;::::0;;1790:66:14;;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;2264:178:12;;;:::o;1387:200:11:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;1466:26:11::1;:24;:26::i;:::-;1502:34;1526:4;1502:34;;;;;;;;;;;;;-1:-1:-1::0;;;1502:34:11::1;;::::0;:23:::1;:34::i;:::-;1546;1575:4;1546:28;:34::i;:::-;1794:14:14::0;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;1387:200:11;;:::o;1069:192:1:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;1136:17:1::1;1156:12;:10;:12::i;:::-;1178:6;:18:::0;;-1:-1:-1;;;;;;1178:18:1::1;-1:-1:-1::0;;;;;1178:18:1;::::1;::::0;;::::1;::::0;;;1211:43:::1;::::0;1178:18;;-1:-1:-1;1178:18:1;-1:-1:-1;;1211:43:1::1;::::0;-1:-1:-1;;1211:43:1::1;1778:1:14;1794:14:::0;1790:66;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;1069:192:1;:::o;1133:112:7:-;1224:14;;1133:112::o;3813:183:9:-;3890:7;3955:20;:18;:20::i;:::-;3977:10;3926:62;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3916:73;;;;;;3909:80;;3813:183;;;:::o;1971:1414:8:-;2056:7;2971:66;2957:80;;;2949:127;;;;-1:-1:-1;;;2949:127:8;;;;;;;:::i;:::-;3094:1;:7;;3099:2;3094:7;:18;;;;3105:1;:7;;3110:2;3105:7;3094:18;3086:65;;;;-1:-1:-1;;;3086:65:8;;;;;;;:::i;:::-;3246:14;3263:24;3273:4;3279:1;3282;3285;3263:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3263:24:8;;-1:-1:-1;;3263:24:8;;;-1:-1:-1;;;;;;;3305:20:8;;3297:57;;;;-1:-1:-1;;;3297:57:8;;;;;;;:::i;:::-;3372:6;1971:1414;-1:-1:-1;;;;;1971:1414:8:o;1251:178:7:-;1421:1;1403:7;:14;;;:19;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1251:178:7:o;1948:279:0:-;2104:44;2131:4;2137:2;2141:6;2104:26;:44::i;:::-;-1:-1:-1;;;;;2166:19:0;;2180:4;2166:19;;2158:62;;;;-1:-1:-1;;;2158:62:0;;;;;;;:::i;4558:103:9:-;4642:12;;4558:103;:::o;4900:109::-;4987:15;;4900:109;:::o;2861:327::-;2963:7;3040:8;3066:4;3088:7;3113:13;:11;:13::i;:::-;3152:4;3012:159;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2989:192;;;;;;2982:199;;2861:327;;;;;:::o;3147:155:13:-;3205:7;3237:1;3232;:6;;3224:49;;;;-1:-1:-1;;;3224:49:13;;;;;;;:::i;:::-;3290:5;3294:1;3290;:5;:::i;737:413:15:-;1097:20;1135:8;;;737:413::o;2317:292:9:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;2445:22:9;;::::1;::::0;;::::1;::::0;;;;2501:25;;;;::::1;::::0;;;;2536:12:::1;:25:::0;;;;2571:15:::1;:31:::0;1790:66:14;;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;2317:292:9;;;:::o;1593:210:11:-;1512:13:14;;;;;;;;:33;;;1529:16;:14;:16::i;:::-;1512:50;;;-1:-1:-1;1550:12:14;;;;1549:13;1512:50;1504:109;;;;-1:-1:-1;;;1504:109:14;;;;;;;:::i;:::-;1624:19;1647:13;;;;;;1646:14;1670:98;;;;1704:13;:20;;-1:-1:-1;;;;1704:20:14;;;;;1738:19;1720:4;1738:19;;;1670:98;1701:95:11::1;1682:16;:114:::0;1790:66:14;;;;1840:5;1824:21;;-1:-1:-1;;1824:21:14;;;1593:210:11;;:::o;4002:320:9:-;4297:9;;4272:44::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:175:16;84:20;;-1:-1:-1;;;;;133:31:16;;123:42;;113:2;;179:1;176;169:12;194:713;;292:3;285:4;277:6;273:17;269:27;259:2;;314:5;307;300:20;259:2;354:6;341:20;380:18;417:2;413;410:10;407:2;;;423:18;;:::i;:::-;472:2;466:9;541:2;522:13;;-1:-1:-1;;518:27:16;506:40;;548:4;502:51;568:18;;;588:22;;;565:46;562:2;;;614:18;;:::i;:::-;650:2;643:22;674:18;;;711:15;;;728:4;707:26;704:35;-1:-1:-1;701:2:16;;;756:5;749;742:20;701:2;824;817:4;809:6;805:17;798:4;790:6;786:17;773:54;847:15;;;864:4;843:26;836:41;;;;851:6;249:658;-1:-1:-1;;;249:658:16:o;912:198::-;;1024:2;1012:9;1003:7;999:23;995:32;992:2;;;1045:6;1037;1030:22;992:2;1073:31;1094:9;1073:31;:::i;1115:274::-;;;1244:2;1232:9;1223:7;1219:23;1215:32;1212:2;;;1265:6;1257;1250:22;1212:2;1293:31;1314:9;1293:31;:::i;:::-;1283:41;;1343:40;1379:2;1368:9;1364:18;1343:40;:::i;:::-;1333:50;;1202:187;;;;;:::o;1394:342::-;;;;1540:2;1528:9;1519:7;1515:23;1511:32;1508:2;;;1561:6;1553;1546:22;1508:2;1589:31;1610:9;1589:31;:::i;:::-;1579:41;;1639:40;1675:2;1664:9;1660:18;1639:40;:::i;:::-;1629:50;;1726:2;1715:9;1711:18;1698:32;1688:42;;1498:238;;;;;:::o;1741:717::-;;;;;;;;1953:3;1941:9;1932:7;1928:23;1924:33;1921:2;;;1975:6;1967;1960:22;1921:2;2003:31;2024:9;2003:31;:::i;:::-;1993:41;;2053:40;2089:2;2078:9;2074:18;2053:40;:::i;:::-;2043:50;;2140:2;2129:9;2125:18;2112:32;2102:42;;2191:2;2180:9;2176:18;2163:32;2153:42;;2245:3;2234:9;2230:19;2217:33;2290:4;2283:5;2279:16;2272:5;2269:27;2259:2;;2315:6;2307;2300:22;2259:2;1911:547;;;;-1:-1:-1;1911:547:16;;;;2343:5;2395:3;2380:19;;2367:33;;-1:-1:-1;2447:3:16;2432:19;;;2419:33;;1911:547;-1:-1:-1;;1911:547:16:o;2463:266::-;;;2592:2;2580:9;2571:7;2567:23;2563:32;2560:2;;;2613:6;2605;2598:22;2560:2;2641:31;2662:9;2641:31;:::i;:::-;2631:41;2719:2;2704:18;;;;2691:32;;-1:-1:-1;;;2550:179:16:o;2734:577::-;;;2883:2;2871:9;2862:7;2858:23;2854:32;2851:2;;;2904:6;2896;2889:22;2851:2;2949:9;2936:23;2978:18;3019:2;3011:6;3008:14;3005:2;;;3040:6;3032;3025:22;3005:2;3068:52;3112:7;3103:6;3092:9;3088:22;3068:52;:::i;:::-;3058:62;;3173:2;3162:9;3158:18;3145:32;3129:48;;3202:2;3192:8;3189:16;3186:2;;;3223:6;3215;3208:22;3186:2;;3251:54;3297:7;3286:8;3275:9;3271:24;3251:54;:::i;:::-;3241:64;;;2841:470;;;;;:::o;3316:190::-;;3428:2;3416:9;3407:7;3403:23;3399:32;3396:2;;;3449:6;3441;3434:22;3396:2;-1:-1:-1;3477:23:16;;3386:120;-1:-1:-1;3386:120:16:o;3511:392::-;-1:-1:-1;;;3769:27:16;;3821:1;3812:11;;3805:27;;;;3857:2;3848:12;;3841:28;3894:2;3885:12;;3759:144::o;3908:203::-;-1:-1:-1;;;;;4072:32:16;;;;4054:51;;4042:2;4027:18;;4009:102::o;4116:187::-;4281:14;;4274:22;4256:41;;4244:2;4229:18;;4211:92::o;4308:177::-;4454:25;;;4442:2;4427:18;;4409:76::o;4490:591::-;4777:25;;;-1:-1:-1;;;;;4876:15:16;;;4871:2;4856:18;;4849:43;4928:15;;;;4923:2;4908:18;;4901:43;4975:2;4960:18;;4953:34;5018:3;5003:19;;4996:35;;;;4829:3;5047:19;;5040:35;4764:3;4749:19;;4731:350::o;5086:489::-;5345:25;;;5401:2;5386:18;;5379:34;;;;5444:2;5429:18;;5422:34;;;;5487:2;5472:18;;5465:34;-1:-1:-1;;;;;5536:32:16;5530:3;5515:19;;5508:61;5332:3;5317:19;;5299:276::o;5580:398::-;5807:25;;;5880:4;5868:17;;;;5863:2;5848:18;;5841:45;5917:2;5902:18;;5895:34;5960:2;5945:18;;5938:34;5794:3;5779:19;;5761:217::o;5983:603::-;;6124:2;6153;6142:9;6135:21;6185:6;6179:13;6228:6;6223:2;6212:9;6208:18;6201:34;6253:4;6266:140;6280:6;6277:1;6274:13;6266:140;;;6375:14;;;6371:23;;6365:30;6341:17;;;6360:2;6337:26;6330:66;6295:10;;6266:140;;;6424:6;6421:1;6418:13;6415:2;;;6494:4;6489:2;6480:6;6469:9;6465:22;6461:31;6454:45;6415:2;-1:-1:-1;6570:2:16;6549:15;-1:-1:-1;;6545:29:16;6530:45;;;;6577:2;6526:54;;6104:482;-1:-1:-1;;;6104:482:16:o;6591:348::-;6793:2;6775:21;;;6832:2;6812:18;;;6805:30;6871:26;6866:2;6851:18;;6844:54;6930:2;6915:18;;6765:174::o;6944:399::-;7146:2;7128:21;;;7185:2;7165:18;;;7158:30;7224:34;7219:2;7204:18;;7197:62;-1:-1:-1;;;7290:2:16;7275:18;;7268:33;7333:3;7318:19;;7118:225::o;7348:402::-;7550:2;7532:21;;;7589:2;7569:18;;;7562:30;7628:34;7623:2;7608:18;;7601:62;-1:-1:-1;;;7694:2:16;7679:18;;7672:36;7740:3;7725:19;;7522:228::o;7755:398::-;7957:2;7939:21;;;7996:2;7976:18;;;7969:30;8035:34;8030:2;8015:18;;8008:62;-1:-1:-1;;;8101:2:16;8086:18;;8079:32;8143:3;8128:19;;7929:224::o;8158:351::-;8360:2;8342:21;;;8399:2;8379:18;;;8372:30;8438:29;8433:2;8418:18;;8411:57;8500:2;8485:18;;8332:177::o;8514:353::-;8716:2;8698:21;;;8755:2;8735:18;;;8728:30;8794:31;8789:2;8774:18;;8767:59;8858:2;8843:18;;8688:179::o;8872:354::-;9074:2;9056:21;;;9113:2;9093:18;;;9086:30;9152:32;9147:2;9132:18;;9125:60;9217:2;9202:18;;9046:180::o;9231:398::-;9433:2;9415:21;;;9472:2;9452:18;;;9445:30;9511:34;9506:2;9491:18;;9484:62;-1:-1:-1;;;9577:2:16;9562:18;;9555:32;9619:3;9604:19;;9405:224::o;9634:410::-;9836:2;9818:21;;;9875:2;9855:18;;;9848:30;9914:34;9909:2;9894:18;;9887:62;-1:-1:-1;;;9980:2:16;9965:18;;9958:44;10034:3;10019:19;;9808:236::o;10049:398::-;10251:2;10233:21;;;10290:2;10270:18;;;10263:30;10329:34;10324:2;10309:18;;10302:62;-1:-1:-1;;;10395:2:16;10380:18;;10373:32;10437:3;10422:19;;10223:224::o;10452:354::-;10654:2;10636:21;;;10693:2;10673:18;;;10666:30;10732:32;10727:2;10712:18;;10705:60;10797:2;10782:18;;10626:180::o;10811:356::-;11013:2;10995:21;;;11032:18;;;11025:30;11091:34;11086:2;11071:18;;11064:62;11158:2;11143:18;;10985:182::o;11172:397::-;11374:2;11356:21;;;11413:2;11393:18;;;11386:30;11452:34;11447:2;11432:18;;11425:62;-1:-1:-1;;;11518:2:16;11503:18;;11496:31;11559:3;11544:19;;11346:223::o;11574:401::-;11776:2;11758:21;;;11815:2;11795:18;;;11788:30;11854:34;11849:2;11834:18;;11827:62;-1:-1:-1;;;11920:2:16;11905:18;;11898:35;11965:3;11950:19;;11748:227::o;11980:400::-;12182:2;12164:21;;;12221:2;12201:18;;;12194:30;12260:34;12255:2;12240:18;;12233:62;-1:-1:-1;;;12326:2:16;12311:18;;12304:34;12370:3;12355:19;;12154:226::o;12385:346::-;12587:2;12569:21;;;12626:2;12606:18;;;12599:30;-1:-1:-1;;;12660:2:16;12645:18;;12638:52;12722:2;12707:18;;12559:172::o;12736:354::-;12938:2;12920:21;;;12977:2;12957:18;;;12950:30;13016:32;13011:2;12996:18;;12989:60;13081:2;13066:18;;12910:180::o;13095:355::-;13297:2;13279:21;;;13336:2;13316:18;;;13309:30;13375:33;13370:2;13355:18;;13348:61;13441:2;13426:18;;13269:181::o;13637:184::-;13809:4;13797:17;;;;13779:36;;13767:2;13752:18;;13734:87::o;13826:128::-;;13897:1;13893:6;13890:1;13887:13;13884:2;;;13903:18;;:::i;:::-;-1:-1:-1;13939:9:16;;13874:80::o;13959:125::-;;14027:1;14024;14021:8;14018:2;;;14032:18;;:::i;:::-;-1:-1:-1;14069:9:16;;14008:76::o;14089:380::-;14174:1;14164:12;;14221:1;14211:12;;;14232:2;;14286:4;14278:6;14274:17;14264:27;;14232:2;14339;14331:6;14328:14;14308:18;14305:38;14302:2;;;14385:10;14380:3;14376:20;14373:1;14366:31;14420:4;14417:1;14410:15;14448:4;14445:1;14438:15;14302:2;;14144:325;;;:::o;14474:127::-;14535:10;14530:3;14526:20;14523:1;14516:31;14566:4;14563:1;14556:15;14590:4;14587:1;14580:15;14606:127;14667:10;14662:3;14658:20;14655:1;14648:31;14698:4;14695:1;14688:15;14722:4;14719:1;14712:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1499800",
								"executionCost": "1568",
								"totalCost": "1501368"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22629",
								"balanceOf(address)": "infinite",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "1158",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"initialize(string,string)": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "1399",
								"owner()": "1181",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "24297",
								"symbol()": "infinite",
								"totalSupply()": "1096",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "24622"
							},
							"internal": {
								"_beforeTokenTransfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 570,
									"end": 2229,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206645b07de9eccc99d460bc716b01c134617a86ce9dd34cddef8fa63c03a68d2164736f6c63430008000033",
									".code": [
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "D505ACCF"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "F2FDE38B"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "79CC6790"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "7ECEBE00"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "40C10F19"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "42966C68"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "4CD88B76"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 570,
											"end": 2229,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 851,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 851,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 851,
											"end": 940,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 851,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "tag",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "tag",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2565,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2584,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4666,
											"end": 4670,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 4691,
											"end": 4701,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4705,
											"end": 4712,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4714,
											"end": 4720,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "tag",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4738,
											"end": 4742,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3661,
											"end": 3673,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 3661,
											"end": 3673,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5322,
											"end": 5326,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 5348,
											"end": 5354,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5356,
											"end": 5365,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5367,
											"end": 5373,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5338,
											"end": 5347,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "127"
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 5401,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 5453,
											"end": 5459,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH data",
											"source": 12,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5426,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 5435,
											"end": 5445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "tag",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "tag",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5384,
											"end": 5392,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "tag",
											"source": 12,
											"value": "127"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5522,
											"end": 5526,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "PUSH",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "tag",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3032,
											"end": 3039,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 3058,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3078,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3051,
											"end": 3078,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2972,
											"end": 3085,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6016,
											"end": 6020,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6032,
											"end": 6115,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 6041,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6055,
											"end": 6062,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 6103,
											"end": 6113,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6075,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 6076,
											"end": 6086,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "tag",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 6064,
											"end": 6114,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 1560,
											"end": 1570,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "tag",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1549,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "tag",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "145"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "tag",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "tag",
											"source": 1,
											"value": "145"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1660,
											"end": 1671,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1652,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1708,
											"end": 1732,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1714,
											"end": 1723,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1725,
											"end": 1731,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1708,
											"end": 1713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 1708,
											"end": 1732,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1708,
											"end": 1732,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1708,
											"end": 1732,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1739,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "tag",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 906,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 912,
											"end": 924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 912,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 912,
											"end": 924,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 912,
											"end": 924,
											"name": "tag",
											"source": 10,
											"value": "156"
										},
										{
											"begin": 912,
											"end": 924,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 926,
											"end": 932,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 906,
											"end": 911,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 906,
											"end": 933,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 906,
											"end": 933,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 906,
											"end": 933,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 851,
											"end": 940,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 851,
											"end": 940,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1133,
											"end": 1137,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1153,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1153,
											"end": 1177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1153,
											"end": 1179,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1153,
											"end": 1179,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1153,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1189,
											"end": 1225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1212,
											"end": 1216,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1218,
											"end": 1224,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1189,
											"end": 1211,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 1189,
											"end": 1225,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1225,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1189,
											"end": 1225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1235,
											"end": 1259,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 1254,
											"end": 1258,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1235,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1235,
											"end": 1259,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1235,
											"end": 1259,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 1235,
											"end": 1259,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1269,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1269,
											"end": 1293,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1269,
											"end": 1295,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1269,
											"end": 1295,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1269,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1312,
											"end": 1316,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1305,
											"end": 1316,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1305,
											"end": 1316,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1794,
											"end": 1808,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "tag",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1017,
											"end": 1323,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "177"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 1560,
											"end": 1570,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "tag",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 1549,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "tag",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "181"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "tag",
											"source": 1,
											"value": "181"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2059,
											"end": 2065,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 2059,
											"end": 2065,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2078,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2038,
											"end": 2078,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2075,
											"end": 2076,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2076,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2065,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2059,
											"end": 2065,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2078,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2038,
											"end": 2078,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2075,
											"end": 2076,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2075,
											"end": 2076,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2078,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 2088,
											"end": 2094,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 2088,
											"end": 2107,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2088,
											"end": 2107,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2088,
											"end": 2107,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2088,
											"end": 2107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2088,
											"end": 2107,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1969,
											"end": 2114,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1322,
											"end": 1348,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 1388,
											"end": 1394,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH data",
											"source": 10,
											"value": "A287C363786607A1457A2D9D12FA61C0073358E02D76B4035FC2C2D86A19C0DB"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "CODECOPY",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 1361,
											"end": 1368,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1370,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 1370,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 1370,
											"end": 1382,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1383,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 1351,
											"end": 1383,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1387,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1351,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "tag",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 1351,
											"end": 1435,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1322,
											"end": 1435,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1322,
											"end": 1435,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1446,
											"end": 1497,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 1455,
											"end": 1462,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1464,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 1464,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 1464,
											"end": 1476,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1464,
											"end": 1476,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 1464,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1478,
											"end": 1496,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1446,
											"end": 1454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 1446,
											"end": 1497,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1446,
											"end": 1497,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 1446,
											"end": 1497,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1507,
											"end": 1529,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 1513,
											"end": 1520,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 1528,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1507,
											"end": 1512,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 1507,
											"end": 1529,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1507,
											"end": 1529,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 1507,
											"end": 1529,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1246,
											"end": 1536,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "tag",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2791,
											"end": 2798,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2824,
											"name": "PUSH",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2831,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 2817,
											"end": 2841,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2817,
											"end": 2839,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 2817,
											"end": 2841,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2817,
											"end": 2841,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 2817,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2810,
											"end": 2841,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2730,
											"end": 2848,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1409,
											"end": 1415,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 1409,
											"end": 1415,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1409,
											"end": 1415,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1337,
											"end": 1422,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2756,
											"end": 2769,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2788,
											"end": 2795,
											"name": "PUSH",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6723,
											"end": 6727,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6739,
											"end": 6868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 6748,
											"end": 6758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "tag",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6762,
											"end": 6769,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 6810,
											"end": 6825,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH data",
											"source": 12,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6782,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 6783,
											"end": 6793,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "tag",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "DUP14",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6809,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4152,
											"end": 4156,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4210,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "208"
										},
										{
											"begin": 4178,
											"end": 4188,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "tag",
											"source": 12,
											"value": "208"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4192,
											"end": 4201,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4203,
											"end": 4209,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4168,
											"end": 4177,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 4168,
											"end": 4210,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2091,
											"end": 2099,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2072,
											"end": 2087,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 2072,
											"end": 2099,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2072,
											"end": 2099,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "tag",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 2064,
											"end": 2133,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2162,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2232,
											"name": "PUSH",
											"source": 11,
											"value": "9A"
										},
										{
											"begin": 2216,
											"end": 2232,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2250,
											"end": 2255,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 2273,
											"end": 2280,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 2298,
											"end": 2303,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 2321,
											"end": 2328,
											"name": "PUSH",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2329,
											"end": 2334,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2321,
											"end": 2335,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 2321,
											"end": 2345,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2345,
											"name": "tag",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 2321,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2363,
											"end": 2371,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2385,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2165,
											"end": 2395,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2395,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2395,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2406,
											"end": 2418,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2421,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 2438,
											"end": 2448,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2421,
											"end": 2437,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 2421,
											"end": 2449,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2421,
											"end": 2449,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 2421,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2406,
											"end": 2449,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2406,
											"end": 2449,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2460,
											"end": 2474,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2477,
											"end": 2516,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 2502,
											"end": 2506,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2508,
											"end": 2509,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 2511,
											"end": 2512,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 2514,
											"end": 2515,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 2477,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 2477,
											"end": 2516,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2477,
											"end": 2516,
											"name": "tag",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 2477,
											"end": 2516,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2460,
											"end": 2516,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2460,
											"end": 2516,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2534,
											"end": 2549,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2534,
											"end": 2540,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2534,
											"end": 2549,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2534,
											"end": 2549,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 2526,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2602,
											"name": "PUSH",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2621,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 2595,
											"end": 2621,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2595,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 2595,
											"end": 2621,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2595,
											"end": 2621,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 2595,
											"end": 2621,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2631,
											"end": 2662,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 2647,
											"end": 2654,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 2656,
											"end": 2661,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 2631,
											"end": 2639,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "122"
										},
										{
											"begin": 2631,
											"end": 2662,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2631,
											"end": 2662,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 2631,
											"end": 2662,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 2669,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4385,
											"end": 4392,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4422,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 1560,
											"end": 1570,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "tag",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 1549,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "tag",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 1549,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1572,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "230"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "tag",
											"source": 1,
											"value": "230"
										},
										{
											"begin": 1541,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2351,
											"end": 2373,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2351,
											"end": 2373,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "tag",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2343,
											"end": 2416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2469,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2485,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2479,
											"end": 2496,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2263,
											"end": 2503,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 828,
											"end": 941,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 828,
											"end": 941,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 923,
											"end": 933,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 828,
											"end": 941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 828,
											"end": 941,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9795,
											"end": 9814,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9795,
											"end": 9814,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "tag",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9873,
											"end": 9894,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 9894,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "tag",
											"source": 12,
											"value": "241"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9955,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "244"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9974,
											"end": 9980,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9974,
											"end": 9980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "tag",
											"source": 12,
											"value": "244"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7370,
											"end": 7900,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 7370,
											"end": 7900,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7475,
											"end": 7495,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7475,
											"end": 7495,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "248"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "tag",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7555,
											"end": 7578,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7555,
											"end": 7578,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "tag",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "252"
										},
										{
											"begin": 7650,
											"end": 7656,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7658,
											"end": 7667,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7669,
											"end": 7675,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7629,
											"end": 7649,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "253"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "tag",
											"source": 12,
											"value": "252"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 7729,
											"end": 7735,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH data",
											"source": 12,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7716,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7728,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "tag",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7696,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7836,
											"end": 7842,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "tag",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7797,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "244"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7892,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7892,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "tag",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5536,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5576,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "tag",
											"source": 13,
											"value": "258"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "260"
										},
										{
											"begin": 5598,
											"end": 5599,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5594,
											"end": 5595,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "261"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "tag",
											"source": 13,
											"value": "260"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5587,
											"end": 5599,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2695,
											"end": 2855,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2695,
											"end": 2855,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2774,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 1459,
											"end": 1554,
											"name": "PUSH",
											"source": 9,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 2808,
											"end": 2825,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 2808,
											"end": 2823,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 2808,
											"end": 2825,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2808,
											"end": 2825,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 2808,
											"end": 2825,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 2827,
											"end": 2845,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 2827,
											"end": 2847,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2827,
											"end": 2847,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 2827,
											"end": 2847,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 2774,
											"end": 2848,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "tag",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2759,
											"end": 2766,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2766,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "270"
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2791,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "tag",
											"source": 13,
											"value": "270"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2778,
											"end": 2795,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2778,
											"end": 2795,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2814,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "272"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "274"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "tag",
											"source": 13,
											"value": "272"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2868,
											"end": 2869,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 8171,
											"end": 8541,
											"name": "tag",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 8171,
											"end": 8541,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8254,
											"end": 8275,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8254,
											"end": 8275,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "tag",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 8246,
											"end": 8311,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8322,
											"end": 8371,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 8351,
											"end": 8352,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8355,
											"end": 8362,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8364,
											"end": 8370,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8322,
											"end": 8342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "253"
										},
										{
											"begin": 8322,
											"end": 8371,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8322,
											"end": 8371,
											"name": "tag",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 8322,
											"end": 8371,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8397,
											"end": 8409,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 8397,
											"end": 8409,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8397,
											"end": 8421,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 8397,
											"end": 8421,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8414,
											"end": 8420,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8397,
											"end": 8413,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8397,
											"end": 8421,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8397,
											"end": 8421,
											"name": "tag",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 8397,
											"end": 8421,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8382,
											"end": 8394,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 8382,
											"end": 8421,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8461,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8470,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8482,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 8452,
											"end": 8482,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8475,
											"end": 8481,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8452,
											"end": 8474,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8452,
											"end": 8482,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8452,
											"end": 8482,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 8452,
											"end": 8482,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8440,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8482,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8482,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8482,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8482,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8431,
											"end": 8449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8527,
											"end": 8533,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8527,
											"end": 8533,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "tag",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 8171,
											"end": 8541,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8171,
											"end": 8541,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8171,
											"end": 8541,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8861,
											"end": 9271,
											"name": "tag",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 8861,
											"end": 9271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8944,
											"end": 8965,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8944,
											"end": 8965,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "tag",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 8936,
											"end": 9003,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9014,
											"end": 9063,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 9035,
											"end": 9042,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9052,
											"end": 9053,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9056,
											"end": 9062,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9014,
											"end": 9034,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "253"
										},
										{
											"begin": 9014,
											"end": 9063,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9014,
											"end": 9063,
											"name": "tag",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 9014,
											"end": 9063,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 9118,
											"end": 9124,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH data",
											"source": 12,
											"value": "149B126E7125232B4200AF45303D04FBA8B74653B1A295A6A561A528C33FEFDD"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9104,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9113,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9095,
											"end": 9117,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "131"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "tag",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 9095,
											"end": 9163,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9083,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9092,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9074,
											"end": 9163,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9188,
											"end": 9200,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 9188,
											"end": 9200,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9188,
											"end": 9212,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 9188,
											"end": 9212,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9205,
											"end": 9211,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9188,
											"end": 9204,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 9188,
											"end": 9212,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9188,
											"end": 9212,
											"name": "tag",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 9188,
											"end": 9212,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9173,
											"end": 9185,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 9173,
											"end": 9212,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9253,
											"end": 9254,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9253,
											"end": 9254,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9257,
											"end": 9263,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9257,
											"end": 9263,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 9227,
											"end": 9264,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2000,
											"end": 2004,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 2062,
											"end": 2066,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 2024,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "294"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "tag",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2023,
											"end": 2068,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 759,
											"end": 823,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 759,
											"end": 823,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1794,
											"end": 1808,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 759,
											"end": 823,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 759,
											"end": 823,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "tag",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "306"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "306"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "306"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "308"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "308"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "310"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "310"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2376,
											"name": "PUSH",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 2371,
											"end": 2376,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "tag",
											"source": 12,
											"value": "312"
										},
										{
											"begin": 2371,
											"end": 2384,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2401,
											"name": "PUSH",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 2394,
											"end": 2401,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "tag",
											"source": 12,
											"value": "314"
										},
										{
											"begin": 2394,
											"end": 2411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2421,
											"end": 2430,
											"name": "PUSH",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2433,
											"end": 2435,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2421,
											"end": 2435,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2264,
											"end": 2442,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1387,
											"end": 1587,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1387,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1466,
											"end": 1492,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 1466,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "169"
										},
										{
											"begin": 1466,
											"end": 1492,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1466,
											"end": 1492,
											"name": "tag",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 1466,
											"end": 1492,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "31"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1525,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "tag",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 1502,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1546,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 1575,
											"end": 1579,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1546,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 1546,
											"end": 1580,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1546,
											"end": 1580,
											"name": "tag",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 1546,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1794,
											"end": 1808,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1387,
											"end": 1587,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1387,
											"end": 1587,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1387,
											"end": 1587,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1069,
											"end": 1261,
											"name": "tag",
											"source": 1,
											"value": "175"
										},
										{
											"begin": 1069,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "332"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "332"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "332"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1136,
											"end": 1153,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1156,
											"end": 1168,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "338"
										},
										{
											"begin": 1156,
											"end": 1166,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 1156,
											"end": 1168,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1156,
											"end": 1168,
											"name": "tag",
											"source": 1,
											"value": "338"
										},
										{
											"begin": 1156,
											"end": 1168,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1184,
											"name": "PUSH",
											"source": 1,
											"value": "FE"
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1211,
											"end": 1254,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1211,
											"end": 1254,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1178,
											"end": 1196,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 1211,
											"end": 1254,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1211,
											"end": 1254,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 1211,
											"end": 1254,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 1778,
											"end": 1779,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1794,
											"end": 1808,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1069,
											"end": 1261,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1069,
											"end": 1261,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1133,
											"end": 1245,
											"name": "tag",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 1133,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1224,
											"end": 1238,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1224,
											"end": 1238,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1245,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3890,
											"end": 3897,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3955,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "342"
										},
										{
											"begin": 3955,
											"end": 3973,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3955,
											"end": 3975,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3955,
											"end": 3975,
											"name": "tag",
											"source": 9,
											"value": "342"
										},
										{
											"begin": 3955,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3977,
											"end": 3987,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "343"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "344"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "tag",
											"source": 9,
											"value": "343"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3926,
											"end": 3988,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3916,
											"end": 3989,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3909,
											"end": 3989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3909,
											"end": 3989,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3813,
											"end": 3996,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1971,
											"end": 3385,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 1971,
											"end": 3385,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2056,
											"end": 2063,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2971,
											"end": 3037,
											"name": "PUSH",
											"source": 8,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 2957,
											"end": 3037,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2957,
											"end": 3037,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2957,
											"end": 3037,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "tag",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 2949,
											"end": 3076,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3095,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3101,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 3094,
											"end": 3101,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3099,
											"end": 3101,
											"name": "PUSH",
											"source": 8,
											"value": "1B"
										},
										{
											"begin": 3094,
											"end": 3101,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3105,
											"end": 3106,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3105,
											"end": 3112,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 3105,
											"end": 3112,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3110,
											"end": 3112,
											"name": "PUSH",
											"source": 8,
											"value": "1C"
										},
										{
											"begin": 3105,
											"end": 3112,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "tag",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 3094,
											"end": 3112,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "tag",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 3086,
											"end": 3151,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3246,
											"end": 3260,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3273,
											"end": 3277,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3280,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3282,
											"end": 3283,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3285,
											"end": 3286,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "tag",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "tag",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3287,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3305,
											"end": 3325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3305,
											"end": 3325,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "tag",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 3297,
											"end": 3354,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3372,
											"end": 3378,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 1971,
											"end": 3385,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 3385,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1251,
											"end": 1429,
											"name": "tag",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 1251,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1421,
											"end": 1422,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 1410,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1417,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 1417,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1417,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "tag",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1403,
											"end": 1422,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1251,
											"end": 1429,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1948,
											"end": 2227,
											"name": "tag",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 1948,
											"end": 2227,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2104,
											"end": 2148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 2131,
											"end": 2135,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2137,
											"end": 2139,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2104,
											"end": 2130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2104,
											"end": 2148,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2104,
											"end": 2148,
											"name": "tag",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 2104,
											"end": 2148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2166,
											"end": 2185,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2166,
											"end": 2185,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2180,
											"end": 2184,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2166,
											"end": 2185,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2166,
											"end": 2185,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "367"
										},
										{
											"begin": 2158,
											"end": 2220,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4558,
											"end": 4661,
											"name": "tag",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 4558,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4642,
											"end": 4654,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 4642,
											"end": 4654,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4558,
											"end": 4661,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4558,
											"end": 4661,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4900,
											"end": 5009,
											"name": "tag",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 4900,
											"end": 5009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4987,
											"end": 5002,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 4987,
											"end": 5002,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4900,
											"end": 5009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4900,
											"end": 5009,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2963,
											"end": 2970,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3040,
											"end": 3048,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3066,
											"end": 3070,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3088,
											"end": 3095,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3113,
											"end": 3126,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 3113,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 3113,
											"end": 3126,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3113,
											"end": 3126,
											"name": "tag",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 3113,
											"end": 3126,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3152,
											"end": 3156,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "tag",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3012,
											"end": 3171,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2989,
											"end": 3181,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3181,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2982,
											"end": 3181,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2861,
											"end": 3188,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3147,
											"end": 3302,
											"name": "tag",
											"source": 13,
											"value": "290"
										},
										{
											"begin": 3147,
											"end": 3302,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3205,
											"end": 3212,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3237,
											"end": 3238,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3232,
											"end": 3233,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3232,
											"end": 3238,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3232,
											"end": 3238,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "376"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "378"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "tag",
											"source": 13,
											"value": "376"
										},
										{
											"begin": 3224,
											"end": 3273,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3290,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "272"
										},
										{
											"begin": 3294,
											"end": 3295,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3290,
											"end": 3291,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3290,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "261"
										},
										{
											"begin": 3290,
											"end": 3295,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "tag",
											"source": 15,
											"value": "294"
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1097,
											"end": 1117,
											"name": "EXTCODESIZE",
											"source": 15
										},
										{
											"begin": 1135,
											"end": 1143,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 1135,
											"end": 1143,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 1135,
											"end": 1143,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "tag",
											"source": 9,
											"value": "326"
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "383"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "383"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "383"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "384"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "384"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "385"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "385"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2445,
											"end": 2467,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2526,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2536,
											"end": 2548,
											"name": "PUSH",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2536,
											"end": 2561,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2536,
											"end": 2561,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2536,
											"end": 2561,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2536,
											"end": 2561,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2571,
											"end": 2586,
											"name": "PUSH",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 2571,
											"end": 2602,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2317,
											"end": 2609,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1593,
											"end": 1803,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 1593,
											"end": 1803,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "394"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 14,
											"value": "394"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "396"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 14,
											"value": "396"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1701,
											"end": 1796,
											"name": "PUSH",
											"source": 11,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 1682,
											"end": 1698,
											"name": "PUSH",
											"source": 11,
											"value": "9A"
										},
										{
											"begin": 1682,
											"end": 1796,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 1593,
											"end": 1803,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1803,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1803,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4002,
											"end": 4322,
											"name": "tag",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 4002,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4297,
											"end": 4306,
											"name": "CHAINID",
											"source": 9
										},
										{
											"begin": 4297,
											"end": 4306,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4272,
											"end": 4316,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "313"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "401"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "113"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "401"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "403"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "403"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "404"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "404"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "405"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "405"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "407"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "408"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "407"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "408"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "407"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 194,
											"end": 907,
											"name": "tag",
											"source": 16,
											"value": "415"
										},
										{
											"begin": 194,
											"end": 907,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 194,
											"end": 907,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 292,
											"end": 295,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 285,
											"end": 289,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 277,
											"end": 283,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 273,
											"end": 290,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 269,
											"end": 296,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 259,
											"end": 261,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 259,
											"end": 261,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 314,
											"end": 319,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 307,
											"end": 312,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 300,
											"end": 320,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 259,
											"end": 261,
											"name": "tag",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 259,
											"end": 261,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 354,
											"end": 360,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 341,
											"end": 361,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 380,
											"end": 398,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 417,
											"end": 419,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 413,
											"end": 415,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 410,
											"end": 420,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 407,
											"end": 409,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 407,
											"end": 409,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 407,
											"end": 409,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 423,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 423,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 423,
											"end": 441,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 423,
											"end": 441,
											"name": "tag",
											"source": 16,
											"value": "419"
										},
										{
											"begin": 423,
											"end": 441,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 472,
											"end": 474,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 466,
											"end": 475,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 541,
											"end": 543,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 522,
											"end": 535,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 522,
											"end": 535,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 518,
											"end": 545,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 506,
											"end": 546,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 506,
											"end": 546,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 548,
											"end": 552,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 553,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 568,
											"end": 586,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 568,
											"end": 586,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 568,
											"end": 586,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 588,
											"end": 610,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 588,
											"end": 610,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 588,
											"end": 610,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 565,
											"end": 611,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 562,
											"end": 564,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 562,
											"end": 564,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 562,
											"end": 564,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 614,
											"end": 632,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 614,
											"end": 632,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 614,
											"end": 632,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 614,
											"end": 632,
											"name": "tag",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 614,
											"end": 632,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 650,
											"end": 652,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 643,
											"end": 665,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 674,
											"end": 692,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 674,
											"end": 692,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 674,
											"end": 692,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 711,
											"end": 726,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 711,
											"end": 726,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 711,
											"end": 726,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 728,
											"end": 732,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 707,
											"end": 733,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 704,
											"end": 739,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 701,
											"end": 703,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 701,
											"end": 703,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 701,
											"end": 703,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 756,
											"end": 761,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 749,
											"end": 754,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 742,
											"end": 762,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 701,
											"end": 703,
											"name": "tag",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 701,
											"end": 703,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 824,
											"end": 826,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 817,
											"end": 821,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 809,
											"end": 815,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 805,
											"end": 822,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 798,
											"end": 802,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 790,
											"end": 796,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 786,
											"end": 803,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 773,
											"end": 827,
											"name": "CALLDATACOPY",
											"source": 16
										},
										{
											"begin": 847,
											"end": 862,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 847,
											"end": 862,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 847,
											"end": 862,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 864,
											"end": 868,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 843,
											"end": 869,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 836,
											"end": 877,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 836,
											"end": 877,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 836,
											"end": 877,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 836,
											"end": 877,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 851,
											"end": 857,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 249,
											"end": 907,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 249,
											"end": 907,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 912,
											"end": 1110,
											"name": "tag",
											"source": 16,
											"value": "72"
										},
										{
											"begin": 912,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 912,
											"end": 1110,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1024,
											"end": 1026,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1021,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1003,
											"end": 1010,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 999,
											"end": 1022,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 995,
											"end": 1027,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 992,
											"end": 994,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 992,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 992,
											"end": 994,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1045,
											"end": 1051,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1037,
											"end": 1043,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1030,
											"end": 1052,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 992,
											"end": 994,
											"name": "tag",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 992,
											"end": 994,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1073,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 1094,
											"end": 1103,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1073,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1073,
											"end": 1104,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1115,
											"end": 1389,
											"name": "tag",
											"source": 16,
											"value": "105"
										},
										{
											"begin": 1115,
											"end": 1389,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1115,
											"end": 1389,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1115,
											"end": 1389,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1244,
											"end": 1246,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1232,
											"end": 1241,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1223,
											"end": 1230,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1219,
											"end": 1242,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1215,
											"end": 1247,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1257,
											"end": 1263,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1250,
											"end": 1272,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "tag",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 1314,
											"end": 1323,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "tag",
											"source": 16,
											"value": "429"
										},
										{
											"begin": 1293,
											"end": 1324,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1283,
											"end": 1324,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1283,
											"end": 1324,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1343,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1368,
											"end": 1377,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1343,
											"end": 1383,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1343,
											"end": 1383,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1343,
											"end": 1383,
											"name": "tag",
											"source": 16,
											"value": "430"
										},
										{
											"begin": 1343,
											"end": 1383,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1333,
											"end": 1383,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1333,
											"end": 1383,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1394,
											"end": 1736,
											"name": "tag",
											"source": 16,
											"value": "43"
										},
										{
											"begin": 1394,
											"end": 1736,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1394,
											"end": 1736,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1394,
											"end": 1736,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1394,
											"end": 1736,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1540,
											"end": 1542,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1528,
											"end": 1537,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1519,
											"end": 1526,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 1515,
											"end": 1538,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1511,
											"end": 1543,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1508,
											"end": 1510,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1508,
											"end": 1510,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 1508,
											"end": 1510,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1561,
											"end": 1567,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1553,
											"end": 1559,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1546,
											"end": 1568,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1508,
											"end": 1510,
											"name": "tag",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 1508,
											"end": 1510,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1589,
											"end": 1620,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "433"
										},
										{
											"begin": 1610,
											"end": 1619,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1589,
											"end": 1620,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1589,
											"end": 1620,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1620,
											"name": "tag",
											"source": 16,
											"value": "433"
										},
										{
											"begin": 1589,
											"end": 1620,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1579,
											"end": 1620,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1579,
											"end": 1620,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1639,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 1675,
											"end": 1677,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1664,
											"end": 1673,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1660,
											"end": 1678,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1639,
											"end": 1679,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 1639,
											"end": 1679,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1639,
											"end": 1679,
											"name": "tag",
											"source": 16,
											"value": "434"
										},
										{
											"begin": 1639,
											"end": 1679,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1629,
											"end": 1679,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1629,
											"end": 1679,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1715,
											"end": 1724,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1698,
											"end": 1730,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1688,
											"end": 1730,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1688,
											"end": 1730,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1498,
											"end": 1736,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "tag",
											"source": 16,
											"value": "101"
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1741,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1953,
											"end": 1956,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 1941,
											"end": 1950,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 1932,
											"end": 1939,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 1928,
											"end": 1951,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1924,
											"end": 1957,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1975,
											"end": 1981,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1967,
											"end": 1973,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1960,
											"end": 1982,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "tag",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2003,
											"end": 2034,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 2024,
											"end": 2033,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2003,
											"end": 2034,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 2003,
											"end": 2034,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2003,
											"end": 2034,
											"name": "tag",
											"source": 16,
											"value": "437"
										},
										{
											"begin": 2003,
											"end": 2034,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1993,
											"end": 2034,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 1993,
											"end": 2034,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2053,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "438"
										},
										{
											"begin": 2089,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2078,
											"end": 2087,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 2074,
											"end": 2092,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2053,
											"end": 2093,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 2053,
											"end": 2093,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2093,
											"name": "tag",
											"source": 16,
											"value": "438"
										},
										{
											"begin": 2053,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2043,
											"end": 2093,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 2043,
											"end": 2093,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2140,
											"end": 2142,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2129,
											"end": 2138,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2125,
											"end": 2143,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2112,
											"end": 2144,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2102,
											"end": 2144,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 2102,
											"end": 2144,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2191,
											"end": 2193,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2180,
											"end": 2189,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2176,
											"end": 2194,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2163,
											"end": 2195,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2153,
											"end": 2195,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2153,
											"end": 2195,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2245,
											"end": 2248,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2234,
											"end": 2243,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2230,
											"end": 2249,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2217,
											"end": 2250,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2290,
											"end": 2294,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 2283,
											"end": 2288,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2279,
											"end": 2295,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2272,
											"end": 2277,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2269,
											"end": 2296,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 2259,
											"end": 2261,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "439"
										},
										{
											"begin": 2259,
											"end": 2261,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2315,
											"end": 2321,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2307,
											"end": 2313,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2300,
											"end": 2322,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2259,
											"end": 2261,
											"name": "tag",
											"source": 16,
											"value": "439"
										},
										{
											"begin": 2259,
											"end": 2261,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 2343,
											"end": 2348,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 2395,
											"end": 2398,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 2380,
											"end": 2399,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2380,
											"end": 2399,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2367,
											"end": 2400,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2447,
											"end": 2450,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 2432,
											"end": 2451,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2432,
											"end": 2451,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2432,
											"end": 2451,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2419,
											"end": 2452,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2419,
											"end": 2452,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1911,
											"end": 2458,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2463,
											"end": 2729,
											"name": "tag",
											"source": 16,
											"value": "33"
										},
										{
											"begin": 2463,
											"end": 2729,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2463,
											"end": 2729,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2729,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2592,
											"end": 2594,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2580,
											"end": 2589,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2571,
											"end": 2578,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2567,
											"end": 2590,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2563,
											"end": 2595,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 2560,
											"end": 2562,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2560,
											"end": 2562,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 2560,
											"end": 2562,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2613,
											"end": 2619,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2605,
											"end": 2611,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2598,
											"end": 2620,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2560,
											"end": 2562,
											"name": "tag",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 2560,
											"end": 2562,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2641,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 2662,
											"end": 2671,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2641,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "412"
										},
										{
											"begin": 2641,
											"end": 2672,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2641,
											"end": 2672,
											"name": "tag",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 2641,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2631,
											"end": 2672,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 2719,
											"end": 2721,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2704,
											"end": 2722,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2704,
											"end": 2722,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2704,
											"end": 2722,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2704,
											"end": 2722,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2691,
											"end": 2723,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2691,
											"end": 2723,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2550,
											"end": 2729,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2734,
											"end": 3311,
											"name": "tag",
											"source": 16,
											"value": "67"
										},
										{
											"begin": 2734,
											"end": 3311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2734,
											"end": 3311,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2734,
											"end": 3311,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2883,
											"end": 2885,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2871,
											"end": 2880,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2862,
											"end": 2869,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2858,
											"end": 2881,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2854,
											"end": 2886,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 2851,
											"end": 2853,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2851,
											"end": 2853,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "444"
										},
										{
											"begin": 2851,
											"end": 2853,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2904,
											"end": 2910,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2896,
											"end": 2902,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2889,
											"end": 2911,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2851,
											"end": 2853,
											"name": "tag",
											"source": 16,
											"value": "444"
										},
										{
											"begin": 2851,
											"end": 2853,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2949,
											"end": 2958,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2936,
											"end": 2959,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2978,
											"end": 2996,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3019,
											"end": 3021,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3011,
											"end": 3017,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3008,
											"end": 3022,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3040,
											"end": 3046,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3032,
											"end": 3038,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3025,
											"end": 3047,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "tag",
											"source": 16,
											"value": "445"
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3068,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "446"
										},
										{
											"begin": 3112,
											"end": 3119,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3103,
											"end": 3109,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3092,
											"end": 3101,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 3088,
											"end": 3110,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3068,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "415"
										},
										{
											"begin": 3068,
											"end": 3120,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3068,
											"end": 3120,
											"name": "tag",
											"source": 16,
											"value": "446"
										},
										{
											"begin": 3068,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3058,
											"end": 3120,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 3058,
											"end": 3120,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3173,
											"end": 3175,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3162,
											"end": 3171,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 3158,
											"end": 3176,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3145,
											"end": 3177,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 3129,
											"end": 3177,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3129,
											"end": 3177,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3202,
											"end": 3204,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3192,
											"end": 3200,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3189,
											"end": 3205,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "447"
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3223,
											"end": 3229,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3215,
											"end": 3221,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3208,
											"end": 3230,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "tag",
											"source": 16,
											"value": "447"
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3251,
											"end": 3305,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "448"
										},
										{
											"begin": 3297,
											"end": 3304,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 3286,
											"end": 3294,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3275,
											"end": 3284,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3271,
											"end": 3295,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3251,
											"end": 3305,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "415"
										},
										{
											"begin": 3251,
											"end": 3305,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3251,
											"end": 3305,
											"name": "tag",
											"source": 16,
											"value": "448"
										},
										{
											"begin": 3251,
											"end": 3305,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3305,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3305,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3241,
											"end": 3305,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2841,
											"end": 3311,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 3316,
											"end": 3506,
											"name": "tag",
											"source": 16,
											"value": "63"
										},
										{
											"begin": 3316,
											"end": 3506,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3316,
											"end": 3506,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3428,
											"end": 3430,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3416,
											"end": 3425,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3407,
											"end": 3414,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3403,
											"end": 3426,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3399,
											"end": 3431,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 3396,
											"end": 3398,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3396,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "450"
										},
										{
											"begin": 3396,
											"end": 3398,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3449,
											"end": 3455,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3441,
											"end": 3447,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3434,
											"end": 3456,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3396,
											"end": 3398,
											"name": "tag",
											"source": 16,
											"value": "450"
										},
										{
											"begin": 3396,
											"end": 3398,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3477,
											"end": 3500,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 3477,
											"end": 3500,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 3386,
											"end": 3506,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3386,
											"end": 3506,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 3511,
											"end": 3903,
											"name": "tag",
											"source": 16,
											"value": "344"
										},
										{
											"begin": 3511,
											"end": 3903,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3769,
											"end": 3796,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3769,
											"end": 3796,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3821,
											"end": 3822,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 3812,
											"end": 3823,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3812,
											"end": 3823,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3832,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3832,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3832,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3832,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3857,
											"end": 3859,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 3848,
											"end": 3860,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3848,
											"end": 3860,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3841,
											"end": 3869,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3894,
											"end": 3896,
											"name": "PUSH",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 3885,
											"end": 3897,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3885,
											"end": 3897,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3759,
											"end": 3903,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 3908,
											"end": 4111,
											"name": "tag",
											"source": 16,
											"value": "87"
										},
										{
											"begin": 3908,
											"end": 4111,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4072,
											"end": 4104,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4072,
											"end": 4104,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4072,
											"end": 4104,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4072,
											"end": 4104,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4054,
											"end": 4105,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4054,
											"end": 4105,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4042,
											"end": 4044,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4027,
											"end": 4045,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4027,
											"end": 4045,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4009,
											"end": 4111,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4116,
											"end": 4303,
											"name": "tag",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 4116,
											"end": 4303,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4281,
											"end": 4295,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4281,
											"end": 4295,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4274,
											"end": 4296,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4256,
											"end": 4297,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4256,
											"end": 4297,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4244,
											"end": 4246,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4247,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4229,
											"end": 4247,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4211,
											"end": 4303,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4308,
											"end": 4485,
											"name": "tag",
											"source": 16,
											"value": "53"
										},
										{
											"begin": 4308,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4454,
											"end": 4479,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4454,
											"end": 4479,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4454,
											"end": 4479,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4442,
											"end": 4444,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4427,
											"end": 4445,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4427,
											"end": 4445,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4409,
											"end": 4485,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4490,
											"end": 5081,
											"name": "tag",
											"source": 16,
											"value": "215"
										},
										{
											"begin": 4490,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4777,
											"end": 4802,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 4777,
											"end": 4802,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4777,
											"end": 4802,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4876,
											"end": 4891,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 4876,
											"end": 4891,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 4876,
											"end": 4891,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4871,
											"end": 4873,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4856,
											"end": 4874,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 4856,
											"end": 4874,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4849,
											"end": 4892,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4928,
											"end": 4943,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4928,
											"end": 4943,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4928,
											"end": 4943,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 4928,
											"end": 4943,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4923,
											"end": 4925,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4901,
											"end": 4944,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4975,
											"end": 4977,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 4960,
											"end": 4978,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4960,
											"end": 4978,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4953,
											"end": 4987,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5018,
											"end": 5021,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 5003,
											"end": 5022,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5003,
											"end": 5022,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4996,
											"end": 5031,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4996,
											"end": 5031,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4996,
											"end": 5031,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4996,
											"end": 5031,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4829,
											"end": 4832,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 5047,
											"end": 5066,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5047,
											"end": 5066,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5040,
											"end": 5075,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4764,
											"end": 4767,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 4749,
											"end": 4768,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4749,
											"end": 4768,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4731,
											"end": 5081,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 5086,
											"end": 5575,
											"name": "tag",
											"source": 16,
											"value": "374"
										},
										{
											"begin": 5086,
											"end": 5575,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5345,
											"end": 5370,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5345,
											"end": 5370,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5345,
											"end": 5370,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5401,
											"end": 5403,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5444,
											"end": 5446,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5429,
											"end": 5447,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 5429,
											"end": 5447,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5422,
											"end": 5456,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5422,
											"end": 5456,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5422,
											"end": 5456,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5422,
											"end": 5456,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5487,
											"end": 5489,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5472,
											"end": 5490,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5472,
											"end": 5490,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5465,
											"end": 5499,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5536,
											"end": 5568,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5530,
											"end": 5533,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 5515,
											"end": 5534,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5515,
											"end": 5534,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5508,
											"end": 5569,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5332,
											"end": 5335,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 5317,
											"end": 5336,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5317,
											"end": 5336,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5299,
											"end": 5575,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 5580,
											"end": 5978,
											"name": "tag",
											"source": 16,
											"value": "354"
										},
										{
											"begin": 5580,
											"end": 5978,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5807,
											"end": 5832,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5807,
											"end": 5832,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 5807,
											"end": 5832,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5880,
											"end": 5884,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 5868,
											"end": 5885,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5868,
											"end": 5885,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5868,
											"end": 5885,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5868,
											"end": 5885,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5863,
											"end": 5865,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5848,
											"end": 5866,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 5848,
											"end": 5866,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5841,
											"end": 5886,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5917,
											"end": 5919,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5902,
											"end": 5920,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5902,
											"end": 5920,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5895,
											"end": 5929,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5960,
											"end": 5962,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5945,
											"end": 5963,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5945,
											"end": 5963,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5938,
											"end": 5972,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5794,
											"end": 5797,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 5761,
											"end": 5978,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 5983,
											"end": 6586,
											"name": "tag",
											"source": 16,
											"value": "30"
										},
										{
											"begin": 5983,
											"end": 6586,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5983,
											"end": 6586,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6124,
											"end": 6126,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6153,
											"end": 6155,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6142,
											"end": 6151,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6135,
											"end": 6156,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6185,
											"end": 6191,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6179,
											"end": 6192,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6223,
											"end": 6225,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6212,
											"end": 6221,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6208,
											"end": 6226,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6201,
											"end": 6235,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6253,
											"end": 6257,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "tag",
											"source": 16,
											"value": "459"
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6280,
											"end": 6286,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6277,
											"end": 6278,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6274,
											"end": 6287,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "461"
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6375,
											"end": 6389,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6375,
											"end": 6389,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6375,
											"end": 6389,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6371,
											"end": 6394,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6371,
											"end": 6394,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6395,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6341,
											"end": 6358,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6341,
											"end": 6358,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6341,
											"end": 6358,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6360,
											"end": 6362,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6337,
											"end": 6363,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6330,
											"end": 6396,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6295,
											"end": 6305,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6295,
											"end": 6305,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "459"
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "tag",
											"source": 16,
											"value": "461"
										},
										{
											"begin": 6266,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6424,
											"end": 6430,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6421,
											"end": 6422,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6418,
											"end": 6431,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "462"
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6494,
											"end": 6498,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6489,
											"end": 6491,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6480,
											"end": 6486,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6469,
											"end": 6478,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6465,
											"end": 6487,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6461,
											"end": 6492,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6454,
											"end": 6499,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "tag",
											"source": 16,
											"value": "462"
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6570,
											"end": 6572,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 6549,
											"end": 6564,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6545,
											"end": 6574,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6530,
											"end": 6575,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6530,
											"end": 6575,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6530,
											"end": 6575,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6530,
											"end": 6575,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6577,
											"end": 6579,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6526,
											"end": 6580,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6526,
											"end": 6580,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6104,
											"end": 6586,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6104,
											"end": 6586,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 6591,
											"end": 6939,
											"name": "tag",
											"source": 16,
											"value": "359"
										},
										{
											"begin": 6591,
											"end": 6939,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6793,
											"end": 6795,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6775,
											"end": 6796,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6775,
											"end": 6796,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6775,
											"end": 6796,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6832,
											"end": 6834,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 6812,
											"end": 6830,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6812,
											"end": 6830,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6812,
											"end": 6830,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6805,
											"end": 6835,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6871,
											"end": 6897,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 6866,
											"end": 6868,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6851,
											"end": 6869,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6851,
											"end": 6869,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6844,
											"end": 6898,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6930,
											"end": 6932,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 6915,
											"end": 6933,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6915,
											"end": 6933,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6765,
											"end": 6939,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 6944,
											"end": 7343,
											"name": "tag",
											"source": 16,
											"value": "251"
										},
										{
											"begin": 6944,
											"end": 7343,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7146,
											"end": 7148,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7128,
											"end": 7149,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7128,
											"end": 7149,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7128,
											"end": 7149,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7185,
											"end": 7187,
											"name": "PUSH",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7158,
											"end": 7188,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7224,
											"end": 7258,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 7219,
											"end": 7221,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7204,
											"end": 7222,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7204,
											"end": 7222,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7197,
											"end": 7259,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7290,
											"end": 7292,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 7275,
											"end": 7293,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7275,
											"end": 7293,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7268,
											"end": 7301,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7333,
											"end": 7336,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 7318,
											"end": 7337,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7318,
											"end": 7337,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7118,
											"end": 7343,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 7348,
											"end": 7750,
											"name": "tag",
											"source": 16,
											"value": "235"
										},
										{
											"begin": 7348,
											"end": 7750,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7552,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7532,
											"end": 7553,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7532,
											"end": 7553,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7532,
											"end": 7553,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7589,
											"end": 7591,
											"name": "PUSH",
											"source": 16,
											"value": "26"
										},
										{
											"begin": 7569,
											"end": 7587,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7569,
											"end": 7587,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7569,
											"end": 7587,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7562,
											"end": 7592,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7628,
											"end": 7662,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 7623,
											"end": 7625,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7608,
											"end": 7626,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7608,
											"end": 7626,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7601,
											"end": 7663,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7694,
											"end": 7696,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 7679,
											"end": 7697,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7697,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7672,
											"end": 7708,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7740,
											"end": 7743,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 7725,
											"end": 7744,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7725,
											"end": 7744,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7522,
											"end": 7750,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 7755,
											"end": 8153,
											"name": "tag",
											"source": 16,
											"value": "243"
										},
										{
											"begin": 7755,
											"end": 8153,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7957,
											"end": 7959,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7939,
											"end": 7960,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7939,
											"end": 7960,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7939,
											"end": 7960,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7996,
											"end": 7998,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7969,
											"end": 7999,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8035,
											"end": 8069,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 8030,
											"end": 8032,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8015,
											"end": 8033,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8015,
											"end": 8033,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8008,
											"end": 8070,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8101,
											"end": 8103,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8086,
											"end": 8104,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8086,
											"end": 8104,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8079,
											"end": 8111,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8143,
											"end": 8146,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 8128,
											"end": 8147,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8128,
											"end": 8147,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7929,
											"end": 8153,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 8158,
											"end": 8509,
											"name": "tag",
											"source": 16,
											"value": "274"
										},
										{
											"begin": 8158,
											"end": 8509,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8360,
											"end": 8362,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8342,
											"end": 8363,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8342,
											"end": 8363,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8342,
											"end": 8363,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8399,
											"end": 8401,
											"name": "PUSH",
											"source": 16,
											"value": "1B"
										},
										{
											"begin": 8379,
											"end": 8397,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8379,
											"end": 8397,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8379,
											"end": 8397,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8372,
											"end": 8402,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8438,
											"end": 8467,
											"name": "PUSH",
											"source": 16,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 8433,
											"end": 8435,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8418,
											"end": 8436,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8418,
											"end": 8436,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8411,
											"end": 8468,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8500,
											"end": 8502,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8485,
											"end": 8503,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8485,
											"end": 8503,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8332,
											"end": 8509,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 8514,
											"end": 8867,
											"name": "tag",
											"source": 16,
											"value": "212"
										},
										{
											"begin": 8514,
											"end": 8867,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8716,
											"end": 8718,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8698,
											"end": 8719,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8698,
											"end": 8719,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8698,
											"end": 8719,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8755,
											"end": 8757,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 8735,
											"end": 8753,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8735,
											"end": 8753,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8735,
											"end": 8753,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8728,
											"end": 8758,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8794,
											"end": 8825,
											"name": "PUSH",
											"source": 16,
											"value": "45524332305065726D69743A206578706972656420646561646C696E65000000"
										},
										{
											"begin": 8789,
											"end": 8791,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8767,
											"end": 8826,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8858,
											"end": 8860,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8688,
											"end": 8867,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 8872,
											"end": 9226,
											"name": "tag",
											"source": 16,
											"value": "378"
										},
										{
											"begin": 8872,
											"end": 9226,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9074,
											"end": 9076,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9056,
											"end": 9077,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9056,
											"end": 9077,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9056,
											"end": 9077,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9113,
											"end": 9115,
											"name": "PUSH",
											"source": 16,
											"value": "1E"
										},
										{
											"begin": 9093,
											"end": 9111,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9093,
											"end": 9111,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9093,
											"end": 9111,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9086,
											"end": 9116,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9152,
											"end": 9184,
											"name": "PUSH",
											"source": 16,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 9147,
											"end": 9149,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9132,
											"end": 9150,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9132,
											"end": 9150,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9125,
											"end": 9185,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9217,
											"end": 9219,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 9202,
											"end": 9220,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9202,
											"end": 9220,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9046,
											"end": 9226,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 9231,
											"end": 9629,
											"name": "tag",
											"source": 16,
											"value": "348"
										},
										{
											"begin": 9231,
											"end": 9629,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9433,
											"end": 9435,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9415,
											"end": 9436,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9415,
											"end": 9436,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9415,
											"end": 9436,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9472,
											"end": 9474,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 9452,
											"end": 9470,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9452,
											"end": 9470,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9452,
											"end": 9470,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9445,
											"end": 9475,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9511,
											"end": 9545,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 9506,
											"end": 9508,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9491,
											"end": 9509,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9491,
											"end": 9509,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9484,
											"end": 9546,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9577,
											"end": 9579,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 9562,
											"end": 9580,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9562,
											"end": 9580,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9555,
											"end": 9587,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9619,
											"end": 9622,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 9604,
											"end": 9623,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9604,
											"end": 9623,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9405,
											"end": 9629,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 9634,
											"end": 10044,
											"name": "tag",
											"source": 16,
											"value": "165"
										},
										{
											"begin": 9634,
											"end": 10044,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9836,
											"end": 9838,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9818,
											"end": 9839,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9818,
											"end": 9839,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9818,
											"end": 9839,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9875,
											"end": 9877,
											"name": "PUSH",
											"source": 16,
											"value": "2E"
										},
										{
											"begin": 9855,
											"end": 9873,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9855,
											"end": 9873,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9855,
											"end": 9873,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9848,
											"end": 9878,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9914,
											"end": 9948,
											"name": "PUSH",
											"source": 16,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 9909,
											"end": 9911,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9894,
											"end": 9912,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9894,
											"end": 9912,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9887,
											"end": 9949,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9980,
											"end": 9982,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9965,
											"end": 9983,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9958,
											"end": 10002,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10034,
											"end": 10037,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 10019,
											"end": 10038,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10019,
											"end": 10038,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9808,
											"end": 10044,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 10049,
											"end": 10447,
											"name": "tag",
											"source": 16,
											"value": "352"
										},
										{
											"begin": 10049,
											"end": 10447,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10251,
											"end": 10253,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10233,
											"end": 10254,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10233,
											"end": 10254,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10233,
											"end": 10254,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10290,
											"end": 10292,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 10270,
											"end": 10288,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10270,
											"end": 10288,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10270,
											"end": 10288,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10263,
											"end": 10293,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10329,
											"end": 10363,
											"name": "PUSH",
											"source": 16,
											"value": "45434453413A20696E76616C6964207369676E6174757265202776272076616C"
										},
										{
											"begin": 10324,
											"end": 10326,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 10309,
											"end": 10327,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10309,
											"end": 10327,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10302,
											"end": 10364,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10395,
											"end": 10397,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 10380,
											"end": 10398,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10380,
											"end": 10398,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10373,
											"end": 10405,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10437,
											"end": 10440,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 10422,
											"end": 10441,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10422,
											"end": 10441,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10223,
											"end": 10447,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 10452,
											"end": 10806,
											"name": "tag",
											"source": 16,
											"value": "222"
										},
										{
											"begin": 10452,
											"end": 10806,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10654,
											"end": 10656,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10636,
											"end": 10657,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10693,
											"end": 10695,
											"name": "PUSH",
											"source": 16,
											"value": "1E"
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10673,
											"end": 10691,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10666,
											"end": 10696,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10732,
											"end": 10764,
											"name": "PUSH",
											"source": 16,
											"value": "45524332305065726D69743A20696E76616C6964207369676E61747572650000"
										},
										{
											"begin": 10727,
											"end": 10729,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 10712,
											"end": 10730,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10712,
											"end": 10730,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10705,
											"end": 10765,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10797,
											"end": 10799,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 10782,
											"end": 10800,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10782,
											"end": 10800,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10626,
											"end": 10806,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 10811,
											"end": 11167,
											"name": "tag",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 10811,
											"end": 11167,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11013,
											"end": 11015,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10995,
											"end": 11016,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10995,
											"end": 11016,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10995,
											"end": 11016,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11032,
											"end": 11050,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 11032,
											"end": 11050,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 11032,
											"end": 11050,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11025,
											"end": 11055,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11091,
											"end": 11125,
											"name": "PUSH",
											"source": 16,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 11086,
											"end": 11088,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 11071,
											"end": 11089,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11071,
											"end": 11089,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11064,
											"end": 11126,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11158,
											"end": 11160,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 11143,
											"end": 11161,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11143,
											"end": 11161,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 10985,
											"end": 11167,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 11172,
											"end": 11569,
											"name": "tag",
											"source": 16,
											"value": "286"
										},
										{
											"begin": 11172,
											"end": 11569,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11374,
											"end": 11376,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11356,
											"end": 11377,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 11356,
											"end": 11377,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11356,
											"end": 11377,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11413,
											"end": 11415,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 11393,
											"end": 11411,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11393,
											"end": 11411,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11393,
											"end": 11411,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11386,
											"end": 11416,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11452,
											"end": 11486,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 11447,
											"end": 11449,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 11432,
											"end": 11450,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11432,
											"end": 11450,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11425,
											"end": 11487,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11518,
											"end": 11520,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 11503,
											"end": 11521,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11503,
											"end": 11521,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11496,
											"end": 11527,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11559,
											"end": 11562,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 11544,
											"end": 11563,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11544,
											"end": 11563,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11346,
											"end": 11569,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 11574,
											"end": 11975,
											"name": "tag",
											"source": 16,
											"value": "248"
										},
										{
											"begin": 11574,
											"end": 11975,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11776,
											"end": 11778,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11758,
											"end": 11779,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 11758,
											"end": 11779,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11758,
											"end": 11779,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11815,
											"end": 11817,
											"name": "PUSH",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 11795,
											"end": 11813,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11795,
											"end": 11813,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11795,
											"end": 11813,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11788,
											"end": 11818,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11854,
											"end": 11888,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 11849,
											"end": 11851,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 11834,
											"end": 11852,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11834,
											"end": 11852,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11827,
											"end": 11889,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11920,
											"end": 11922,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 11905,
											"end": 11923,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11905,
											"end": 11923,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11898,
											"end": 11933,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11965,
											"end": 11968,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 11950,
											"end": 11969,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11950,
											"end": 11969,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 11748,
											"end": 11975,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 11980,
											"end": 12380,
											"name": "tag",
											"source": 16,
											"value": "240"
										},
										{
											"begin": 11980,
											"end": 12380,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12182,
											"end": 12184,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12164,
											"end": 12185,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 12164,
											"end": 12185,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12164,
											"end": 12185,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12221,
											"end": 12223,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 12201,
											"end": 12219,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12201,
											"end": 12219,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12201,
											"end": 12219,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12194,
											"end": 12224,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12260,
											"end": 12294,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 12255,
											"end": 12257,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 12240,
											"end": 12258,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12240,
											"end": 12258,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12233,
											"end": 12295,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12326,
											"end": 12328,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 12311,
											"end": 12329,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12311,
											"end": 12329,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12304,
											"end": 12338,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12370,
											"end": 12373,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 12355,
											"end": 12374,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12355,
											"end": 12374,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12154,
											"end": 12380,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 12385,
											"end": 12731,
											"name": "tag",
											"source": 16,
											"value": "151"
										},
										{
											"begin": 12385,
											"end": 12731,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12587,
											"end": 12589,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12569,
											"end": 12590,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 12569,
											"end": 12590,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12569,
											"end": 12590,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12626,
											"end": 12628,
											"name": "PUSH",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 12606,
											"end": 12624,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12624,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12606,
											"end": 12624,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12599,
											"end": 12629,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4C50546F6B656E3A2063616E6E6F74206D696E74203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "54"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12660,
											"end": 12662,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 12645,
											"end": 12663,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12645,
											"end": 12663,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12638,
											"end": 12690,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12722,
											"end": 12724,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 12707,
											"end": 12725,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12707,
											"end": 12725,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12559,
											"end": 12731,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 12736,
											"end": 13090,
											"name": "tag",
											"source": 16,
											"value": "367"
										},
										{
											"begin": 12736,
											"end": 13090,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12938,
											"end": 12940,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12920,
											"end": 12941,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 12920,
											"end": 12941,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12920,
											"end": 12941,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12977,
											"end": 12979,
											"name": "PUSH",
											"source": 16,
											"value": "1E"
										},
										{
											"begin": 12957,
											"end": 12975,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12957,
											"end": 12975,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12957,
											"end": 12975,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12950,
											"end": 12980,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13016,
											"end": 13048,
											"name": "PUSH",
											"source": 16,
											"value": "4C50546F6B656E3A2063616E6E6F742073656E6420746F20697473656C660000"
										},
										{
											"begin": 13011,
											"end": 13013,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 12996,
											"end": 13014,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12996,
											"end": 13014,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12989,
											"end": 13049,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13081,
											"end": 13083,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 13066,
											"end": 13084,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13066,
											"end": 13084,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 12910,
											"end": 13090,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 13095,
											"end": 13450,
											"name": "tag",
											"source": 16,
											"value": "278"
										},
										{
											"begin": 13095,
											"end": 13450,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13297,
											"end": 13299,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13279,
											"end": 13300,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13279,
											"end": 13300,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13279,
											"end": 13300,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13336,
											"end": 13338,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 13316,
											"end": 13334,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13316,
											"end": 13334,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13316,
											"end": 13334,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13309,
											"end": 13339,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13375,
											"end": 13408,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 13370,
											"end": 13372,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 13355,
											"end": 13373,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13355,
											"end": 13373,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13348,
											"end": 13409,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13441,
											"end": 13443,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 13426,
											"end": 13444,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13426,
											"end": 13444,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13269,
											"end": 13450,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 13637,
											"end": 13821,
											"name": "tag",
											"source": 16,
											"value": "49"
										},
										{
											"begin": 13637,
											"end": 13821,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13809,
											"end": 13813,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 13797,
											"end": 13814,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 13797,
											"end": 13814,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13797,
											"end": 13814,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 13797,
											"end": 13814,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13779,
											"end": 13815,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13779,
											"end": 13815,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 13767,
											"end": 13769,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13752,
											"end": 13770,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13752,
											"end": 13770,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13734,
											"end": 13821,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 13826,
											"end": 13954,
											"name": "tag",
											"source": 16,
											"value": "271"
										},
										{
											"begin": 13826,
											"end": 13954,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13826,
											"end": 13954,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13897,
											"end": 13898,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13893,
											"end": 13899,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 13890,
											"end": 13891,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13887,
											"end": 13900,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 13884,
											"end": 13886,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13884,
											"end": 13886,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 13884,
											"end": 13886,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13903,
											"end": 13921,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 13903,
											"end": 13921,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 13903,
											"end": 13921,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 13903,
											"end": 13921,
											"name": "tag",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 13903,
											"end": 13921,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13939,
											"end": 13948,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13939,
											"end": 13948,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13874,
											"end": 13954,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 13959,
											"end": 14084,
											"name": "tag",
											"source": 16,
											"value": "261"
										},
										{
											"begin": 13959,
											"end": 14084,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13959,
											"end": 14084,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14027,
											"end": 14028,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14024,
											"end": 14025,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14021,
											"end": 14029,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 14018,
											"end": 14020,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 14018,
											"end": 14020,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 14018,
											"end": 14020,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 14032,
											"end": 14050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 14032,
											"end": 14050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 14032,
											"end": 14050,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 14032,
											"end": 14050,
											"name": "tag",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 14032,
											"end": 14050,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14069,
											"end": 14078,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 14069,
											"end": 14078,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 14008,
											"end": 14084,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 14089,
											"end": 14469,
											"name": "tag",
											"source": 16,
											"value": "113"
										},
										{
											"begin": 14089,
											"end": 14469,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14174,
											"end": 14175,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 14164,
											"end": 14176,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 14164,
											"end": 14176,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 14221,
											"end": 14222,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 14211,
											"end": 14223,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14211,
											"end": 14223,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 14211,
											"end": 14223,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 14232,
											"end": 14234,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "491"
										},
										{
											"begin": 14232,
											"end": 14234,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 14286,
											"end": 14290,
											"name": "PUSH",
											"source": 16,
											"value": "7F"
										},
										{
											"begin": 14278,
											"end": 14284,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14274,
											"end": 14291,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 14264,
											"end": 14291,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 14264,
											"end": 14291,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 14232,
											"end": 14234,
											"name": "tag",
											"source": 16,
											"value": "491"
										},
										{
											"begin": 14232,
											"end": 14234,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14339,
											"end": 14341,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 14331,
											"end": 14337,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14328,
											"end": 14342,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 14308,
											"end": 14326,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 14305,
											"end": 14343,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "492"
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 14385,
											"end": 14395,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 14380,
											"end": 14383,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 14376,
											"end": 14396,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 14373,
											"end": 14374,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14366,
											"end": 14397,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14420,
											"end": 14424,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 14417,
											"end": 14418,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 14410,
											"end": 14425,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14448,
											"end": 14452,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14445,
											"end": 14446,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14438,
											"end": 14453,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "tag",
											"source": 16,
											"value": "492"
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14302,
											"end": 14304,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 14144,
											"end": 14469,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 14144,
											"end": 14469,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 14144,
											"end": 14469,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 14144,
											"end": 14469,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 14474,
											"end": 14601,
											"name": "tag",
											"source": 16,
											"value": "486"
										},
										{
											"begin": 14474,
											"end": 14601,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14535,
											"end": 14545,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 14530,
											"end": 14533,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 14526,
											"end": 14546,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 14523,
											"end": 14524,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14516,
											"end": 14547,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14566,
											"end": 14570,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 14563,
											"end": 14564,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 14556,
											"end": 14571,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14590,
											"end": 14594,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14587,
											"end": 14588,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14580,
											"end": 14595,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 14606,
											"end": 14733,
											"name": "tag",
											"source": 16,
											"value": "420"
										},
										{
											"begin": 14606,
											"end": 14733,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14667,
											"end": 14677,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 14662,
											"end": 14665,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 14658,
											"end": 14678,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 14655,
											"end": 14656,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14648,
											"end": 14679,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14698,
											"end": 14702,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 14695,
											"end": 14696,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 14688,
											"end": 14703,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14722,
											"end": 14726,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14719,
											"end": 14720,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14712,
											"end": 14727,
											"name": "REVERT",
											"source": 16
										}
									],
									".data": {
										"149B126E7125232B4200AF45303D04FBA8B74653B1A295A6A561A528C33FEFDD": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"A287C363786607A1457A2D9D12FA61C0073358E02D76B4035FC2C2D86A19C0DB": "45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(string,string)": "4cd88b76",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Only Swap contracts should initialize and own LPToken contracts.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string)\":{\"details\":\"The caller of this function will become the owner. A Swap contract should call this in its initializer function.\",\"params\":{\"name\":\"name of this token\",\"symbol\":\"symbol of this token\"}},\"mint(address,uint256)\":{\"details\":\"only owner can call this mint function\",\"params\":{\"amount\":\"amount of tokens to mint\",\"recipient\":\"address of account to receive the tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Liquidity Provider Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string)\":{\"notice\":\"Initializes this LPToken contract with the given name and symbol\"},\"mint(address,uint256)\":{\"notice\":\"Mints the given amount of LPToken to the recipient.\"}},\"notice\":\"This token is an ERC20 detailed token with added capability to be minted by the owner. It is used to represent user's shares when providing liquidity to swap contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LPToken.sol\":\"LPToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/LPToken.sol\":{\"keccak256\":\"0x9a1cebee9a537708471d6dc9490622d4a609efa02d347e767f453cc8b9df307e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be49291505179b700cf2da02b85a8ad4dde3919ac877378214af5b62e82f798a\",\"dweb:/ipfs/QmUJR3xtd1nvkQZDgzGGupNhvX9C7XCoo3XhkLTK8w4BNr\"]},\"src/OwnableUpgradeable.sol\":{\"keccak256\":\"0xfae07c05a52eb3ae018f7c8de07044c9b306ff8d5b0bd3662dfbeba2484e9c40\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7c20f7b0ac85764e3c2854c5227c050ef7898b40adcef525998ec08eb114ab0\",\"dweb:/ipfs/QmTVD3EEMZznD9js3NwJNnj4QGJeheYCFRebfiEGCyQFRn\"]},\"src/interfaces/IERC20.sol\":{\"keccak256\":\"0x2c88d81d0bcedd3ab706d483909c689f29f635281bb6140657bfa816babc5d05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0aee4682d6461c056571894182ad4f10e39a8f7d7d2a747acf650711d4730658\",\"dweb:/ipfs/Qmaa1BHXoDGCLxMrKrpouqA47N7ECuhrgn7ZEWvCQiuD8u\"]},\"src/interfaces/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0xf24e9dd431415eec83e867edca3de6a60cf1248bc50f1c7d2b543875732c868a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973d96c0665165fa5202681ec7b6a456482b523dfd70cfca40ee9661e60533fd\",\"dweb:/ipfs/QmPgDdmE5XeCPVzRpWtW9sqNy51QKNtMg1jZX9WbzcwqSA\"]},\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x1e4148e9fb5294b9d70d40d67d98bef18722e23bb82f4856a77968328769e272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e39ce0f7e96988feefdab801546248d1d8122d954af7c3e20db37b7fe46131e\",\"dweb:/ipfs/QmXKi6b1okq7UNE1twToQBaQyxdm6WpqNcS1LuCqDCGavU\"]},\"src/interfaces/ISwap.sol\":{\"keccak256\":\"0x444a5c06e44f90f3c0486ac16afc4d0727433b57778c189b3b99ef430083db14\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33aa483050747a0ba93df84b5225d8b6438d2098acfb01b6a90b04b6810234d0\",\"dweb:/ipfs/QmTvxyy5cbgnmafhxQrHj1S4gs3SZCfkPn749618AVxubK\"]},\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/libraries/CountersUpgradeable.sol\":{\"keccak256\":\"0xf210b0d1707edb561f4dde2f57e80dc1484e02b95513da327f4a3f6cb8f819fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbfd0d1d982e2e4d159fbb349c39292c40313a35e6d9bd9d74c9d8952ba07408\",\"dweb:/ipfs/QmcPC76yd9g35CB1UZh3VPuLPKVN2PN93i6f8urkihKrXn\"]},\"src/libraries/ECDSAUpgradeable.sol\":{\"keccak256\":\"0x0b370e9934d29463c5643faa0598c0aed0a417b49585950bcba9da855c436cef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://baaf280674855cdd0cba34e71650fc619ac91557dbf317cf41c9c68b98df01f2\",\"dweb:/ipfs/QmPmCbadPDM4zRCiWf3oBArFcP23Xhyne68VyiT7ieGtfR\"]},\"src/libraries/EIP712Upgradeable.sol\":{\"keccak256\":\"0x8776e6fe7de83737bf1b4453745cec49292d090c821522658bdd5d37f8bf48de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db072b903be91a0ca8fec815448129eb2b837040ad84cffe66d61300e93afaf3\",\"dweb:/ipfs/QmTXGAuZHBztAVreVk51S92cZKwabJk4BFiEvmX4pL1MiD\"]},\"src/libraries/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0x93adcbe7d60988de36e26b0259d19f54ca78c9cd6538ff665c91263c3a4dd7be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://776c5cb6cb678c94c352fc5cbf37d3a06b22e83ea9e66d25d35a05777f3dc47d\",\"dweb:/ipfs/QmdxfVGP7BFCwnr6QTT8xnjNn8SFJWSQNjhwwDznri1RSr\"]},\"src/libraries/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x4f6a8cd5e9078e432c79e7de139b395faa21fbaa268b6d075c4956f6d3e70abf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f5a2d90bd9f0547a714ee5a64ad513f79a966366388c2d21f1afed1e17b15ae\",\"dweb:/ipfs/QmdSDAiGFUC7HrRHrbtzXsimqU7tywq234Fnu2zsVUfrvg\"]},\"src/libraries/ERC20Upgradeable.sol\":{\"keccak256\":\"0x59a81b59af7943208f0edd84a38e397adfc6305fc8105065f41f2fd41f92f37a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5c5bc6065e2d466771d19480dfcdfefc419ba1c4886f8797137f7fc8de45964\",\"dweb:/ipfs/QmbpvoFewMnhEcercKFS1wP15tjLYr7No65EDgxMn4DExw\"]},\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1259,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1265,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1267,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1269,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1271,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1273,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_decimals",
								"offset": 0,
								"slot": "56",
								"type": "t_uint8"
							},
							{
								"astId": 1768,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "57",
								"type": "t_array(t_uint256)44_storage"
							},
							{
								"astId": 827,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_HASHED_NAME",
								"offset": 0,
								"slot": "101",
								"type": "t_bytes32"
							},
							{
								"astId": 829,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_HASHED_VERSION",
								"offset": 0,
								"slot": "102",
								"type": "t_bytes32"
							},
							{
								"astId": 978,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "103",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1089,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_nonces",
								"offset": 0,
								"slot": "153",
								"type": "t_mapping(t_address,t_struct(Counter)660_storage)"
							},
							{
								"astId": 1091,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_PERMIT_TYPEHASH",
								"offset": 0,
								"slot": "154",
								"type": "t_bytes32"
							},
							{
								"astId": 1238,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "155",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1062,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "204",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 112,
								"contract": "src/LPToken.sol:LPToken",
								"label": "_owner",
								"offset": 0,
								"slot": "254",
								"type": "t_address"
							},
							{
								"astId": 231,
								"contract": "src/LPToken.sol:LPToken",
								"label": "__gap",
								"offset": 0,
								"slot": "255",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)44_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[44]",
								"numberOfBytes": "1408"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)660_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct CountersUpgradeable.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)660_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)660_storage": {
								"encoding": "inplace",
								"label": "struct CountersUpgradeable.Counter",
								"members": [
									{
										"astId": 659,
										"contract": "src/LPToken.sol:LPToken",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"initialize(string,string)": {
								"notice": "Initializes this LPToken contract with the given name and symbol"
							},
							"mint(address,uint256)": {
								"notice": "Mints the given amount of LPToken to the recipient."
							}
						},
						"notice": "This token is an ERC20 detailed token with added capability to be minted by the owner. It is used to represent user's shares when providing liquidity to swap contracts.",
						"version": 1
					}
				}
			},
			"src/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/OwnableUpgradeable.sol\":{\"keccak256\":\"0xfae07c05a52eb3ae018f7c8de07044c9b306ff8d5b0bd3662dfbeba2484e9c40\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7c20f7b0ac85764e3c2854c5227c050ef7898b40adcef525998ec08eb114ab0\",\"dweb:/ipfs/QmTVD3EEMZznD9js3NwJNnj4QGJeheYCFRebfiEGCyQFRn\"]},\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 112,
								"contract": "src/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 231,
								"contract": "src/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20.sol\":{\"keccak256\":\"0x2c88d81d0bcedd3ab706d483909c689f29f635281bb6140657bfa816babc5d05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0aee4682d6461c056571894182ad4f10e39a8f7d7d2a747acf650711d4730658\",\"dweb:/ipfs/Qmaa1BHXoDGCLxMrKrpouqA47N7ECuhrgn7ZEWvCQiuD8u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/IERC20PermitUpgradeable.sol": {
				"IERC20PermitUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0xf24e9dd431415eec83e867edca3de6a60cf1248bc50f1c7d2b543875732c868a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973d96c0665165fa5202681ec7b6a456482b523dfd70cfca40ee9661e60533fd\",\"dweb:/ipfs/QmPgDdmE5XeCPVzRpWtW9sqNy51QKNtMg1jZX9WbzcwqSA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x1e4148e9fb5294b9d70d40d67d98bef18722e23bb82f4856a77968328769e272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e39ce0f7e96988feefdab801546248d1d8122d954af7c3e20db37b7fe46131e\",\"dweb:/ipfs/QmXKi6b1okq7UNE1twToQBaQyxdm6WpqNcS1LuCqDCGavU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/ISwap.sol": {
				"ISwap": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "minToMint",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "calculateRemoveLiquidity",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "tokenIndex",
									"type": "uint8"
								}
							],
							"name": "calculateRemoveLiquidityOneToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "availableTokenAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "tokenIndexFrom",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "tokenIndexTo",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "dx",
									"type": "uint256"
								}
							],
							"name": "calculateSwap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "bool",
									"name": "deposit",
									"type": "bool"
								}
							],
							"name": "calculateTokenAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getA",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getLpToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getNumberOfTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "index",
									"type": "uint8"
								}
							],
							"name": "getToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "index",
									"type": "uint8"
								}
							],
							"name": "getTokenBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTokenBalances",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenAddress",
									"type": "address"
								}
							],
							"name": "getTokenIndex",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getVirtualPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20[]",
									"name": "pooledTokens",
									"type": "address[]"
								},
								{
									"internalType": "uint8[]",
									"name": "decimals",
									"type": "uint8[]"
								},
								{
									"internalType": "string",
									"name": "lpTokenName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "lpTokenSymbol",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "a",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "adminFee",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "lpTokenTargetAddress",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256[]",
									"name": "minAmounts",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "maxBurnAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidityImbalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "tokenIndex",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "minAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidityOneToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "tokenIndexFrom",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "tokenIndexTo",
									"type": "uint8"
								},
								{
									"internalType": "uint256",
									"name": "dx",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "minDy",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addLiquidity(uint256[],uint256,uint256)": "4d49e87d",
							"calculateRemoveLiquidity(uint256)": "f2fad2b6",
							"calculateRemoveLiquidityOneToken(uint256,uint8)": "342a87a1",
							"calculateSwap(uint8,uint8,uint256)": "a95b089f",
							"calculateTokenAmount(uint256[],bool)": "e6ab2806",
							"getA()": "d46300fd",
							"getLpToken()": "8214f5a4",
							"getNumberOfTokens()": "efeecb51",
							"getToken(uint8)": "82b86600",
							"getTokenBalance(uint8)": "91ceb3eb",
							"getTokenBalances()": "a1dc9031",
							"getTokenIndex(address)": "66c0bd24",
							"getVirtualPrice()": "e25aa5fa",
							"initialize(address[],uint8[],string,string,uint256,uint256,uint256,address)": "b28cb6dc",
							"removeLiquidity(uint256,uint256[],uint256)": "31cd52b0",
							"removeLiquidityImbalance(uint256[],uint256,uint256)": "84cdd9bc",
							"removeLiquidityOneToken(uint256,uint8,uint256,uint256)": "3e3a1560",
							"swap(uint8,uint8,uint256,uint256,uint256)": "91695586"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"pooledTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpTokenTargetAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISwap.sol\":\"ISwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20.sol\":{\"keccak256\":\"0x2c88d81d0bcedd3ab706d483909c689f29f635281bb6140657bfa816babc5d05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0aee4682d6461c056571894182ad4f10e39a8f7d7d2a747acf650711d4730658\",\"dweb:/ipfs/Qmaa1BHXoDGCLxMrKrpouqA47N7ECuhrgn7ZEWvCQiuD8u\"]},\"src/interfaces/ISwap.sol\":{\"keccak256\":\"0x444a5c06e44f90f3c0486ac16afc4d0727433b57778c189b3b99ef430083db14\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33aa483050747a0ba93df84b5225d8b6438d2098acfb01b6a90b04b6810234d0\",\"dweb:/ipfs/QmTvxyy5cbgnmafhxQrHj1S4gs3SZCfkPn749618AVxubK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/libraries/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/libraries/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/libraries/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/CountersUpgradeable.sol": {
				"CountersUpgradeable": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/libraries/CountersUpgradeable.sol\":675:1545  library CountersUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/libraries/CountersUpgradeable.sol\":675:1545  library CountersUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220038d952c207dcf2018c75e6c6f4f6fb1e4f68efc038150469ca00d61b02c89b164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220038d952c207dcf2018c75e6c6f4f6fb1e4f68efc038150469ca00d61b02c89b164736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB DUP14 SWAP6 0x2C KECCAK256 PUSH30 0xCF2018C75E6C6F4F6FB1E4F68EFC038150469CA00D61B02C89B164736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "675:870:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;675:870:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220038d952c207dcf2018c75e6c6f4f6fb1e4f68efc038150469ca00d61b02c89b164736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB DUP14 SWAP6 0x2C KECCAK256 PUSH30 0xCF2018C75E6C6F4F6FB1E4F68EFC038150469CA00D61B02C89B164736F6C PUSH4 0x43000800 STOP CALLER ",
							"sourceMap": "675:870:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"current(struct CountersUpgradeable.Counter storage pointer)": "infinite",
								"decrement(struct CountersUpgradeable.Counter storage pointer)": "infinite",
								"increment(struct CountersUpgradeable.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 675,
									"end": 1545,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220038d952c207dcf2018c75e6c6f4f6fb1e4f68efc038150469ca00d61b02c89b164736f6c63430008000033",
									".code": [
										{
											"begin": 675,
											"end": 1545,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 675,
											"end": 1545,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/CountersUpgradeable.sol\":{\"keccak256\":\"0xf210b0d1707edb561f4dde2f57e80dc1484e02b95513da327f4a3f6cb8f819fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbfd0d1d982e2e4d159fbb349c39292c40313a35e6d9bd9d74c9d8952ba07408\",\"dweb:/ipfs/QmcPC76yd9g35CB1UZh3VPuLPKVN2PN93i6f8urkihKrXn\"]},\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/ECDSAUpgradeable.sol": {
				"ECDSAUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/libraries/ECDSAUpgradeable.sol\":272:3916  library ECDSAUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/libraries/ECDSAUpgradeable.sol\":272:3916  library ECDSAUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220392cd8244e94cf671eec584e3df0e694366b2fffd265d245e15deadf92c93b7c64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220392cd8244e94cf671eec584e3df0e694366b2fffd265d245e15deadf92c93b7c64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0x2C 0xD8 0x24 0x4E SWAP5 0xCF PUSH8 0x1EEC584E3DF0E694 CALLDATASIZE PUSH12 0x2FFFD265D245E15DEADF92C9 EXTCODESIZE PUSH29 0x64736F6C63430008000033000000000000000000000000000000000000 ",
							"sourceMap": "272:3644:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;272:3644:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220392cd8244e94cf671eec584e3df0e694366b2fffd265d245e15deadf92c93b7c64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0x2C 0xD8 0x24 0x4E SWAP5 0xCF PUSH8 0x1EEC584E3DF0E694 CALLDATASIZE PUSH12 0x2FFFD265D245E15DEADF92C9 EXTCODESIZE PUSH29 0x64736F6C63430008000033000000000000000000000000000000000000 ",
							"sourceMap": "272:3644:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 272,
									"end": 3916,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220392cd8244e94cf671eec584e3df0e694366b2fffd265d245e15deadf92c93b7c64736f6c63430008000033",
									".code": [
										{
											"begin": 272,
											"end": 3916,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 272,
											"end": 3916,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/ECDSAUpgradeable.sol\":{\"keccak256\":\"0x0b370e9934d29463c5643faa0598c0aed0a417b49585950bcba9da855c436cef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://baaf280674855cdd0cba34e71650fc619ac91557dbf317cf41c9c68b98df01f2\",\"dweb:/ipfs/QmPmCbadPDM4zRCiWf3oBArFcP23Xhyne68VyiT7ieGtfR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/EIP712Upgradeable.sol": {
				"EIP712Upgradeable": {
					"abi": [],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/EIP712Upgradeable.sol\":{\"keccak256\":\"0x8776e6fe7de83737bf1b4453745cec49292d090c821522658bdd5d37f8bf48de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db072b903be91a0ca8fec815448129eb2b837040ad84cffe66d61300e93afaf3\",\"dweb:/ipfs/QmTXGAuZHBztAVreVk51S92cZKwabJk4BFiEvmX4pL1MiD\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/libraries/EIP712Upgradeable.sol:EIP712Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/libraries/EIP712Upgradeable.sol:EIP712Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 827,
								"contract": "src/libraries/EIP712Upgradeable.sol:EIP712Upgradeable",
								"label": "_HASHED_NAME",
								"offset": 0,
								"slot": "1",
								"type": "t_bytes32"
							},
							{
								"astId": 829,
								"contract": "src/libraries/EIP712Upgradeable.sol:EIP712Upgradeable",
								"label": "_HASHED_VERSION",
								"offset": 0,
								"slot": "2",
								"type": "t_bytes32"
							},
							{
								"astId": 978,
								"contract": "src/libraries/EIP712Upgradeable.sol:EIP712Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "3",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/ERC20BurnableUpgradeable.sol": {
				"ERC20BurnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x1e4148e9fb5294b9d70d40d67d98bef18722e23bb82f4856a77968328769e272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e39ce0f7e96988feefdab801546248d1d8122d954af7c3e20db37b7fe46131e\",\"dweb:/ipfs/QmXKi6b1okq7UNE1twToQBaQyxdm6WpqNcS1LuCqDCGavU\"]},\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/libraries/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0x93adcbe7d60988de36e26b0259d19f54ca78c9cd6538ff665c91263c3a4dd7be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://776c5cb6cb678c94c352fc5cbf37d3a06b22e83ea9e66d25d35a05777f3dc47d\",\"dweb:/ipfs/QmdxfVGP7BFCwnr6QTT8xnjNn8SFJWSQNjhwwDznri1RSr\"]},\"src/libraries/ERC20Upgradeable.sol\":{\"keccak256\":\"0x59a81b59af7943208f0edd84a38e397adfc6305fc8105065f41f2fd41f92f37a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5c5bc6065e2d466771d19480dfcdfefc419ba1c4886f8797137f7fc8de45964\",\"dweb:/ipfs/QmbpvoFewMnhEcercKFS1wP15tjLYr7No65EDgxMn4DExw\"]},\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1259,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1265,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1267,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1269,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1271,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1273,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_decimals",
								"offset": 0,
								"slot": "56",
								"type": "t_uint8"
							},
							{
								"astId": 1768,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "57",
								"type": "t_array(t_uint256)44_storage"
							},
							{
								"astId": 1062,
								"contract": "src/libraries/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)44_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[44]",
								"numberOfBytes": "1408"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/ERC20PermitUpgradeable.sol": {
				"ERC20PermitUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0xf24e9dd431415eec83e867edca3de6a60cf1248bc50f1c7d2b543875732c868a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973d96c0665165fa5202681ec7b6a456482b523dfd70cfca40ee9661e60533fd\",\"dweb:/ipfs/QmPgDdmE5XeCPVzRpWtW9sqNy51QKNtMg1jZX9WbzcwqSA\"]},\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x1e4148e9fb5294b9d70d40d67d98bef18722e23bb82f4856a77968328769e272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e39ce0f7e96988feefdab801546248d1d8122d954af7c3e20db37b7fe46131e\",\"dweb:/ipfs/QmXKi6b1okq7UNE1twToQBaQyxdm6WpqNcS1LuCqDCGavU\"]},\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/libraries/CountersUpgradeable.sol\":{\"keccak256\":\"0xf210b0d1707edb561f4dde2f57e80dc1484e02b95513da327f4a3f6cb8f819fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbfd0d1d982e2e4d159fbb349c39292c40313a35e6d9bd9d74c9d8952ba07408\",\"dweb:/ipfs/QmcPC76yd9g35CB1UZh3VPuLPKVN2PN93i6f8urkihKrXn\"]},\"src/libraries/ECDSAUpgradeable.sol\":{\"keccak256\":\"0x0b370e9934d29463c5643faa0598c0aed0a417b49585950bcba9da855c436cef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://baaf280674855cdd0cba34e71650fc619ac91557dbf317cf41c9c68b98df01f2\",\"dweb:/ipfs/QmPmCbadPDM4zRCiWf3oBArFcP23Xhyne68VyiT7ieGtfR\"]},\"src/libraries/EIP712Upgradeable.sol\":{\"keccak256\":\"0x8776e6fe7de83737bf1b4453745cec49292d090c821522658bdd5d37f8bf48de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db072b903be91a0ca8fec815448129eb2b837040ad84cffe66d61300e93afaf3\",\"dweb:/ipfs/QmTXGAuZHBztAVreVk51S92cZKwabJk4BFiEvmX4pL1MiD\"]},\"src/libraries/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x4f6a8cd5e9078e432c79e7de139b395faa21fbaa268b6d075c4956f6d3e70abf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f5a2d90bd9f0547a714ee5a64ad513f79a966366388c2d21f1afed1e17b15ae\",\"dweb:/ipfs/QmdSDAiGFUC7HrRHrbtzXsimqU7tywq234Fnu2zsVUfrvg\"]},\"src/libraries/ERC20Upgradeable.sol\":{\"keccak256\":\"0x59a81b59af7943208f0edd84a38e397adfc6305fc8105065f41f2fd41f92f37a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5c5bc6065e2d466771d19480dfcdfefc419ba1c4886f8797137f7fc8de45964\",\"dweb:/ipfs/QmbpvoFewMnhEcercKFS1wP15tjLYr7No65EDgxMn4DExw\"]},\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1259,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1265,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1267,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1269,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1271,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1273,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_decimals",
								"offset": 0,
								"slot": "56",
								"type": "t_uint8"
							},
							{
								"astId": 1768,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "57",
								"type": "t_array(t_uint256)44_storage"
							},
							{
								"astId": 827,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_HASHED_NAME",
								"offset": 0,
								"slot": "101",
								"type": "t_bytes32"
							},
							{
								"astId": 829,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_HASHED_VERSION",
								"offset": 0,
								"slot": "102",
								"type": "t_bytes32"
							},
							{
								"astId": 978,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "103",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1089,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_nonces",
								"offset": 0,
								"slot": "153",
								"type": "t_mapping(t_address,t_struct(Counter)660_storage)"
							},
							{
								"astId": 1091,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "_PERMIT_TYPEHASH",
								"offset": 0,
								"slot": "154",
								"type": "t_bytes32"
							},
							{
								"astId": 1238,
								"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "155",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)44_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[44]",
								"numberOfBytes": "1408"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)660_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct CountersUpgradeable.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)660_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)660_storage": {
								"encoding": "inplace",
								"label": "struct CountersUpgradeable.Counter",
								"members": [
									{
										"astId": 659,
										"contract": "src/libraries/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/libraries/ERC20Upgradeable.sol\":1384:11165  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/libraries/ERC20Upgradeable.sol\":1384:11165  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":5928:6143  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":2709:2802  function symbol() public view virtual returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":6630:6896  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4066:4238  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n    tag_16:\n        /* \"src/libraries/ERC20Upgradeable.sol\":2552:2565  string memory */\n      0x60\n        /* \"src/libraries/ERC20Upgradeable.sol\":2584:2589  _name */\n      0x36\n        /* \"src/libraries/ERC20Upgradeable.sol\":2577:2589  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":2507:2596  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4666:4670  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4721  _approve(_msgSender(), spender, amount) */\n      tag_71\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4703  _msgSender() */\n      tag_72\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4701  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":4691:4703  _msgSender() */\n      jump\t// in\n    tag_72:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4705:4712  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4714:4720  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4690  _approve */\n      tag_74\n        /* \"src/libraries/ERC20Upgradeable.sol\":4682:4721  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_71:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":4738:4742  true */\n      0x01\n        /* \"src/libraries/ERC20Upgradeable.sol\":4583:4749  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"src/libraries/ERC20Upgradeable.sol\":3661:3673  _totalSupply */\n      sload(0x35)\n        /* \"src/libraries/ERC20Upgradeable.sol\":3574:3680  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5322:5326  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5374  _transfer(sender, recipient, amount) */\n      tag_77\n        /* \"src/libraries/ERC20Upgradeable.sol\":5348:5354  sender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5356:5365  recipient */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5367:5373  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5347  _transfer */\n      tag_78\n        /* \"src/libraries/ERC20Upgradeable.sol\":5338:5374  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_77:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5505  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_79\n        /* \"src/libraries/ERC20Upgradeable.sol\":5393:5399  sender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5413  _msgSender() */\n      tag_80\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5411  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":5401:5413  _msgSender() */\n      jump\t// in\n    tag_80:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_81\n        /* \"src/libraries/ERC20Upgradeable.sol\":5453:5459  amount */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5434  _allowances[sender] */\n      dup11\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5426  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5434  _allowances[sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5447  _msgSender() */\n      tag_82\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5445  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":5435:5447  _msgSender() */\n      jump\t// in\n    tag_82:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5448  _allowances[sender][_msgSender()] */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5452  _allowances[sender][_msgSender()].sub */\n      tag_83\n        /* \"src/libraries/ERC20Upgradeable.sol\":5415:5504  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      jump\t// in\n    tag_81:\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5392  _approve */\n      tag_74\n        /* \"src/libraries/ERC20Upgradeable.sol\":5384:5505  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_79:\n      pop\n        /* \"src/libraries/ERC20Upgradeable.sol\":5522:5526  true */\n      0x01\n        /* \"src/libraries/ERC20Upgradeable.sol\":5216:5533  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n    tag_35:\n        /* \"src/libraries/ERC20Upgradeable.sol\":3498:3507  _decimals */\n      and(0xff, sload(0x38))\n        /* \"src/libraries/ERC20Upgradeable.sol\":3425:3514  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":5928:6143  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6016:6020  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6032:6115  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_71\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6053  _msgSender() */\n      tag_87\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6051  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":6041:6053  _msgSender() */\n      jump\t// in\n    tag_87:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6055:6062  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6114  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_81\n        /* \"src/libraries/ERC20Upgradeable.sol\":6103:6113  addedValue */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6075  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6089  _allowances[_msgSender()] */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6088  _msgSender() */\n      tag_89\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6086  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":6076:6088  _msgSender() */\n      jump\t// in\n    tag_89:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6089  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6098  _allowances[_msgSender()][spender] */\n      swap2\n      dup13\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6102  _allowances[_msgSender()][spender].add */\n      tag_90\n        /* \"src/libraries/ERC20Upgradeable.sol\":6064:6114  _allowances[_msgSender()][spender].add(addedValue) */\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_45:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      dup2\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":3812:3819  uint256 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3847  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":3838:3856  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"src/libraries/ERC20Upgradeable.sol\":3738:3863  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_91:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":2709:2802  function symbol() public view virtual returns (string memory) {... */\n    tag_48:\n        /* \"src/libraries/ERC20Upgradeable.sol\":2756:2769  string memory */\n      0x60\n        /* \"src/libraries/ERC20Upgradeable.sol\":2788:2795  _symbol */\n      0x37\n        /* \"src/libraries/ERC20Upgradeable.sol\":2781:2795  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":6630:6896  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6723:6727  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6739:6868  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_71\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6760  _msgSender() */\n      tag_100\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6758  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":6748:6760  _msgSender() */\n      jump\t// in\n    tag_100:\n        /* \"src/libraries/ERC20Upgradeable.sol\":6762:6769  spender */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_81\n        /* \"src/libraries/ERC20Upgradeable.sol\":6810:6825  subtractedValue */\n      dup6\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6782  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6796  _allowances[_msgSender()] */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6795  _msgSender() */\n      tag_102\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6793  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":6783:6795  _msgSender() */\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6796  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6805  _allowances[_msgSender()][spender] */\n      swap2\n      dup14\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6809  _allowances[_msgSender()][spender].sub */\n      tag_83\n        /* \"src/libraries/ERC20Upgradeable.sol\":6771:6867  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4066:4238  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4152:4156  bool */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4210  _transfer(_msgSender(), recipient, amount) */\n      tag_71\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4190  _msgSender() */\n      tag_105\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4188  _msgSender */\n      tag_73\n        /* \"src/libraries/ERC20Upgradeable.sol\":4178:4190  _msgSender() */\n      jump\t// in\n    tag_105:\n        /* \"src/libraries/ERC20Upgradeable.sol\":4192:4201  recipient */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4203:4209  amount */\n      dup5\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4177  _transfer */\n      tag_78\n        /* \"src/libraries/ERC20Upgradeable.sol\":4168:4210  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":4385:4392  uint256 */\n      0x00\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4422  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4429  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":4411:4438  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":4296:4445  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"src/libraries/ContextUpgradeable.sol\":828:941  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_73:\n        /* \"src/libraries/ContextUpgradeable.sol\":923:933  msg.sender */\n      caller\n        /* \"src/libraries/ContextUpgradeable.sol\":828:941  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":9694:10034  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9795:9814  owner != address(0) */\n      dup4\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":9787:9855  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9873:9894  spender != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":9865:9933  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_114\n      jump\t// in\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9962  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9955  _allowances */\n      0x34\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9962  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9971  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":9944:9980  _allowances[owner][spender] = amount */\n      dup5\n      swap1\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":9995:10027  Approval(owner, spender, amount) */\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap1\n      tag_115\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9974:9980  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":9995:10027  Approval(owner, spender, amount) */\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"src/libraries/ERC20Upgradeable.sol\":9694:10034  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":7370:7900  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_78:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7475:7495  sender != address(0) */\n      dup4\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":7467:7537  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_119\n      jump\t// in\n    tag_117:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7555:7578  recipient != address(0) */\n      dup3\n      and\n        /* \"src/libraries/ERC20Upgradeable.sol\":7547:7618  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_120\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_122\n      jump\t// in\n    tag_120:\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7676  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_123\n        /* \"src/libraries/ERC20Upgradeable.sol\":7650:7656  sender */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7658:7667  recipient */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7669:7675  amount */\n      dup4\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7649  _beforeTokenTransfer */\n      tag_124\n        /* \"src/libraries/ERC20Upgradeable.sol\":7629:7676  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_123:\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_125\n        /* \"src/libraries/ERC20Upgradeable.sol\":7729:7735  amount */\n      dup2\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7724  _balances[sender] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7716  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7724  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7728  _balances[sender].sub */\n      tag_83\n        /* \"src/libraries/ERC20Upgradeable.sol\":7707:7778  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      jump\t// in\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7704  _balances[sender] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7696  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7704  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":7687:7778  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7831  _balances[recipient] */\n      swap1\n      dup5\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7843  _balances[recipient].add(amount) */\n      tag_126\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7836:7842  amount */\n      dup3\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7835  _balances[recipient].add */\n      tag_90\n        /* \"src/libraries/ERC20Upgradeable.sol\":7811:7843  _balances[recipient].add(amount) */\n      jump\t// in\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7808  _balances[recipient] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7797  _balances */\n      0x33\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7808  _balances[recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"src/libraries/ERC20Upgradeable.sol\":7788:7843  _balances[recipient] = _balances[recipient].add(amount) */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"src/libraries/ERC20Upgradeable.sol\":7858:7893  Transfer(sender, recipient, amount) */\n      swap2\n      mload\n      swap1\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_115\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7886:7892  amount */\n      dup6\n      swap1\n        /* \"src/libraries/ERC20Upgradeable.sol\":7858:7893  Transfer(sender, recipient, amount) */\n      tag_28\n      jump\t// in\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5443:5606  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_83:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5529:5536  uint256 */\n      0x00\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5564:5576  errorMessage */\n      dup2\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5556:5562  b <= a */\n      dup5\n      dup5\n      gt\n      iszero\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5548:5577  require(b <= a, errorMessage) */\n      tag_129\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_129:\n      pop\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5599  a - b */\n      tag_131\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5598:5599  b */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5595  a */\n      dup6\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5594:5599  a - b */\n      tag_132\n      jump\t// in\n    tag_131:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5587:5599  return a - b */\n      swap5\n        /* \"src/libraries/SafeMathUpgradeable.sol\":5443:5606  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2701:2876  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_90:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2759:2766  uint256 */\n      0x00\n      dup1\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2795  a + b */\n      tag_134\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2794:2795  b */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2791  a */\n      dup6\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2790:2795  a + b */\n      tag_135\n      jump\t// in\n    tag_134:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2778:2795  uint256 c = a + b */\n      swap1\n      pop\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2818:2819  a */\n      dup4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2813:2814  c */\n      dup2\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2813:2819  c >= a */\n      lt\n      iszero\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2805:2851  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_138\n      jump\t// in\n    tag_136:\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2868:2869  c */\n      swap4\n        /* \"src/libraries/SafeMathUpgradeable.sol\":2701:2876  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/libraries/ERC20Upgradeable.sol\":11040:11132  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_124:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:189   */\n    tag_141:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_91\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_44:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_145:\n        /* \"#utility.yul\":355:386   */\n      tag_136\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_141\n      jump\t// in\n        /* \"#utility.yul\":397:671   */\n    tag_60:\n      0x00\n      dup1\n        /* \"#utility.yul\":526:528   */\n      0x40\n        /* \"#utility.yul\":514:523   */\n      dup4\n        /* \"#utility.yul\":505:512   */\n      dup6\n        /* \"#utility.yul\":501:524   */\n      sub\n        /* \"#utility.yul\":497:529   */\n      slt\n        /* \"#utility.yul\":494:496   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":547:553   */\n      dup1\n        /* \"#utility.yul\":539:545   */\n      dup2\n        /* \"#utility.yul\":532:554   */\n      revert\n        /* \"#utility.yul\":494:496   */\n    tag_148:\n        /* \"#utility.yul\":575:606   */\n      tag_149\n        /* \"#utility.yul\":596:605   */\n      dup4\n        /* \"#utility.yul\":575:606   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":565:606   */\n      swap2\n      pop\n        /* \"#utility.yul\":625:665   */\n      tag_150\n        /* \"#utility.yul\":661:663   */\n      0x20\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:664   */\n      add\n        /* \"#utility.yul\":625:665   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":615:665   */\n      swap1\n      pop\n        /* \"#utility.yul\":484:671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":676:1018   */\n    tag_31:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":822:824   */\n      0x60\n        /* \"#utility.yul\":810:819   */\n      dup5\n        /* \"#utility.yul\":801:808   */\n      dup7\n        /* \"#utility.yul\":797:820   */\n      sub\n        /* \"#utility.yul\":793:825   */\n      slt\n        /* \"#utility.yul\":790:792   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":843:849   */\n      dup1\n        /* \"#utility.yul\":835:841   */\n      dup2\n        /* \"#utility.yul\":828:850   */\n      revert\n        /* \"#utility.yul\":790:792   */\n    tag_152:\n        /* \"#utility.yul\":871:902   */\n      tag_153\n        /* \"#utility.yul\":892:901   */\n      dup5\n        /* \"#utility.yul\":871:902   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":861:902   */\n      swap3\n      pop\n        /* \"#utility.yul\":921:961   */\n      tag_154\n        /* \"#utility.yul\":957:959   */\n      0x20\n        /* \"#utility.yul\":946:955   */\n      dup6\n        /* \"#utility.yul\":942:960   */\n      add\n        /* \"#utility.yul\":921:961   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":911:961   */\n      swap2\n      pop\n        /* \"#utility.yul\":1008:1010   */\n      0x40\n        /* \"#utility.yul\":997:1006   */\n      dup5\n        /* \"#utility.yul\":993:1011   */\n      add\n        /* \"#utility.yul\":980:1012   */\n      calldataload\n        /* \"#utility.yul\":970:1012   */\n      swap1\n      pop\n        /* \"#utility.yul\":780:1018   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1023:1289   */\n    tag_21:\n      0x00\n      dup1\n        /* \"#utility.yul\":1152:1154   */\n      0x40\n        /* \"#utility.yul\":1140:1149   */\n      dup4\n        /* \"#utility.yul\":1131:1138   */\n      dup6\n        /* \"#utility.yul\":1127:1150   */\n      sub\n        /* \"#utility.yul\":1123:1155   */\n      slt\n        /* \"#utility.yul\":1120:1122   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1173:1179   */\n      dup2\n        /* \"#utility.yul\":1165:1171   */\n      dup3\n        /* \"#utility.yul\":1158:1180   */\n      revert\n        /* \"#utility.yul\":1120:1122   */\n    tag_156:\n        /* \"#utility.yul\":1201:1232   */\n      tag_157\n        /* \"#utility.yul\":1222:1231   */\n      dup4\n        /* \"#utility.yul\":1201:1232   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1191:1232   */\n      swap5\n        /* \"#utility.yul\":1279:1281   */\n      0x20\n        /* \"#utility.yul\":1264:1282   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1251:1283   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1110:1289   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1481   */\n    tag_24:\n        /* \"#utility.yul\":1459:1473   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1452:1474   */\n      iszero\n        /* \"#utility.yul\":1434:1475   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1422:1424   */\n      0x20\n        /* \"#utility.yul\":1407:1425   */\n      add\n      swap1\n        /* \"#utility.yul\":1389:1481   */\n      jump\t// out\n        /* \"#utility.yul\":1486:2089   */\n    tag_18:\n      0x00\n        /* \"#utility.yul\":1627:1629   */\n      0x20\n        /* \"#utility.yul\":1656:1658   */\n      dup1\n        /* \"#utility.yul\":1645:1654   */\n      dup4\n        /* \"#utility.yul\":1638:1659   */\n      mstore\n        /* \"#utility.yul\":1688:1694   */\n      dup4\n        /* \"#utility.yul\":1682:1695   */\n      mload\n        /* \"#utility.yul\":1731:1737   */\n      dup1\n        /* \"#utility.yul\":1726:1728   */\n      dup3\n        /* \"#utility.yul\":1715:1724   */\n      dup6\n        /* \"#utility.yul\":1711:1729   */\n      add\n        /* \"#utility.yul\":1704:1738   */\n      mstore\n        /* \"#utility.yul\":1756:1760   */\n      dup3\n        /* \"#utility.yul\":1769:1909   */\n    tag_160:\n        /* \"#utility.yul\":1783:1789   */\n      dup2\n        /* \"#utility.yul\":1780:1781   */\n      dup2\n        /* \"#utility.yul\":1777:1790   */\n      lt\n        /* \"#utility.yul\":1769:1909   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1878:1892   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1874:1897   */\n      dup4\n      add\n        /* \"#utility.yul\":1868:1898   */\n      mload\n        /* \"#utility.yul\":1844:1861   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1863:1865   */\n      0x40\n        /* \"#utility.yul\":1840:1866   */\n      add\n        /* \"#utility.yul\":1833:1899   */\n      mstore\n        /* \"#utility.yul\":1798:1808   */\n      dup3\n      add\n        /* \"#utility.yul\":1769:1909   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1927:1933   */\n      dup2\n        /* \"#utility.yul\":1924:1925   */\n      dup2\n        /* \"#utility.yul\":1921:1934   */\n      gt\n        /* \"#utility.yul\":1918:1920   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1997:2001   */\n      dup4\n        /* \"#utility.yul\":1992:1994   */\n      0x40\n        /* \"#utility.yul\":1983:1989   */\n      dup4\n        /* \"#utility.yul\":1972:1981   */\n      dup8\n        /* \"#utility.yul\":1968:1990   */\n      add\n        /* \"#utility.yul\":1964:1995   */\n      add\n        /* \"#utility.yul\":1957:2002   */\n      mstore\n        /* \"#utility.yul\":1918:1920   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2073:2075   */\n      0x1f\n        /* \"#utility.yul\":2052:2067   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2048:2077   */\n      and\n        /* \"#utility.yul\":2033:2078   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2080:2082   */\n      0x40\n        /* \"#utility.yul\":2029:2083   */\n      add\n      swap4\n        /* \"#utility.yul\":1607:2089   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2094:2493   */\n    tag_122:\n        /* \"#utility.yul\":2296:2298   */\n      0x20\n        /* \"#utility.yul\":2278:2299   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2335:2337   */\n      0x23\n        /* \"#utility.yul\":2315:2333   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2308:2338   */\n      mstore\n        /* \"#utility.yul\":2374:2408   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2369:2371   */\n      0x40\n        /* \"#utility.yul\":2354:2372   */\n      dup3\n      add\n        /* \"#utility.yul\":2347:2409   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2440:2442   */\n      0x60\n        /* \"#utility.yul\":2425:2443   */\n      dup3\n      add\n        /* \"#utility.yul\":2418:2451   */\n      mstore\n        /* \"#utility.yul\":2483:2486   */\n      0x80\n        /* \"#utility.yul\":2468:2487   */\n      add\n      swap1\n        /* \"#utility.yul\":2268:2493   */\n      jump\t// out\n        /* \"#utility.yul\":2498:2896   */\n    tag_114:\n        /* \"#utility.yul\":2700:2702   */\n      0x20\n        /* \"#utility.yul\":2682:2703   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2739:2741   */\n      0x22\n        /* \"#utility.yul\":2719:2737   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2712:2742   */\n      mstore\n        /* \"#utility.yul\":2778:2812   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2773:2775   */\n      0x40\n        /* \"#utility.yul\":2758:2776   */\n      dup3\n      add\n        /* \"#utility.yul\":2751:2813   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2844:2846   */\n      0x60\n        /* \"#utility.yul\":2829:2847   */\n      dup3\n      add\n        /* \"#utility.yul\":2822:2854   */\n      mstore\n        /* \"#utility.yul\":2886:2889   */\n      0x80\n        /* \"#utility.yul\":2871:2890   */\n      add\n      swap1\n        /* \"#utility.yul\":2672:2896   */\n      jump\t// out\n        /* \"#utility.yul\":2901:3252   */\n    tag_138:\n        /* \"#utility.yul\":3103:3105   */\n      0x20\n        /* \"#utility.yul\":3085:3106   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3142:3144   */\n      0x1b\n        /* \"#utility.yul\":3122:3140   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3115:3145   */\n      mstore\n        /* \"#utility.yul\":3181:3210   */\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n        /* \"#utility.yul\":3176:3178   */\n      0x40\n        /* \"#utility.yul\":3161:3179   */\n      dup3\n      add\n        /* \"#utility.yul\":3154:3211   */\n      mstore\n        /* \"#utility.yul\":3243:3245   */\n      0x60\n        /* \"#utility.yul\":3228:3246   */\n      add\n      swap1\n        /* \"#utility.yul\":3075:3252   */\n      jump\t// out\n        /* \"#utility.yul\":3257:3658   */\n    tag_119:\n        /* \"#utility.yul\":3459:3461   */\n      0x20\n        /* \"#utility.yul\":3441:3462   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3498:3500   */\n      0x25\n        /* \"#utility.yul\":3478:3496   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3471:3501   */\n      mstore\n        /* \"#utility.yul\":3537:3571   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3532:3534   */\n      0x40\n        /* \"#utility.yul\":3517:3535   */\n      dup3\n      add\n        /* \"#utility.yul\":3510:3572   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3603:3605   */\n      0x60\n        /* \"#utility.yul\":3588:3606   */\n      dup3\n      add\n        /* \"#utility.yul\":3581:3616   */\n      mstore\n        /* \"#utility.yul\":3648:3651   */\n      0x80\n        /* \"#utility.yul\":3633:3652   */\n      add\n      swap1\n        /* \"#utility.yul\":3431:3658   */\n      jump\t// out\n        /* \"#utility.yul\":3663:4063   */\n    tag_111:\n        /* \"#utility.yul\":3865:3867   */\n      0x20\n        /* \"#utility.yul\":3847:3868   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3904:3906   */\n      0x24\n        /* \"#utility.yul\":3884:3902   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3877:3907   */\n      mstore\n        /* \"#utility.yul\":3943:3977   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3938:3940   */\n      0x40\n        /* \"#utility.yul\":3923:3941   */\n      dup3\n      add\n        /* \"#utility.yul\":3916:3978   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4009:4011   */\n      0x60\n        /* \"#utility.yul\":3994:4012   */\n      dup3\n      add\n        /* \"#utility.yul\":3987:4021   */\n      mstore\n        /* \"#utility.yul\":4053:4056   */\n      0x80\n        /* \"#utility.yul\":4038:4057   */\n      add\n      swap1\n        /* \"#utility.yul\":3837:4063   */\n      jump\t// out\n        /* \"#utility.yul\":4068:4245   */\n    tag_28:\n        /* \"#utility.yul\":4214:4239   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":4202:4204   */\n      0x20\n        /* \"#utility.yul\":4187:4205   */\n      add\n      swap1\n        /* \"#utility.yul\":4169:4245   */\n      jump\t// out\n        /* \"#utility.yul\":4250:4434   */\n    tag_37:\n        /* \"#utility.yul\":4422:4426   */\n      0xff\n        /* \"#utility.yul\":4410:4427   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4392:4428   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4380:4382   */\n      0x20\n        /* \"#utility.yul\":4365:4383   */\n      add\n      swap1\n        /* \"#utility.yul\":4347:4434   */\n      jump\t// out\n        /* \"#utility.yul\":4439:4567   */\n    tag_135:\n      0x00\n        /* \"#utility.yul\":4510:4511   */\n      dup3\n        /* \"#utility.yul\":4506:4512   */\n      not\n        /* \"#utility.yul\":4503:4504   */\n      dup3\n        /* \"#utility.yul\":4500:4513   */\n      gt\n        /* \"#utility.yul\":4497:4499   */\n      iszero\n      tag_173\n      jumpi\n        /* \"#utility.yul\":4516:4534   */\n      tag_173\n      tag_174\n      jump\t// in\n    tag_173:\n      pop\n        /* \"#utility.yul\":4552:4561   */\n      add\n      swap1\n        /* \"#utility.yul\":4487:4567   */\n      jump\t// out\n        /* \"#utility.yul\":4572:4697   */\n    tag_132:\n      0x00\n        /* \"#utility.yul\":4640:4641   */\n      dup3\n        /* \"#utility.yul\":4637:4638   */\n      dup3\n        /* \"#utility.yul\":4634:4642   */\n      lt\n        /* \"#utility.yul\":4631:4633   */\n      iszero\n      tag_177\n      jumpi\n        /* \"#utility.yul\":4645:4663   */\n      tag_177\n      tag_174\n      jump\t// in\n    tag_177:\n      pop\n        /* \"#utility.yul\":4682:4691   */\n      sub\n      swap1\n        /* \"#utility.yul\":4621:4697   */\n      jump\t// out\n        /* \"#utility.yul\":4702:5082   */\n    tag_65:\n        /* \"#utility.yul\":4787:4788   */\n      0x02\n        /* \"#utility.yul\":4777:4789   */\n      dup2\n      div\n        /* \"#utility.yul\":4834:4835   */\n      0x01\n        /* \"#utility.yul\":4824:4836   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4845:4847   */\n      tag_179\n      jumpi\n        /* \"#utility.yul\":4899:4903   */\n      0x7f\n        /* \"#utility.yul\":4891:4897   */\n      dup3\n        /* \"#utility.yul\":4887:4904   */\n      and\n        /* \"#utility.yul\":4877:4904   */\n      swap2\n      pop\n        /* \"#utility.yul\":4845:4847   */\n    tag_179:\n        /* \"#utility.yul\":4952:4954   */\n      0x20\n        /* \"#utility.yul\":4944:4950   */\n      dup3\n        /* \"#utility.yul\":4941:4955   */\n      lt\n        /* \"#utility.yul\":4921:4939   */\n      dup2\n        /* \"#utility.yul\":4918:4956   */\n      eq\n        /* \"#utility.yul\":4915:4917   */\n      iszero\n      tag_180\n      jumpi\n        /* \"#utility.yul\":4998:5008   */\n      0x4e487b71\n        /* \"#utility.yul\":4993:4996   */\n      0xe0\n        /* \"#utility.yul\":4989:5009   */\n      shl\n        /* \"#utility.yul\":4986:4987   */\n      0x00\n        /* \"#utility.yul\":4979:5010   */\n      mstore\n        /* \"#utility.yul\":5033:5037   */\n      0x22\n        /* \"#utility.yul\":5030:5031   */\n      0x04\n        /* \"#utility.yul\":5023:5038   */\n      mstore\n        /* \"#utility.yul\":5061:5065   */\n      0x24\n        /* \"#utility.yul\":5058:5059   */\n      0x00\n        /* \"#utility.yul\":5051:5066   */\n      revert\n        /* \"#utility.yul\":4915:4917   */\n    tag_180:\n      pop\n        /* \"#utility.yul\":4757:5082   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5087:5214   */\n    tag_174:\n        /* \"#utility.yul\":5148:5158   */\n      0x4e487b71\n        /* \"#utility.yul\":5143:5146   */\n      0xe0\n        /* \"#utility.yul\":5139:5159   */\n      shl\n        /* \"#utility.yul\":5136:5137   */\n      0x00\n        /* \"#utility.yul\":5129:5160   */\n      mstore\n        /* \"#utility.yul\":5179:5183   */\n      0x11\n        /* \"#utility.yul\":5176:5177   */\n      0x04\n        /* \"#utility.yul\":5169:5184   */\n      mstore\n        /* \"#utility.yul\":5203:5207   */\n      0x24\n        /* \"#utility.yul\":5200:5201   */\n      0x00\n        /* \"#utility.yul\":5193:5208   */\n      revert\n    stop\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa2646970667358221220028ab6e3ff5cee389857e24a52c256709fbc77c0f9227af6407cf1c13f3e46bc64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506109ea806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610712565b60405180910390f35b6100df6100da3660046106de565b610222565b6040516100c39190610707565b6100f461023f565b6040516100c391906108aa565b6100df61010f3660046106a3565b610245565b61011c6102cc565b6040516100c391906108b3565b6100df6101373660046106de565b6102d5565b6100f461014a366004610657565b610323565b6100b6610342565b6100df6101653660046106de565b610351565b6100df6101783660046106de565b6103b9565b6100f461018b366004610671565b6103cd565b60606036805461019f906108f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108f0565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f6103f8565b84846103fc565b50600192915050565b60355490565b60006102528484846104b9565b6102c28461025e6103f8565b6102bd85604051806060016040528060288152602001610968602891396001600160a01b038a1660009081526034602052604081209061029c6103f8565b6001600160a01b0316815260208101919091526040016000205491906105ce565b6103fc565b5060019392505050565b60385460ff1690565b60006102366102e26103f8565b846102bd85603460006102f36103f8565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610605565b6001600160a01b0381166000908152603360205260409020545b919050565b60606037805461019f906108f0565b600061023661035e6103f8565b846102bd8560405180606001604052806025815260200161099060259139603460006103886103f8565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906105ce565b60006102366103c66103f8565b84846104b9565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661042b5760405162461bcd60e51b815260040161042290610866565b60405180910390fd5b6001600160a01b0382166104515760405162461bcd60e51b8152600401610422906107a8565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104ac9085906108aa565b60405180910390a3505050565b6001600160a01b0383166104df5760405162461bcd60e51b815260040161042290610821565b6001600160a01b0382166105055760405162461bcd60e51b815260040161042290610765565b61051083838361063b565b61054d81604051806060016040528060268152602001610942602691396001600160a01b03861660009081526033602052604090205491906105ce565b6001600160a01b03808516600090815260336020526040808220939093559084168152205461057c9082610605565b6001600160a01b0380841660008181526033602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104ac9085906108aa565b600081848411156105f25760405162461bcd60e51b81526004016104229190610712565b506105fd83856108d9565b949350505050565b60008061061283856108c1565b9050838110156106345760405162461bcd60e51b8152600401610422906107ea565b9392505050565b505050565b80356001600160a01b038116811461033d57600080fd5b600060208284031215610668578081fd5b61063482610640565b60008060408385031215610683578081fd5b61068c83610640565b915061069a60208401610640565b90509250929050565b6000806000606084860312156106b7578081fd5b6106c084610640565b92506106ce60208501610640565b9150604084013590509250925092565b600080604083850312156106f0578182fd5b6106f983610640565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561073e57858101830151858201604001528201610722565b8181111561074f5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108d4576108d461092b565b500190565b6000828210156108eb576108eb61092b565b500390565b60028104600182168061090457607f821691505b6020821081141561092557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220028ab6e3ff5cee389857e24a52c256709fbc77c0f9227af6407cf1c13f3e46bc64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9EA DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x657 JUMP JUMPDEST PUSH2 0x323 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x342 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x351 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x8F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x3F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x3FC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x2C2 DUP5 PUSH2 0x25E PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x2BD DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x968 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x29C PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x38 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2E2 PUSH2 0x3F8 JUMP JUMPDEST DUP5 PUSH2 0x2BD DUP6 PUSH1 0x34 PUSH1 0x0 PUSH2 0x2F3 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x35E PUSH2 0x3F8 JUMP JUMPDEST DUP5 PUSH2 0x2BD DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x990 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x34 PUSH1 0x0 PUSH2 0x388 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x3C6 PUSH2 0x3F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x42B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x866 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x7A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4AC SWAP1 DUP6 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x821 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x765 JUMP JUMPDEST PUSH2 0x510 DUP4 DUP4 DUP4 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x54D DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x942 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x57C SWAP1 DUP3 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x4AC SWAP1 DUP6 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x712 JUMP JUMPDEST POP PUSH2 0x5FD DUP4 DUP6 PUSH2 0x8D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x612 DUP4 DUP6 PUSH2 0x8C1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x668 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x634 DUP3 PUSH2 0x640 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x683 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x68C DUP4 PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH2 0x69A PUSH1 0x20 DUP5 ADD PUSH2 0x640 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6B7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6C0 DUP5 PUSH2 0x640 JUMP JUMPDEST SWAP3 POP PUSH2 0x6CE PUSH1 0x20 DUP6 ADD PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6F9 DUP4 PUSH2 0x640 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x73E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x722 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74F JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8D4 JUMPI PUSH2 0x8D4 PUSH2 0x92B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8EB JUMPI PUSH2 0x8EB PUSH2 0x92B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x904 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x925 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220028A 0xB6 0xE3 SELFDESTRUCT 0x5C 0xEE CODESIZE SWAP9 JUMPI 0xE2 0x4A MSTORE 0xC2 JUMP PUSH17 0x9FBC77C0F9227AF6407CF1C13F3E46BC64 PUSH20 0x6F6C634300080000330000000000000000000000 ",
							"sourceMap": "1384:9781:12:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5216:16",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:16",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:16"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:16"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:16",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:16",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:16"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:16",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:16"
															},
															"nodeType": "YulIf",
															"src": "113:2:16"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:16",
														"type": ""
													}
												],
												"src": "14:175:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:16"
															},
															"nodeType": "YulIf",
															"src": "274:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:16",
														"type": ""
													}
												],
												"src": "194:198:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:187:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "530:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:16"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "547:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "532:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "532:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "532:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "505:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "514:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "501:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "501:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "526:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "497:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "497:32:16"
															},
															"nodeType": "YulIf",
															"src": "494:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "565:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "596:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "575:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "575:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "565:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "615:50:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "625:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "625:40:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "615:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "442:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "453:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "465:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "473:6:16",
														"type": ""
													}
												],
												"src": "397:274:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "780:238:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "826:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:16"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "843:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "828:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "828:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "828:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "801:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "810:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "797:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "797:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "822:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "793:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:32:16"
															},
															"nodeType": "YulIf",
															"src": "790:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "861:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "892:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "871:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "871:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "861:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "911:50:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "946:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "957:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "942:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "942:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "921:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:40:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "970:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "997:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1008:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "993:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "993:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "980:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:32:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "970:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "730:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "741:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "753:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "761:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "769:6:16",
														"type": ""
													}
												],
												"src": "676:342:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1110:179:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:26:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1165:6:16"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1173:6:16"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1158:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:22:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:22:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1131:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1140:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1127:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1127:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1152:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1123:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:32:16"
															},
															"nodeType": "YulIf",
															"src": "1120:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1191:41:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1222:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1201:20:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1201:31:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1191:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1241:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1268:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1279:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1264:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1264:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1251:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1241:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1079:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1091:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1099:6:16",
														"type": ""
													}
												],
												"src": "1023:266:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1389:92:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1399:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1411:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1422:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1407:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1407:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1399:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1441:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1466:6:16"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1459:6:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1459:14:16"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1452:6:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1452:22:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1434:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1434:41:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1434:41:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1358:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1369:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1380:4:16",
														"type": ""
													}
												],
												"src": "1294:187:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1607:482:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1617:12:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1627:2:16",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1621:2:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1645:9:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1656:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1638:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1638:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1638:21:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1668:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1688:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1682:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1682:13:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1672:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1715:9:16"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1726:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1711:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1711:18:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1731:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1704:34:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1747:13:16",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1756:4:16"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1751:1:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1819:90:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1848:9:16"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1859:1:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1844:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1844:17:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1863:2:16",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1840:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1840:26:16"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1882:6:16"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1890:1:16"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1878:3:16"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1878:14:16"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1894:2:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1874:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1874:23:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1868:5:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1868:30:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1833:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1833:66:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1833:66:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1780:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1783:6:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1777:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1777:13:16"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1791:19:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1793:15:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1802:1:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1805:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1798:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1798:10:16"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1793:1:16"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1773:3:16",
																"statements": []
															},
															"src": "1769:140:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1943:69:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1972:9:16"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1983:6:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1968:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1968:22:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1992:2:16",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1964:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1964:31:16"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1997:4:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1957:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1957:45:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1957:45:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1924:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1927:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1921:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1921:13:16"
															},
															"nodeType": "YulIf",
															"src": "1918:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2021:62:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2037:9:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2056:6:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2064:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2052:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2052:15:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2073:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2069:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2069:7:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2048:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2048:29:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2033:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2033:45:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2080:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2029:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2029:54:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2021:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1576:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1587:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1598:4:16",
														"type": ""
													}
												],
												"src": "1486:603:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2268:225:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2285:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2296:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2278:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2278:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2278:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2319:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2330:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2315:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2315:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2335:2:16",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2308:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2308:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2358:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2369:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2354:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2374:34:16",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2347:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2347:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2347:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2429:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2440:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2425:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2425:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2445:5:16",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2418:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2418:33:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2418:33:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2460:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2472:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2483:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2468:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2460:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2245:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2259:4:16",
														"type": ""
													}
												],
												"src": "2094:399:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2672:224:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2689:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2700:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2682:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2682:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2723:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2734:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2719:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2719:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2739:2:16",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2712:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2712:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2712:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2762:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2773:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2758:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2758:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2778:34:16",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2751:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2751:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2751:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2833:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2844:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2829:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2829:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2849:4:16",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2822:32:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2822:32:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2863:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2886:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2871:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2863:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2649:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2663:4:16",
														"type": ""
													}
												],
												"src": "2498:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3075:177:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3092:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3103:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3085:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3085:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3085:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3126:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3137:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3122:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3122:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3142:2:16",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3115:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3115:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3115:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3165:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3176:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3161:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3161:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3181:29:16",
																		"type": "",
																		"value": "SafeMath: addition overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3154:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3154:57:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3154:57:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3220:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3232:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3243:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3228:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3228:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3220:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3052:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3066:4:16",
														"type": ""
													}
												],
												"src": "2901:351:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3431:227:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3448:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3459:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3441:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3441:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3441:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3482:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3493:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3478:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3478:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3498:2:16",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3471:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3471:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3471:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3521:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3532:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3517:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3517:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3537:34:16",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3510:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3510:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3510:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3592:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3603:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3588:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3588:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3608:7:16",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3581:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3581:35:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3581:35:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3625:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3637:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3648:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3633:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3633:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3625:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3408:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3422:4:16",
														"type": ""
													}
												],
												"src": "3257:401:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3837:226:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3854:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3865:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3847:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3847:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3847:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3888:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3899:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3884:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3884:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3904:2:16",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3877:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3877:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3877:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3927:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3938:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3923:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3923:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3943:34:16",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3916:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3916:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3916:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3998:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4009:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3994:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3994:18:16"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4014:6:16",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3987:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3987:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3987:34:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4030:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4042:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4053:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4038:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4038:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4030:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3814:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3828:4:16",
														"type": ""
													}
												],
												"src": "3663:400:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4169:76:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4179:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4191:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4202:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4187:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4187:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4179:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4221:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4232:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4214:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4214:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4214:25:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4138:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4149:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4160:4:16",
														"type": ""
													}
												],
												"src": "4068:177:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4347:87:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4357:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4369:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4380:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4365:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4365:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4357:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4399:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4414:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4422:4:16",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4410:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4410:17:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4392:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4392:36:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4392:36:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4316:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4327:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4338:4:16",
														"type": ""
													}
												],
												"src": "4250:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4487:80:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4514:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4516:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4516:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4516:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4503:1:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4510:1:16"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4506:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4506:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4500:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4500:13:16"
															},
															"nodeType": "YulIf",
															"src": "4497:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4545:16:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4556:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4559:1:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4552:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4552:9:16"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4545:3:16"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4470:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4473:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4479:3:16",
														"type": ""
													}
												],
												"src": "4439:128:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4621:76:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4643:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4645:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4645:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4645:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4637:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4640:1:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4634:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4634:8:16"
															},
															"nodeType": "YulIf",
															"src": "4631:2:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4674:17:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4686:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4689:1:16"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4682:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4682:9:16"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "4674:4:16"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4603:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4606:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4612:4:16",
														"type": ""
													}
												],
												"src": "4572:125:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4757:325:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4767:22:16",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4781:4:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4787:1:16",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4777:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4777:12:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4767:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4798:38:16",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4828:4:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4834:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4824:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4824:12:16"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4802:18:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4875:31:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4877:27:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4891:6:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4899:4:16",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4887:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4887:17:16"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4877:6:16"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4855:18:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4848:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4848:26:16"
															},
															"nodeType": "YulIf",
															"src": "4845:2:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4965:111:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4986:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4993:3:16",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4998:10:16",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4989:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4989:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4979:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4979:31:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4979:31:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5030:1:16",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5033:4:16",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5023:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5023:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5023:15:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5058:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5061:4:16",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5051:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5051:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5051:15:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4921:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4944:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4952:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4941:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4941:14:16"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4918:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4918:38:16"
															},
															"nodeType": "YulIf",
															"src": "4915:2:16"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4737:4:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4746:6:16",
														"type": ""
													}
												],
												"src": "4702:380:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5119:95:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5136:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5143:3:16",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5148:10:16",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5139:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5139:20:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5129:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5129:31:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5129:31:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5176:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5179:4:16",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5169:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5169:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5169:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5203:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5193:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5193:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5193:15:16"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "5087:127:16"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 16,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610712565b60405180910390f35b6100df6100da3660046106de565b610222565b6040516100c39190610707565b6100f461023f565b6040516100c391906108aa565b6100df61010f3660046106a3565b610245565b61011c6102cc565b6040516100c391906108b3565b6100df6101373660046106de565b6102d5565b6100f461014a366004610657565b610323565b6100b6610342565b6100df6101653660046106de565b610351565b6100df6101783660046106de565b6103b9565b6100f461018b366004610671565b6103cd565b60606036805461019f906108f0565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108f0565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f6103f8565b84846103fc565b50600192915050565b60355490565b60006102528484846104b9565b6102c28461025e6103f8565b6102bd85604051806060016040528060288152602001610968602891396001600160a01b038a1660009081526034602052604081209061029c6103f8565b6001600160a01b0316815260208101919091526040016000205491906105ce565b6103fc565b5060019392505050565b60385460ff1690565b60006102366102e26103f8565b846102bd85603460006102f36103f8565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610605565b6001600160a01b0381166000908152603360205260409020545b919050565b60606037805461019f906108f0565b600061023661035e6103f8565b846102bd8560405180606001604052806025815260200161099060259139603460006103886103f8565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906105ce565b60006102366103c66103f8565b84846104b9565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661042b5760405162461bcd60e51b815260040161042290610866565b60405180910390fd5b6001600160a01b0382166104515760405162461bcd60e51b8152600401610422906107a8565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104ac9085906108aa565b60405180910390a3505050565b6001600160a01b0383166104df5760405162461bcd60e51b815260040161042290610821565b6001600160a01b0382166105055760405162461bcd60e51b815260040161042290610765565b61051083838361063b565b61054d81604051806060016040528060268152602001610942602691396001600160a01b03861660009081526033602052604090205491906105ce565b6001600160a01b03808516600090815260336020526040808220939093559084168152205461057c9082610605565b6001600160a01b0380841660008181526033602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104ac9085906108aa565b600081848411156105f25760405162461bcd60e51b81526004016104229190610712565b506105fd83856108d9565b949350505050565b60008061061283856108c1565b9050838110156106345760405162461bcd60e51b8152600401610422906107ea565b9392505050565b505050565b80356001600160a01b038116811461033d57600080fd5b600060208284031215610668578081fd5b61063482610640565b60008060408385031215610683578081fd5b61068c83610640565b915061069a60208401610640565b90509250929050565b6000806000606084860312156106b7578081fd5b6106c084610640565b92506106ce60208501610640565b9150604084013590509250925092565b600080604083850312156106f0578182fd5b6106f983610640565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561073e57858101830151858201604001528201610722565b8181111561074f5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108d4576108d461092b565b500190565b6000828210156108eb576108eb61092b565b500390565b60028104600182168061090457607f821691505b6020821081141561092557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220028ab6e3ff5cee389857e24a52c256709fbc77c0f9227af6407cf1c13f3e46bc64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x712 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x657 JUMP JUMPDEST PUSH2 0x323 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x342 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x351 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x8F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x3F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x3FC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x2C2 DUP5 PUSH2 0x25E PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x2BD DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x968 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x29C PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x38 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2E2 PUSH2 0x3F8 JUMP JUMPDEST DUP5 PUSH2 0x2BD DUP6 PUSH1 0x34 PUSH1 0x0 PUSH2 0x2F3 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x35E PUSH2 0x3F8 JUMP JUMPDEST DUP5 PUSH2 0x2BD DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x990 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x34 PUSH1 0x0 PUSH2 0x388 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x3C6 PUSH2 0x3F8 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x42B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x866 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x7A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4AC SWAP1 DUP6 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x821 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x765 JUMP JUMPDEST PUSH2 0x510 DUP4 DUP4 DUP4 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x54D DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x942 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x5CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x57C SWAP1 DUP3 PUSH2 0x605 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x4AC SWAP1 DUP6 SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x712 JUMP JUMPDEST POP PUSH2 0x5FD DUP4 DUP6 PUSH2 0x8D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x612 DUP4 DUP6 PUSH2 0x8C1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x422 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x668 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x634 DUP3 PUSH2 0x640 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x683 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x68C DUP4 PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH2 0x69A PUSH1 0x20 DUP5 ADD PUSH2 0x640 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6B7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6C0 DUP5 PUSH2 0x640 JUMP JUMPDEST SWAP3 POP PUSH2 0x6CE PUSH1 0x20 DUP6 ADD PUSH2 0x640 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6F9 DUP4 PUSH2 0x640 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x73E JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x722 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74F JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8D4 JUMPI PUSH2 0x8D4 PUSH2 0x92B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8EB JUMPI PUSH2 0x8EB PUSH2 0x92B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x904 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x925 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220028A 0xB6 0xE3 SELFDESTRUCT 0x5C 0xEE CODESIZE SWAP9 JUMPI 0xE2 0x4A MSTORE 0xC2 JUMP PUSH17 0x9FBC77C0F9227AF6407CF1C13F3E46BC64 PUSH20 0x6F6C634300080000330000000000000000000000 ",
							"sourceMap": "1384:9781:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2507:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4583:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3574:106::-;;;:::i;:::-;;;;;;;:::i;5216:317::-;;;;;;:::i;:::-;;:::i;3425:89::-;;;:::i;:::-;;;;;;;:::i;5928:215::-;;;;;;:::i;:::-;;:::i;3738:125::-;;;;;;:::i;:::-;;:::i;2709:93::-;;;:::i;6630:266::-;;;;;;:::i;:::-;;:::i;4066:172::-;;;;;;:::i;:::-;;:::i;4296:149::-;;;;;;:::i;:::-;;:::i;2507:89::-;2552:13;2584:5;2577:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2507:89;:::o;4583:166::-;4666:4;4682:39;4691:12;:10;:12::i;:::-;4705:7;4714:6;4682:8;:39::i;:::-;-1:-1:-1;4738:4:12;4583:166;;;;:::o;3574:106::-;3661:12;;3574:106;:::o;5216:317::-;5322:4;5338:36;5348:6;5356:9;5367:6;5338:9;:36::i;:::-;5384:121;5393:6;5401:12;:10;:12::i;:::-;5415:89;5453:6;5415:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5415:19:12;;;;;;:11;:19;;;;;;5435:12;:10;:12::i;:::-;-1:-1:-1;;;;;5415:33:12;;;;;;;;;;;;-1:-1:-1;5415:33:12;;;:89;:37;:89::i;:::-;5384:8;:121::i;:::-;-1:-1:-1;5522:4:12;5216:317;;;;;:::o;3425:89::-;3498:9;;;;3425:89;:::o;5928:215::-;6016:4;6032:83;6041:12;:10;:12::i;:::-;6055:7;6064:50;6103:10;6064:11;:25;6076:12;:10;:12::i;:::-;-1:-1:-1;;;;;6064:25:12;;;;;;;;;;;;;;;;;-1:-1:-1;6064:25:12;;;:34;;;;;;;;;;;:38;:50::i;3738:125::-;-1:-1:-1;;;;;3838:18:12;;3812:7;3838:18;;;:9;:18;;;;;;3738:125;;;;:::o;2709:93::-;2756:13;2788:7;2781:14;;;;;:::i;6630:266::-;6723:4;6739:129;6748:12;:10;:12::i;:::-;6762:7;6771:96;6810:15;6771:96;;;;;;;;;;;;;;;;;:11;:25;6783:12;:10;:12::i;:::-;-1:-1:-1;;;;;6771:25:12;;;;;;;;;;;;;;;;;-1:-1:-1;6771:25:12;;;:34;;;;;;;;;;;:96;:38;:96::i;4066:172::-;4152:4;4168:42;4178:12;:10;:12::i;:::-;4192:9;4203:6;4168:9;:42::i;4296:149::-;-1:-1:-1;;;;;4411:18:12;;;4385:7;4411:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4296:149::o;828:113:6:-;923:10;828:113;:::o;9694:340:12:-;-1:-1:-1;;;;;9795:19:12;;9787:68;;;;-1:-1:-1;;;9787:68:12;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;9873:21:12;;9865:68;;;;-1:-1:-1;;;9865:68:12;;;;;;;:::i;:::-;-1:-1:-1;;;;;9944:18:12;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;9995:32;;;;;9974:6;;9995:32;:::i;:::-;;;;;;;;9694:340;;;:::o;7370:530::-;-1:-1:-1;;;;;7475:20:12;;7467:70;;;;-1:-1:-1;;;7467:70:12;;;;;;;:::i;:::-;-1:-1:-1;;;;;7555:23:12;;7547:71;;;;-1:-1:-1;;;7547:71:12;;;;;;;:::i;:::-;7629:47;7650:6;7658:9;7669:6;7629:20;:47::i;:::-;7707:71;7729:6;7707:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7707:17:12;;;;;;:9;:17;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;7687:17:12;;;;;;;:9;:17;;;;;;:91;;;;7811:20;;;;;;;:32;;7836:6;7811:24;:32::i;:::-;-1:-1:-1;;;;;7788:20:12;;;;;;;:9;:20;;;;;;;:55;;;;7858:35;;;;;;;;;;7886:6;;7858:35;:::i;5443:163:13:-;5529:7;5564:12;5556:6;;;;5548:29;;;;-1:-1:-1;;;5548:29:13;;;;;;;;:::i;:::-;-1:-1:-1;5594:5:13;5598:1;5594;:5;:::i;:::-;5587:12;5443:163;-1:-1:-1;;;;5443:163:13:o;2701:175::-;2759:7;;2790:5;2794:1;2790;:5;:::i;:::-;2778:17;;2818:1;2813;:6;;2805:46;;;;-1:-1:-1;;;2805:46:13;;;;;;;:::i;:::-;2868:1;2701:175;-1:-1:-1;;;2701:175:13:o;11040:92:12:-;;;;:::o;14:175:16:-;84:20;;-1:-1:-1;;;;;133:31:16;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:16:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:16;2052:15;-1:-1:-1;;2048:29:16;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:16:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:16;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:16;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:351::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:29;3176:2;3161:18;;3154:57;3243:2;3228:18;;3075:177::o;3257:401::-;3459:2;3441:21;;;3498:2;3478:18;;;3471:30;3537:34;3532:2;3517:18;;3510:62;-1:-1:-1;;;3603:2:16;3588:18;;3581:35;3648:3;3633:19;;3431:227::o;3663:400::-;3865:2;3847:21;;;3904:2;3884:18;;;3877:30;3943:34;3938:2;3923:18;;3916:62;-1:-1:-1;;;4009:2:16;3994:18;;3987:34;4053:3;4038:19;;3837:226::o;4068:177::-;4214:25;;;4202:2;4187:18;;4169:76::o;4250:184::-;4422:4;4410:17;;;;4392:36;;4380:2;4365:18;;4347:87::o;4439:128::-;;4510:1;4506:6;4503:1;4500:13;4497:2;;;4516:18;;:::i;:::-;-1:-1:-1;4552:9:16;;4487:80::o;4572:125::-;;4640:1;4637;4634:8;4631:2;;;4645:18;;:::i;:::-;-1:-1:-1;4682:9:16;;4621:76::o;4702:380::-;4787:1;4777:12;;4834:1;4824:12;;;4845:2;;4899:4;4891:6;4887:17;4877:27;;4845:2;4952;4944:6;4941:14;4921:18;4918:38;4915:2;;;4998:10;4993:3;4989:20;4986:1;4979:31;5033:4;5030:1;5023:15;5061:4;5058:1;5051:15;4915:2;;4757:325;;;:::o;5087:127::-;5148:10;5143:3;5139:20;5136:1;5129:31;5179:4;5176:1;5169:15;5203:4;5200:1;5193:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "507600",
								"executionCost": "543",
								"totalCost": "508143"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22606",
								"balanceOf(address)": "infinite",
								"decimals()": "1135",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1073",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_setupDecimals(uint8)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1384,
									"end": 11165,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220028ab6e3ff5cee389857e24a52c256709fbc77c0f9227af6407cf1c13f3e46bc64736f6c63430008000033",
									".code": [
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "39509351"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "39509351"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "A457C2D7"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "DD62ED3E"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1384,
											"end": 11165,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2552,
											"end": 2565,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2584,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2577,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2507,
											"end": 2596,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4666,
											"end": 4670,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 4691,
											"end": 4701,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "tag",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 4691,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4705,
											"end": 4712,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4714,
											"end": 4720,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4682,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "tag",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 4682,
											"end": 4721,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4738,
											"end": 4742,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4749,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3661,
											"end": 3673,
											"name": "PUSH",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 3661,
											"end": 3673,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3574,
											"end": 3680,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5322,
											"end": 5326,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 5348,
											"end": 5354,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5356,
											"end": 5365,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5367,
											"end": 5373,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5338,
											"end": 5347,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "78"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "tag",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 5338,
											"end": 5374,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 5401,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "tag",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 5401,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 5453,
											"end": 5459,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH data",
											"source": 12,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "PUSH",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5426,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5434,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 5435,
											"end": 5445,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 5435,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5448,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5452,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 5415,
											"end": 5504,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5384,
											"end": 5392,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "tag",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 5384,
											"end": 5505,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5522,
											"end": 5526,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5216,
											"end": 5533,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "tag",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "PUSH",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3425,
											"end": 3514,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5928,
											"end": 6143,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6016,
											"end": 6020,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6032,
											"end": 6115,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 6041,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "tag",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 6041,
											"end": 6053,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6055,
											"end": 6062,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 6103,
											"end": 6113,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6075,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 6076,
											"end": 6086,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 6076,
											"end": 6088,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6089,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6064,
											"end": 6102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 6064,
											"end": 6114,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 3838,
											"end": 3856,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3738,
											"end": 3863,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "tag",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 2709,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2756,
											"end": 2769,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2788,
											"end": 2795,
											"name": "PUSH",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2781,
											"end": 2795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 6630,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6723,
											"end": 6727,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6739,
											"end": 6868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 6748,
											"end": 6758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "tag",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 6748,
											"end": 6760,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6762,
											"end": 6769,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 6810,
											"end": 6825,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH data",
											"source": 12,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "PUSH",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6782,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 6783,
											"end": 6793,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 6783,
											"end": 6795,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6796,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "DUP14",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6805,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6809,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 6771,
											"end": 6867,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4238,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4152,
											"end": 4156,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4210,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "71"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 4178,
											"end": 4188,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "tag",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 4178,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4192,
											"end": 4201,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4203,
											"end": 4209,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4168,
											"end": 4177,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "78"
										},
										{
											"begin": 4168,
											"end": 4210,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4385,
											"end": 4392,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4422,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4429,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4411,
											"end": 4438,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4296,
											"end": 4445,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 828,
											"end": 941,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 828,
											"end": 941,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 923,
											"end": 933,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 828,
											"end": 941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 828,
											"end": 941,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9795,
											"end": 9814,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9795,
											"end": 9814,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "tag",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "tag",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 9787,
											"end": 9855,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9873,
											"end": 9894,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9873,
											"end": 9894,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 9865,
											"end": 9933,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9955,
											"name": "PUSH",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9962,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9971,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9944,
											"end": 9980,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9974,
											"end": 9980,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9974,
											"end": 9980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "tag",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9995,
											"end": 10027,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9694,
											"end": 10034,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7370,
											"end": 7900,
											"name": "tag",
											"source": 12,
											"value": "78"
										},
										{
											"begin": 7370,
											"end": 7900,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7475,
											"end": 7495,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7475,
											"end": 7495,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 7467,
											"end": 7537,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7555,
											"end": 7578,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7555,
											"end": 7578,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 7547,
											"end": 7618,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 7650,
											"end": 7656,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7658,
											"end": 7667,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7669,
											"end": 7675,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7629,
											"end": 7649,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "tag",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 7629,
											"end": 7676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 7729,
											"end": 7735,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH data",
											"source": 12,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "PUSH",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "CODECOPY",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7716,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7728,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 7707,
											"end": 7778,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7696,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7704,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7778,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7831,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7836,
											"end": 7842,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7811,
											"end": 7835,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 7811,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7797,
											"name": "PUSH",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7808,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7788,
											"end": 7843,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7892,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7892,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 7858,
											"end": 7893,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "tag",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5536,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5576,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 5556,
											"end": 5562,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "129"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "tag",
											"source": 13,
											"value": "129"
										},
										{
											"begin": 5548,
											"end": 5577,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 5598,
											"end": 5599,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5594,
											"end": 5595,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "132"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "tag",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 5594,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5587,
											"end": 5599,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5443,
											"end": 5606,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "tag",
											"source": 13,
											"value": "90"
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2759,
											"end": 2766,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2766,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "134"
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2791,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "135"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "tag",
											"source": 13,
											"value": "134"
										},
										{
											"begin": 2790,
											"end": 2795,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2778,
											"end": 2795,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2778,
											"end": 2795,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2814,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "136"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "tag",
											"source": 13,
											"value": "136"
										},
										{
											"begin": 2805,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2868,
											"end": 2869,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2701,
											"end": 2876,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11040,
											"end": 11132,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "91"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "136"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "tag",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 397,
											"end": 671,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 526,
											"end": 528,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 514,
											"end": 523,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 505,
											"end": 512,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 501,
											"end": 524,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 497,
											"end": 529,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 494,
											"end": 496,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 494,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 547,
											"end": 553,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 532,
											"end": 554,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 494,
											"end": 496,
											"name": "tag",
											"source": 16,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 596,
											"end": 605,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "tag",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 565,
											"end": 606,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 565,
											"end": 606,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 661,
											"end": 663,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 646,
											"end": 664,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "tag",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 615,
											"end": 665,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 615,
											"end": 665,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 484,
											"end": 671,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "tag",
											"source": 16,
											"value": "31"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 824,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 810,
											"end": 819,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 801,
											"end": 808,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 797,
											"end": 820,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 793,
											"end": 825,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 790,
											"end": 792,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 790,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 828,
											"end": 850,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 790,
											"end": 792,
											"name": "tag",
											"source": 16,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 892,
											"end": 901,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "tag",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 861,
											"end": 902,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 861,
											"end": 902,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "154"
										},
										{
											"begin": 957,
											"end": 959,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 946,
											"end": 955,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "tag",
											"source": 16,
											"value": "154"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 911,
											"end": 961,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 911,
											"end": 961,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1008,
											"end": 1010,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 993,
											"end": 1011,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 980,
											"end": 1012,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "tag",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1152,
											"end": 1154,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1140,
											"end": 1149,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1131,
											"end": 1138,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1127,
											"end": 1150,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1123,
											"end": 1155,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1173,
											"end": 1179,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1158,
											"end": 1180,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "tag",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "157"
										},
										{
											"begin": 1222,
											"end": 1231,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "tag",
											"source": 16,
											"value": "157"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1191,
											"end": 1232,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 1281,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1289,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "tag",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1452,
											"end": 1474,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1422,
											"end": 1424,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1389,
											"end": 1481,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "tag",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1627,
											"end": 1629,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1656,
											"end": 1658,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1645,
											"end": 1654,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1638,
											"end": 1659,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1688,
											"end": 1694,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1682,
											"end": 1695,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1731,
											"end": 1737,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1715,
											"end": 1724,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1704,
											"end": 1738,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1756,
											"end": 1760,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1783,
											"end": 1789,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1780,
											"end": 1781,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1777,
											"end": 1790,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1868,
											"end": 1898,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1840,
											"end": 1866,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1833,
											"end": 1899,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1927,
											"end": 1933,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1924,
											"end": 1925,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1921,
											"end": 1934,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1997,
											"end": 2001,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1992,
											"end": 1994,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 1989,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1972,
											"end": 1981,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 1968,
											"end": 1990,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1964,
											"end": 1995,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1957,
											"end": 2002,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "tag",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2073,
											"end": 2075,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2052,
											"end": 2067,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2048,
											"end": 2077,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "tag",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2296,
											"end": 2298,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2335,
											"end": 2337,
											"name": "PUSH",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2308,
											"end": 2338,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2374,
											"end": 2408,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2369,
											"end": 2371,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2347,
											"end": 2409,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2418,
											"end": 2451,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2483,
											"end": 2486,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2268,
											"end": 2493,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "tag",
											"source": 16,
											"value": "114"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2700,
											"end": 2702,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2739,
											"end": 2741,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2712,
											"end": 2742,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2778,
											"end": 2812,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2773,
											"end": 2775,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2751,
											"end": 2813,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2844,
											"end": 2846,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2822,
											"end": 2854,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2886,
											"end": 2889,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2672,
											"end": 2896,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2901,
											"end": 3252,
											"name": "tag",
											"source": 16,
											"value": "138"
										},
										{
											"begin": 2901,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3103,
											"end": 3105,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3142,
											"end": 3144,
											"name": "PUSH",
											"source": 16,
											"value": "1B"
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3115,
											"end": 3145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3181,
											"end": 3210,
											"name": "PUSH",
											"source": 16,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 3176,
											"end": 3178,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3154,
											"end": 3211,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3243,
											"end": 3245,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3075,
											"end": 3252,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 3257,
											"end": 3658,
											"name": "tag",
											"source": 16,
											"value": "119"
										},
										{
											"begin": 3257,
											"end": 3658,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3459,
											"end": 3461,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3441,
											"end": 3462,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3441,
											"end": 3462,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3441,
											"end": 3462,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3498,
											"end": 3500,
											"name": "PUSH",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 3478,
											"end": 3496,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3478,
											"end": 3496,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3478,
											"end": 3496,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3471,
											"end": 3501,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3537,
											"end": 3571,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3532,
											"end": 3534,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3517,
											"end": 3535,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3517,
											"end": 3535,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3510,
											"end": 3572,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3603,
											"end": 3605,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3581,
											"end": 3616,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3648,
											"end": 3651,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3633,
											"end": 3652,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3633,
											"end": 3652,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3431,
											"end": 3658,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 3663,
											"end": 4063,
											"name": "tag",
											"source": 16,
											"value": "111"
										},
										{
											"begin": 3663,
											"end": 4063,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3865,
											"end": 3867,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3847,
											"end": 3868,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3847,
											"end": 3868,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3847,
											"end": 3868,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3904,
											"end": 3906,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 3884,
											"end": 3902,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3884,
											"end": 3902,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3884,
											"end": 3902,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3877,
											"end": 3907,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3943,
											"end": 3977,
											"name": "PUSH",
											"source": 16,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3938,
											"end": 3940,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3923,
											"end": 3941,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3923,
											"end": 3941,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3916,
											"end": 3978,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4009,
											"end": 4011,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3994,
											"end": 4012,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3994,
											"end": 4012,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3987,
											"end": 4021,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4053,
											"end": 4056,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 4038,
											"end": 4057,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4038,
											"end": 4057,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3837,
											"end": 4063,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4068,
											"end": 4245,
											"name": "tag",
											"source": 16,
											"value": "28"
										},
										{
											"begin": 4068,
											"end": 4245,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4214,
											"end": 4239,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4214,
											"end": 4239,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4214,
											"end": 4239,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4202,
											"end": 4204,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4169,
											"end": 4245,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4250,
											"end": 4434,
											"name": "tag",
											"source": 16,
											"value": "37"
										},
										{
											"begin": 4250,
											"end": 4434,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4422,
											"end": 4426,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 4410,
											"end": 4427,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4410,
											"end": 4427,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4410,
											"end": 4427,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4410,
											"end": 4427,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4392,
											"end": 4428,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4392,
											"end": 4428,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4380,
											"end": 4382,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4365,
											"end": 4383,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4365,
											"end": 4383,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4347,
											"end": 4434,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4439,
											"end": 4567,
											"name": "tag",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 4439,
											"end": 4567,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4439,
											"end": 4567,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4510,
											"end": 4511,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4506,
											"end": 4512,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 4503,
											"end": 4504,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4500,
											"end": 4513,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 4497,
											"end": 4499,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4497,
											"end": 4499,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 4497,
											"end": 4499,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "tag",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 4516,
											"end": 4534,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4552,
											"end": 4561,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4552,
											"end": 4561,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4487,
											"end": 4567,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4572,
											"end": 4697,
											"name": "tag",
											"source": 16,
											"value": "132"
										},
										{
											"begin": 4572,
											"end": 4697,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4572,
											"end": 4697,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4640,
											"end": 4641,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4637,
											"end": 4638,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4634,
											"end": 4642,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 4631,
											"end": 4633,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4631,
											"end": 4633,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 4631,
											"end": 4633,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4645,
											"end": 4663,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 4645,
											"end": 4663,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 4645,
											"end": 4663,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4645,
											"end": 4663,
											"name": "tag",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 4645,
											"end": 4663,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4682,
											"end": 4691,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 4682,
											"end": 4691,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4621,
											"end": 4697,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 4702,
											"end": 5082,
											"name": "tag",
											"source": 16,
											"value": "65"
										},
										{
											"begin": 4702,
											"end": 5082,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4787,
											"end": 4788,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 4777,
											"end": 4789,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4777,
											"end": 4789,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 4834,
											"end": 4835,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 4824,
											"end": 4836,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4824,
											"end": 4836,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4824,
											"end": 4836,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4845,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 4845,
											"end": 4847,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4899,
											"end": 4903,
											"name": "PUSH",
											"source": 16,
											"value": "7F"
										},
										{
											"begin": 4891,
											"end": 4897,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4887,
											"end": 4904,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4877,
											"end": 4904,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4877,
											"end": 4904,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4845,
											"end": 4847,
											"name": "tag",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 4845,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4952,
											"end": 4954,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4944,
											"end": 4950,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4941,
											"end": 4955,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 4921,
											"end": 4939,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4918,
											"end": 4956,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4998,
											"end": 5008,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 4993,
											"end": 4996,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 4989,
											"end": 5009,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 4986,
											"end": 4987,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4979,
											"end": 5010,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5033,
											"end": 5037,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 5030,
											"end": 5031,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 5023,
											"end": 5038,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5061,
											"end": 5065,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 5058,
											"end": 5059,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5051,
											"end": 5066,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "tag",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4915,
											"end": 4917,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4757,
											"end": 5082,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4757,
											"end": 5082,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4757,
											"end": 5082,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4757,
											"end": 5082,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 5087,
											"end": 5214,
											"name": "tag",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 5087,
											"end": 5214,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5148,
											"end": 5158,
											"name": "PUSH",
											"source": 16,
											"value": "4E487B71"
										},
										{
											"begin": 5143,
											"end": 5146,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 5139,
											"end": 5159,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 5136,
											"end": 5137,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5129,
											"end": 5160,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5179,
											"end": 5183,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 5176,
											"end": 5177,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 5169,
											"end": 5184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 5203,
											"end": 5207,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 5200,
											"end": 5201,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5193,
											"end": 5208,
											"name": "REVERT",
											"source": 16
										}
									],
									".data": {
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x1e4148e9fb5294b9d70d40d67d98bef18722e23bb82f4856a77968328769e272\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e39ce0f7e96988feefdab801546248d1d8122d954af7c3e20db37b7fe46131e\",\"dweb:/ipfs/QmXKi6b1okq7UNE1twToQBaQyxdm6WpqNcS1LuCqDCGavU\"]},\"src/libraries/ContextUpgradeable.sol\":{\"keccak256\":\"0x3d5d4a7ce156bec766b22364b8ac3911290575cd5215d549961fc840cb31f0d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://604f016834642e34a937d4306c49e75566f955dc118b36de57f4d7151be0af1d\",\"dweb:/ipfs/QmeWxCq3BU3ZJP2fYeaVK2GxYhm4onij7sq6bgYoD6CnaT\"]},\"src/libraries/ERC20Upgradeable.sol\":{\"keccak256\":\"0x59a81b59af7943208f0edd84a38e397adfc6305fc8105065f41f2fd41f92f37a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5c5bc6065e2d466771d19480dfcdfefc419ba1c4886f8797137f7fc8de45964\",\"dweb:/ipfs/QmbpvoFewMnhEcercKFS1wP15tjLYr7No65EDgxMn4DExw\"]},\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]},\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 649,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1259,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1265,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1267,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 1269,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 1271,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1273,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_decimals",
								"offset": 0,
								"slot": "56",
								"type": "t_uint8"
							},
							{
								"astId": 1768,
								"contract": "src/libraries/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "57",
								"type": "t_array(t_uint256)44_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)44_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[44]",
								"numberOfBytes": "1408"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/libraries/SafeMathUpgradeable.sol": {
				"SafeMathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/libraries/SafeMathUpgradeable.sol\":630:7235  library SafeMathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/libraries/SafeMathUpgradeable.sol\":630:7235  library SafeMathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122089996d946b4c9386bb5358b47f1c0abe56731778a48cc3e3e4d7555664d06cee64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089996d946b4c9386bb5358b47f1c0abe56731778a48cc3e3e4d7555664d06cee64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SWAP10 PUSH14 0x946B4C9386BB5358B47F1C0ABE56 PUSH20 0x1778A48CC3E3E4D7555664D06CEE64736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "630:6605:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;630:6605:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089996d946b4c9386bb5358b47f1c0abe56731778a48cc3e3e4d7555664d06cee64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SWAP10 PUSH14 0x946B4C9386BB5358B47F1C0ABE56 PUSH20 0x1778A48CC3E3E4D7555664D06CEE64736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "630:6605:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 630,
									"end": 7235,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122089996d946b4c9386bb5358b47f1c0abe56731778a48cc3e3e4d7555664d06cee64736f6c63430008000033",
									".code": [
										{
											"begin": 630,
											"end": 7235,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 630,
											"end": 7235,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/SafeMathUpgradeable.sol\":\"SafeMathUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x2fb64876303af2b8188e2f8a0c5f95f56366de769fd87f7afdec70c1d4020659\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fe5447b81e470acea7a13b4ee7bb26492f7ed7bd8cd0823e5ab7bc9a73db416\",\"dweb:/ipfs/QmPLHepmdX5uGayvoQS7s29zgR1Aw5xy9xNLFTJjGjC3Ra\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/proxy/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxy/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/proxy/Initializable.sol\":{\"keccak256\":\"0xa126fc31d6f8fa9d0e016041464bfe9256cde74f1cfd71d19d89876776aac267\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f343a9b4fe7c4c0091d9ca0e72cf0224c2fe557a7d2c02fde01a9d95aa17c3b5\",\"dweb:/ipfs/QmfFkgwuGPVKPwZeBUDkC2RamUZmY5Tt1rNxahhpY2xjZR\"]},\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2131,
								"contract": "src/proxy/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2134,
								"contract": "src/proxy/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/utils/AddressUpgradeable.sol\":134:6849  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/utils/AddressUpgradeable.sol\":134:6849  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122085efee5ad61bbee748692b2ead6928cdd5027ccc7f5124d2a6b983f8a823b54b64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085efee5ad61bbee748692b2ead6928cdd5027ccc7f5124d2a6b983f8a823b54b64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEF 0xEE GAS 0xD6 SHL 0xBE 0xE7 0x48 PUSH10 0x2B2EAD6928CDD5027CCC PUSH32 0x5124D2A6B983F8A823B54B64736F6C6343000800003300000000000000000000 ",
							"sourceMap": "134:6715:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;134:6715:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085efee5ad61bbee748692b2ead6928cdd5027ccc7f5124d2a6b983f8a823b54b64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEF 0xEE GAS 0xD6 SHL 0xBE 0xE7 0x48 PUSH10 0x2B2EAD6928CDD5027CCC PUSH32 0x5124D2A6B983F8A823B54B64736F6C6343000800003300000000000000000000 ",
							"sourceMap": "134:6715:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122085efee5ad61bbee748692b2ead6928cdd5027ccc7f5124d2a6b983f8a823b54b64736f6c63430008000033",
									".code": [
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x1c40ee776b336e29c9f21a2fa2dc2f50c65553b0daa35baa43ae50dc34edbbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9cb9358d8e740ad355164ea7c8e1f6be2ebfddf73ac34aaa9360d78cc14e3d4\",\"dweb:/ipfs/QmXJtKbn9GVhfxdz2NMcg1cwwxqfHk3GEymwSU3Yh8M12L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/libraries/ERC20PermitUpgradeable.sol:41:43:\n   |\n41 |     function __ERC20Permit_init_unchained(string memory name) internal initializer {\n   |                                           ^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1649,
					"file": "src/libraries/ERC20PermitUpgradeable.sol",
					"start": 1631
				},
				"type": "Warning"
			}
		],
		"sources": {
			"src/LPToken.sol": {
				"ast": {
					"absolutePath": "src/LPToken.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"CountersUpgradeable": [
							703
						],
						"ECDSAUpgradeable": [
							819
						],
						"EIP712Upgradeable": [
							979
						],
						"ERC20BurnableUpgradeable": [
							1063
						],
						"ERC20PermitUpgradeable": [
							1239
						],
						"ERC20Upgradeable": [
							1769
						],
						"IERC20": [
							310
						],
						"IERC20PermitUpgradeable": [
							346
						],
						"IERC20Upgradeable": [
							424
						],
						"ISwap": [
							602
						],
						"Initializable": [
							2190
						],
						"LPToken": [
							101
						],
						"OwnableUpgradeable": [
							232
						],
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 102,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:0"
						},
						{
							"absolutePath": "src/libraries/ERC20BurnableUpgradeable.sol",
							"file": "./libraries/ERC20BurnableUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 102,
							"sourceUnit": 1064,
							"src": "56:50:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/OwnableUpgradeable.sol",
							"file": "./OwnableUpgradeable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 102,
							"sourceUnit": 233,
							"src": "107:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/SafeMathUpgradeable.sol",
							"file": "./libraries/SafeMathUpgradeable.sol",
							"id": 4,
							"nodeType": "ImportDirective",
							"scope": 102,
							"sourceUnit": 2125,
							"src": "142:45:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/ERC20PermitUpgradeable.sol",
							"file": "./libraries/ERC20PermitUpgradeable.sol",
							"id": 5,
							"nodeType": "ImportDirective",
							"scope": 102,
							"sourceUnit": 1240,
							"src": "188:48:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/ISwap.sol",
							"file": "./interfaces/ISwap.sol",
							"id": 6,
							"nodeType": "ImportDirective",
							"scope": 102,
							"sourceUnit": 603,
							"src": "237:32:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 8,
										"name": "ERC20PermitUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1239,
										"src": "590:22:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "590:22:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "ERC20BurnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1063,
										"src": "614:24:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "614:24:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 232,
										"src": "640:18:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "640:18:0"
								}
							],
							"contractDependencies": [
								232,
								346,
								424,
								650,
								979,
								1063,
								1239,
								1769,
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 7,
								"nodeType": "StructuredDocumentation",
								"src": "271:298:0",
								"text": " @title Liquidity Provider Token\n @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\n It is used to represent user's shares when providing liquidity to swap contracts.\n @dev Only Swap contracts should initialize and own LPToken contracts."
							},
							"fullyImplemented": true,
							"id": 101,
							"linearizedBaseContracts": [
								101,
								232,
								1063,
								1239,
								979,
								346,
								1769,
								424,
								650,
								2190
							],
							"name": "LPToken",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 16,
									"libraryName": {
										"id": 14,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2124,
										"src": "671:19:0"
									},
									"nodeType": "UsingForDirective",
									"src": "665:38:0",
									"typeName": {
										"id": 15,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "695:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1143:180:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 28,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "1153:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1153:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 30,
												"nodeType": "ExpressionStatement",
												"src": "1153:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 32,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "1212:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 33,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "1218:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 31,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "1189:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1189:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1189:36:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 37,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "1254:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 36,
														"name": "__ERC20Permit_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "1235:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory)"
														}
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1235:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "1235:24:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 154,
														"src": "1269:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1269:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1269:26:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1312:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 27,
												"id": 44,
												"nodeType": "Return",
												"src": "1305:11:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "709:303:0",
										"text": " @notice Initializes this LPToken contract with the given name and symbol\n @dev The caller of this function will become the owner. A Swap contract should call this\n in its initializer function.\n @param name name of this token\n @param symbol symbol of this token"
									},
									"functionSelector": "4cd88b76",
									"id": 46,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 24,
											"modifierName": {
												"id": 23,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "1104:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1104:11:0"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1037:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 18,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1037:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "symbol",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1057:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 20,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1057:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1036:42:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1133:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 25,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1133:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1132:6:0"
									},
									"scope": 101,
									"src": "1017:306:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "1642:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 59,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 57,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 51,
																"src": "1660:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 58,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1670:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1660:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2063616e6e6f74206d696e742030",
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1673:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc",
																"typeString": "literal_string \"LPToken: cannot mint 0\""
															},
															"value": "LPToken: cannot mint 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc",
																"typeString": "literal_string \"LPToken: cannot mint 0\""
															}
														],
														"id": 56,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1652:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1652:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 62,
												"nodeType": "ExpressionStatement",
												"src": "1652:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 64,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 49,
															"src": "1714:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 65,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 51,
															"src": "1725:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 63,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1641,
														"src": "1708:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1708:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 67,
												"nodeType": "ExpressionStatement",
												"src": "1708:24:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1329:240:0",
										"text": " @notice Mints the given amount of LPToken to the recipient.\n @dev only owner can call this mint function\n @param recipient address of account to receive the tokens\n @param amount amount of tokens to mint"
									},
									"functionSelector": "40c10f19",
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 54,
											"modifierName": {
												"id": 53,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 177,
												"src": "1632:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1632:9:0"
										}
									],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "1588:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1588:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "1607:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1607:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1587:35:0"
									},
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1642:0:0"
									},
									"scope": 101,
									"src": "1574:165:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1764
									],
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "2094:133:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 84,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 72,
															"src": "2131:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 85,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 74,
															"src": "2137:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 86,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "2141:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 81,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2104:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_LPToken_$101_$",
																"typeString": "type(contract super LPToken)"
															}
														},
														"id": 83,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1764,
														"src": "2104:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2104:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 88,
												"nodeType": "ExpressionStatement",
												"src": "2104:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 90,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 74,
																"src": "2166:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 93,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2180:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_LPToken_$101",
																			"typeString": "contract LPToken"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_LPToken_$101",
																			"typeString": "contract LPToken"
																		}
																	],
																	"id": 92,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2172:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 91,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2172:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 94,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2172:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2166:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c66",
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2187:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f",
																"typeString": "literal_string \"LPToken: cannot send to itself\""
															},
															"value": "LPToken: cannot send to itself"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f",
																"typeString": "literal_string \"LPToken: cannot send to itself\""
															}
														],
														"id": 89,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2158:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2158:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "2158:62:0"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "1745:198:0",
										"text": " @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n minting and burning. * This assumes the owner is set to a Swap contract's address."
									},
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 79,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 78,
												"name": "ERC20Upgradeable",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1769,
												"src": "2076:16:0"
											}
										],
										"src": "2067:26:0"
									},
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "1987:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1987:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2009:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2009:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2029:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2029:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1977:72:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2094:0:0"
									},
									"scope": 101,
									"src": "1948:279:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 102,
							"src": "570:1659:0"
						}
					],
					"src": "32:2197:0"
				},
				"id": 0
			},
			"src/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"Initializable": [
							2190
						],
						"OwnableUpgradeable": [
							232
						]
					},
					"id": 233,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 103,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"absolutePath": "src/libraries/ContextUpgradeable.sol",
							"file": "./libraries/ContextUpgradeable.sol",
							"id": 104,
							"nodeType": "ImportDirective",
							"scope": 233,
							"sourceUnit": 651,
							"src": "66:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "./proxy/Initializable.sol",
							"id": 105,
							"nodeType": "ImportDirective",
							"scope": 233,
							"sourceUnit": 2191,
							"src": "111:35:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 107,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "682:13:1"
									},
									"id": 108,
									"nodeType": "InheritanceSpecifier",
									"src": "682:13:1"
								},
								{
									"baseName": {
										"id": 109,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 650,
										"src": "697:18:1"
									},
									"id": 110,
									"nodeType": "InheritanceSpecifier",
									"src": "697:18:1"
								}
							],
							"contractDependencies": [
								650,
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 106,
								"nodeType": "StructuredDocumentation",
								"src": "147:494:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 232,
							"linearizedBaseContracts": [
								232,
								650,
								2190
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 112,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 232,
									"src": "722:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 111,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "722:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 118,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "778:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "809:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "809:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:57:1"
									},
									"src": "751:84:1"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "984:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 124,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "994:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "994:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 126,
												"nodeType": "ExpressionStatement",
												"src": "994:26:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 127,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 154,
														"src": "1030:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1030:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1030:26:1"
											}
										]
									},
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "841:91:1",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 131,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 122,
											"modifierName": {
												"id": 121,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "972:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "972:11:1"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "960:2:1"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "984:0:1"
									},
									"scope": 232,
									"src": "937:126:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "1126:135:1",
										"statements": [
											{
												"assignments": [
													137
												],
												"declarations": [
													{
														"constant": false,
														"id": 137,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "1136:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 136,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1136:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 140,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 138,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "1156:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1156:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1136:32:1"
											},
											{
												"expression": {
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 141,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "1178:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 142,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "1187:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1178:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 144,
												"nodeType": "ExpressionStatement",
												"src": "1178:18:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1240:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1232:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 146,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1232:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1232:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 150,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 137,
															"src": "1244:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 145,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1211:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1211:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "EmitStatement",
												"src": "1206:48:1"
											}
										]
									},
									"id": 154,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 134,
											"modifierName": {
												"id": 133,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "1114:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1114:11:1"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:2:1"
									},
									"returnParameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:0:1"
									},
									"scope": 232,
									"src": "1069:192:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 162,
										"nodeType": "Block",
										"src": "1392:30:1",
										"statements": [
											{
												"expression": {
													"id": 160,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 112,
													"src": "1409:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 159,
												"id": 161,
												"nodeType": "Return",
												"src": "1402:13:1"
											}
										]
									},
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "1267:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1351:2:1"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "1383:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1383:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1382:9:1"
									},
									"scope": 232,
									"src": "1337:85:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "1531:96:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 171,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 167,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 163,
																	"src": "1549:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1549:7:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 169,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "1560:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1560:12:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1549:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1574:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 166,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1541:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1541:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 174,
												"nodeType": "ExpressionStatement",
												"src": "1541:68:1"
											},
											{
												"id": 175,
												"nodeType": "PlaceholderStatement",
												"src": "1619:1:1"
											}
										]
									},
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "1428:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 177,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1528:2:1"
									},
									"src": "1510:117:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "2023:91:1",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 184,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2059:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2075:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2067:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 185,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2067:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2067:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 183,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2038:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2038:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 190,
												"nodeType": "EmitStatement",
												"src": "2033:45:1"
											},
											{
												"expression": {
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 191,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "2088:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 194,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2097:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 192,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2097:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 195,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2097:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2088:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 197,
												"nodeType": "ExpressionStatement",
												"src": "2088:19:1"
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "1633:331:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 181,
											"modifierName": {
												"id": 180,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 177,
												"src": "2013:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2013:9:1"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1995:2:1"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2023:0:1"
									},
									"scope": 232,
									"src": "1969:145:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "2333:170:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 208,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 202,
																"src": "2351:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2371:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2363:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 209,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2363:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 212,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2363:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2351:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2375:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2343:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2343:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "ExpressionStatement",
												"src": "2343:73:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 218,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2452:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 219,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "2460:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 217,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2431:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2431:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 221,
												"nodeType": "EmitStatement",
												"src": "2426:43:1"
											},
											{
												"expression": {
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 222,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "2479:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 223,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 202,
														"src": "2488:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2479:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "2479:17:1"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "2120:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 205,
											"modifierName": {
												"id": 204,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 177,
												"src": "2323:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2323:9:1"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "2290:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2290:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2289:18:1"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:1"
									},
									"scope": 232,
									"src": "2263:240:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 231,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 232,
									"src": "2508:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 228,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2508:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 230,
										"length": {
											"hexValue": "3439",
											"id": 229,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2516:2:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2508:11:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 233,
							"src": "642:1894:1"
						}
					],
					"src": "33:2503:1"
				},
				"id": 1
			},
			"src/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							310
						]
					},
					"id": 311,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 234,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 235,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 310,
							"linearizedBaseContracts": [
								310
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "160:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "251:2:2"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "277:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "276:9:2"
									},
									"scope": 310,
									"src": "231:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "292:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 249,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "388:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "387:17:2"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "428:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "427:9:2"
									},
									"scope": 310,
									"src": "369:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "443:209:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 259,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "675:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "694:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "674:35:2"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "728:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 256,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "728:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "727:6:2"
									},
									"scope": 310,
									"src": "657:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "740:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1028:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1043:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:32:2"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1083:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1082:9:2"
									},
									"scope": 310,
									"src": "1009:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "1098:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1762:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1762:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1779:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1761:33:2"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1813:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 276,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1813:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:6:2"
									},
									"scope": 310,
									"src": "1745:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1825:296:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "2148:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2148:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "2164:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "2183:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2147:51:2"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "2217:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 288,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2217:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2216:6:2"
									},
									"scope": 310,
									"src": "2126:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "2229:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 300,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "2407:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "2429:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "2449:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:57:2"
									},
									"src": "2392:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "2470:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 309,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "2638:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2638:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "2661:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "2686:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:63:2"
									},
									"src": "2623:78:2"
								}
							],
							"scope": 311,
							"src": "137:2566:2"
						}
					],
					"src": "33:2670:2"
				},
				"id": 2
			},
			"src/interfaces/IERC20PermitUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IERC20PermitUpgradeable.sol",
					"exportedSymbols": {
						"IERC20PermitUpgradeable": [
							346
						]
					},
					"id": 347,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 312,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 313,
								"nodeType": "StructuredDocumentation",
								"src": "66:482:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 346,
							"linearizedBaseContracts": [
								346
							],
							"name": "IERC20PermitUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "589:788:3",
										"text": " @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n given `owner`'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 331,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1398:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1398:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1413:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1413:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1430:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1430:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1445:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1445:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1463:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 323,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1463:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1472:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 325,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "1483:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 327,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1483:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1397:96:3"
									},
									"returnParameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1502:0:3"
									},
									"scope": 346,
									"src": "1382:121:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "1509:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 339,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "1824:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1824:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:15:3"
									},
									"returnParameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "1862:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1862:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1861:9:3"
									},
									"scope": 346,
									"src": "1808:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 340,
										"nodeType": "StructuredDocumentation",
										"src": "1877:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2088:2:3"
									},
									"returnParameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2114:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2114:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2113:9:3"
									},
									"scope": 346,
									"src": "2063:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 347,
							"src": "549:1576:3"
						}
					],
					"src": "33:2092:3"
				},
				"id": 3
			},
			"src/interfaces/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "src/interfaces/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							424
						]
					},
					"id": 425,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 348,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 349,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 424,
							"linearizedBaseContracts": [
								424
							],
							"name": "IERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "171:66:4",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "262:2:4"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "288:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "288:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "287:9:4"
									},
									"scope": 424,
									"src": "242:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "303:72:4",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 363,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "399:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "399:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:17:4"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "439:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "439:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "438:9:4"
									},
									"scope": 424,
									"src": "380:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "454:209:4",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 373,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "686:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "705:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "685:35:4"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "739:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 370,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "739:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "738:6:4"
									},
									"scope": 424,
									"src": "668:77:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "751:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1054:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1054:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:4"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "1094:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:4"
									},
									"scope": 424,
									"src": "1020:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "1109:642:4",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 393,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "1773:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "1790:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1790:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:33:4"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "1824:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 390,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1824:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:6:4"
									},
									"scope": 424,
									"src": "1756:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "1836:296:4",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 405,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2159:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2159:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2175:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2194:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2194:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2158:51:4"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2228:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2228:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2227:6:4"
									},
									"scope": 424,
									"src": "2137:97:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "2240:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 414,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "2418:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2418:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "2440:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 412,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "2460:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2460:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2417:57:4"
									},
									"src": "2403:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 415,
										"nodeType": "StructuredDocumentation",
										"src": "2481:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 423,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "2649:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2649:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "2672:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2672:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "2697:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2697:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2648:63:4"
									},
									"src": "2634:78:4"
								}
							],
							"scope": 425,
							"src": "137:2577:4"
						}
					],
					"src": "33:2681:4"
				},
				"id": 4
			},
			"src/interfaces/ISwap.sol": {
				"ast": {
					"absolutePath": "src/interfaces/ISwap.sol",
					"exportedSymbols": {
						"IERC20": [
							310
						],
						"ISwap": [
							602
						]
					},
					"id": 603,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 426,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "32:32:5"
						},
						{
							"absolutePath": "src/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 427,
							"nodeType": "ImportDirective",
							"scope": 603,
							"sourceUnit": 311,
							"src": "67:22:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 602,
							"linearizedBaseContracts": [
								602
							],
							"name": "ISwap",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d46300fd",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getA",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "158:2:5"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "184:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "184:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "183:9:5"
									},
									"scope": 602,
									"src": "145:48:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "82b86600",
									"id": 440,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "217:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 433,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "217:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "216:13:5"
									},
									"returnParameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "253:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$310",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 437,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 436,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 310,
														"src": "253:6:5"
													},
													"referencedDeclaration": 310,
													"src": "253:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$310",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "252:8:5"
									},
									"scope": 602,
									"src": "199:62:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "66c0bd24",
									"id": 447,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "tokenAddress",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "290:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "290:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "289:22:5"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "335:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 444,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "335:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "334:7:5"
									},
									"scope": 602,
									"src": "267:75:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a1dc9031",
									"id": 453,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenBalances",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:5"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 453,
												"src": "399:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 449,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "399:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 450,
													"nodeType": "ArrayTypeName",
													"src": "399:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:18:5"
									},
									"scope": 602,
									"src": "348:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "91ceb3eb",
									"id": 460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "448:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 454,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "448:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:13:5"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "484:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "484:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "483:9:5"
									},
									"scope": 602,
									"src": "423:70:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e25aa5fa",
									"id": 465,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getVirtualPrice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "523:2:5"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "549:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:9:5"
									},
									"scope": 602,
									"src": "499:59:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "efeecb51",
									"id": 470,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNumberOfTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "590:2:5"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "616:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "616:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "615:9:5"
									},
									"scope": 602,
									"src": "564:61:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "8214f5a4",
									"id": 476,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getLpToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "650:2:5"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "676:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$310",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 473,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 472,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 310,
														"src": "676:6:5"
													},
													"referencedDeclaration": 310,
													"src": "676:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$310",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "675:8:5"
									},
									"scope": 602,
									"src": "631:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a95b089f",
									"id": 487,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "calculateSwap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "tokenIndexFrom",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "762:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 477,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "762:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "tokenIndexTo",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "792:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 479,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "792:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "dx",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "820:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:84:5"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "860:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:9:5"
									},
									"scope": 602,
									"src": "730:139:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e6ab2806",
									"id": 497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "calculateTokenAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "905:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 488,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "905:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 489,
													"nodeType": "ArrayTypeName",
													"src": "905:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "deposit",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "933:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 491,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "933:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "904:42:5"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "994:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:9:5"
									},
									"scope": 602,
									"src": "875:128:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "f2fad2b6",
									"id": 505,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRemoveLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "1043:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:16:5"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "1106:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 501,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1106:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 502,
													"nodeType": "ArrayTypeName",
													"src": "1106:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1105:18:5"
									},
									"scope": 602,
									"src": "1009:115:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "342a87a1",
									"id": 514,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRemoveLiquidityOneToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1181:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1181:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "tokenIndex",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1210:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 508,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1210:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1171:61:5"
									},
									"returnParameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "availableTokenAmount",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1256:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:30:5"
									},
									"scope": 602,
									"src": "1130:156:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b28cb6dc",
									"id": 536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "pooledTokens",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1354:28:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$310_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 516,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 515,
															"name": "IERC20",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 310,
															"src": "1354:6:5"
														},
														"referencedDeclaration": 310,
														"src": "1354:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$310",
															"typeString": "contract IERC20"
														}
													},
													"id": 517,
													"nodeType": "ArrayTypeName",
													"src": "1354:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$310_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "decimals",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1392:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
													"typeString": "uint8[]"
												},
												"typeName": {
													"baseType": {
														"id": 519,
														"name": "uint8",
														"nodeType": "ElementaryTypeName",
														"src": "1392:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 520,
													"nodeType": "ArrayTypeName",
													"src": "1392:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
														"typeString": "uint8[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "lpTokenName",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1425:25:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 522,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1425:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "lpTokenSymbol",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1460:27:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 524,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1460:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1497:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1516:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1516:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "adminFee",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1537:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1537:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "lpTokenTargetAddress",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "1563:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1563:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1344:253:5"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1606:0:5"
									},
									"scope": 602,
									"src": "1325:282:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "91695586",
									"id": 551,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "tokenIndexFrom",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1636:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 537,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1636:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "tokenIndexTo",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1666:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 539,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1666:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "dx",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1694:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "minDy",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1714:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1714:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1737:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1737:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1626:133:5"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "1778:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1778:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1777:9:5"
									},
									"scope": 602,
									"src": "1613:174:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4d49e87d",
									"id": 563,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "1824:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 552,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1824:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 553,
													"nodeType": "ArrayTypeName",
													"src": "1824:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "minToMint",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "1860:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "1887:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1814:95:5"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "1928:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1927:9:5"
									},
									"scope": 602,
									"src": "1793:144:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "31cd52b0",
									"id": 576,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "1977:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1977:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "minAmounts",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "2001:29:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 566,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2001:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 567,
													"nodeType": "ArrayTypeName",
													"src": "2001:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "2040:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2040:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:95:5"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "2081:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 572,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2081:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 573,
													"nodeType": "ArrayTypeName",
													"src": "2081:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2080:18:5"
									},
									"scope": 602,
									"src": "1943:156:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3e3a1560",
									"id": 589,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidityOneToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "tokenAmount",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "2147:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2147:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "tokenIndex",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "2176:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 579,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2176:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "minAmount",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "2202:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2202:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "2229:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2229:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:114:5"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 589,
												"src": "2270:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2270:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2269:9:5"
									},
									"scope": 602,
									"src": "2105:174:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "84cdd9bc",
									"id": 601,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidityImbalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2328:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 590,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2328:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 591,
													"nodeType": "ArrayTypeName",
													"src": "2328:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "maxBurnAmount",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2364:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 593,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2364:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2395:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 595,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2318:99:5"
									},
									"returnParameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2436:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2435:9:5"
									},
									"scope": 602,
									"src": "2285:160:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 603,
							"src": "91:2356:5"
						}
					],
					"src": "32:2415:5"
				},
				"id": 5
			},
			"src/libraries/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"Initializable": [
							2190
						]
					},
					"id": 651,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 604,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:6"
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 605,
							"nodeType": "ImportDirective",
							"scope": 651,
							"sourceUnit": 2191,
							"src": "65:36:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 606,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "643:13:6"
									},
									"id": 607,
									"nodeType": "InheritanceSpecifier",
									"src": "643:13:6"
								}
							],
							"contractDependencies": [
								2190
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 650,
							"linearizedBaseContracts": [
								650,
								2190
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "710:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 612,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "720:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "720:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "720:26:6"
											}
										]
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 610,
											"modifierName": {
												"id": 609,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "698:11:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "698:11:6"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "686:2:6"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "710:0:6"
									},
									"scope": 650,
									"src": "663:90:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "816:7:6",
										"statements": []
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 619,
											"modifierName": {
												"id": 618,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "804:11:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "804:11:6"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "792:2:6"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "816:0:6"
									},
									"scope": 650,
									"src": "759:64:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 633,
										"nodeType": "Block",
										"src": "898:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 629,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "923:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "923:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "915:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_payable_$",
															"typeString": "type(address payable)"
														},
														"typeName": {
															"id": 627,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "915:8:6",
															"stateMutability": "payable",
															"typeDescriptions": {}
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "915:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 626,
												"id": 632,
												"nodeType": "Return",
												"src": "908:26:6"
											}
										]
									},
									"id": 634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "847:2:6"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "881:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "881:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "880:17:6"
									},
									"scope": 650,
									"src": "828:113:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 644,
										"nodeType": "Block",
										"src": "1012:165:6",
										"statements": [
											{
												"expression": {
													"id": 639,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "1022:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ContextUpgradeable_$650",
														"typeString": "contract ContextUpgradeable"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "1022:4:6"
											},
											{
												"expression": {
													"expression": {
														"id": 641,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1162:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1162:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 638,
												"id": 643,
												"nodeType": "Return",
												"src": "1155:15:6"
											}
										]
									},
									"id": 645,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "964:2:6"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "998:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 636,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "998:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "997:14:6"
									},
									"scope": 650,
									"src": "947:230:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 649,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 650,
									"src": "1182:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 646,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1182:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 648,
										"length": {
											"hexValue": "3530",
											"id": 647,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1190:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1182:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 651,
							"src": "603:607:6"
						}
					],
					"src": "33:1177:6"
				},
				"id": 6
			},
			"src/libraries/CountersUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/CountersUpgradeable.sol",
					"exportedSymbols": {
						"CountersUpgradeable": [
							703
						],
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 704,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 652,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:7"
						},
						{
							"absolutePath": "src/libraries/SafeMathUpgradeable.sol",
							"file": "./SafeMathUpgradeable.sol",
							"id": 653,
							"nodeType": "ImportDirective",
							"scope": 704,
							"sourceUnit": 2125,
							"src": "66:35:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 654,
								"nodeType": "StructuredDocumentation",
								"src": "103:571:7",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
							},
							"fullyImplemented": true,
							"id": 703,
							"linearizedBaseContracts": [
								703
							],
							"name": "CountersUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 657,
									"libraryName": {
										"id": 655,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2124,
										"src": "715:19:7"
									},
									"nodeType": "UsingForDirective",
									"src": "709:38:7",
									"typeName": {
										"id": 656,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "739:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "CountersUpgradeable.Counter",
									"id": 660,
									"members": [
										{
											"constant": false,
											"id": 659,
											"mutability": "mutable",
											"name": "_value",
											"nodeType": "VariableDeclaration",
											"scope": 660,
											"src": "1092:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 658,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1092:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nodeType": "StructDefinition",
									"scope": 703,
									"src": "753:374:7",
									"visibility": "public"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1207:38:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 668,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "1224:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
															"typeString": "struct CountersUpgradeable.Counter storage pointer"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 659,
													"src": "1224:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 667,
												"id": 670,
												"nodeType": "Return",
												"src": "1217:21:7"
											}
										]
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1150:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 662,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 661,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 660,
														"src": "1150:7:7"
													},
													"referencedDeclaration": 660,
													"src": "1150:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1149:25:7"
									},
									"returnParameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1198:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1198:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1197:9:7"
									},
									"scope": 703,
									"src": "1133:112:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 684,
										"nodeType": "Block",
										"src": "1304:125:7",
										"statements": [
											{
												"expression": {
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 678,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "1403:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
																"typeString": "struct CountersUpgradeable.Counter storage pointer"
															}
														},
														"id": 680,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 659,
														"src": "1403:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1421:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1403:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 683,
												"nodeType": "ExpressionStatement",
												"src": "1403:19:7"
											}
										]
									},
									"id": 685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "1270:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 673,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 660,
														"src": "1270:7:7"
													},
													"referencedDeclaration": 660,
													"src": "1270:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1269:25:7"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1304:0:7"
									},
									"scope": 703,
									"src": "1251:178:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 701,
										"nodeType": "Block",
										"src": "1488:55:7",
										"statements": [
											{
												"expression": {
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 691,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "1498:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
																"typeString": "struct CountersUpgradeable.Counter storage pointer"
															}
														},
														"id": 693,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 659,
														"src": "1498:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 697,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1534:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"expression": {
																"expression": {
																	"id": 694,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 688,
																	"src": "1515:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
																		"typeString": "struct CountersUpgradeable.Counter storage pointer"
																	}
																},
																"id": 695,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 659,
																"src": "1515:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1973,
															"src": "1515:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1515:21:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1498:38:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 700,
												"nodeType": "ExpressionStatement",
												"src": "1498:38:7"
											}
										]
									},
									"id": 702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "counter",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1454:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 687,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 686,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 660,
														"src": "1454:7:7"
													},
													"referencedDeclaration": 660,
													"src": "1454:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1453:25:7"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1488:0:7"
									},
									"scope": 703,
									"src": "1435:108:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 704,
							"src": "675:870:7"
						}
					],
					"src": "33:1512:7"
				},
				"id": 7
			},
			"src/libraries/ECDSAUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/ECDSAUpgradeable.sol",
					"exportedSymbols": {
						"ECDSAUpgradeable": [
							819
						]
					},
					"id": 820,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 705,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 706,
								"nodeType": "StructuredDocumentation",
								"src": "66:205:8",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 819,
							"linearizedBaseContracts": [
								819
							],
							"name": "ECDSAUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "1170:653:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 716,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "1222:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 717,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1222:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "3635",
														"id": 718,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1242:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "1222:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 725,
												"nodeType": "IfStatement",
												"src": "1218:94:8",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "1246:66:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																		"id": 721,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1267:33:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																			"typeString": "literal_string \"ECDSA: invalid signature length\""
																		},
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																			"typeString": "literal_string \"ECDSA: invalid signature length\""
																		}
																	],
																	"id": 720,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "1260:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 722,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1260:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 723,
															"nodeType": "ExpressionStatement",
															"src": "1260:41:8"
														}
													]
												}
											},
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 743,
														"src": "1378:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 726,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1378:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 728,
												"nodeType": "VariableDeclarationStatement",
												"src": "1378:9:8"
											},
											{
												"assignments": [
													730
												],
												"declarations": [
													{
														"constant": false,
														"id": 730,
														"mutability": "mutable",
														"name": "s",
														"nodeType": "VariableDeclaration",
														"scope": 743,
														"src": "1397:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 729,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1397:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 731,
												"nodeType": "VariableDeclarationStatement",
												"src": "1397:9:8"
											},
											{
												"assignments": [
													733
												],
												"declarations": [
													{
														"constant": false,
														"id": 733,
														"mutability": "mutable",
														"name": "v",
														"nodeType": "VariableDeclaration",
														"scope": 743,
														"src": "1416:7:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 732,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1416:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 734,
												"nodeType": "VariableDeclarationStatement",
												"src": "1416:7:8"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1622:155:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1636:32:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nodeType": "YulIdentifier",
																				"src": "1651:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1662:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1647:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1647:20:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1641:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1641:27:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "1636:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1681:32:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nodeType": "YulIdentifier",
																				"src": "1696:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1707:4:8",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:20:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1686:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1686:27:8"
															},
															"variableNames": [
																{
																	"name": "s",
																	"nodeType": "YulIdentifier",
																	"src": "1681:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1726:41:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1736:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "signature",
																						"nodeType": "YulIdentifier",
																						"src": "1749:9:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1760:4:8",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1745:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1745:20:8"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1739:5:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1739:27:8"
																	}
																],
																"functionName": {
																	"name": "byte",
																	"nodeType": "YulIdentifier",
																	"src": "1731:4:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1731:36:8"
															},
															"variableNames": [
																{
																	"name": "v",
																	"nodeType": "YulIdentifier",
																	"src": "1726:1:8"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 727,
														"isOffset": false,
														"isSlot": false,
														"src": "1636:1:8",
														"valueSize": 1
													},
													{
														"declaration": 730,
														"isOffset": false,
														"isSlot": false,
														"src": "1681:1:8",
														"valueSize": 1
													},
													{
														"declaration": 711,
														"isOffset": false,
														"isSlot": false,
														"src": "1651:9:8",
														"valueSize": 1
													},
													{
														"declaration": 711,
														"isOffset": false,
														"isSlot": false,
														"src": "1696:9:8",
														"valueSize": 1
													},
													{
														"declaration": 711,
														"isOffset": false,
														"isSlot": false,
														"src": "1749:9:8",
														"valueSize": 1
													},
													{
														"declaration": 733,
														"isOffset": false,
														"isSlot": false,
														"src": "1726:1:8",
														"valueSize": 1
													}
												],
												"id": 735,
												"nodeType": "InlineAssembly",
												"src": "1613:164:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 737,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "1802:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 738,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 733,
															"src": "1808:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 739,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "1811:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 740,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "1814:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 736,
														"name": "recover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															744,
															801
														],
														"referencedDeclaration": 801,
														"src": "1794:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1794:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 715,
												"id": 742,
												"nodeType": "Return",
												"src": "1787:29:8"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "303:775:8",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1100:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 708,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1100:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1114:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1114:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1099:38:8"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1161:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1161:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1160:9:8"
									},
									"scope": 819,
									"src": "1083:740:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 800,
										"nodeType": "Block",
										"src": "2065:1320:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 761,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 753,
																		"src": "2965:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 760,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2957:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 759,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2957:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 762,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2957:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
																"id": 763,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2971:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...7168"
																},
																"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
															},
															"src": "2957:80:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
															"id": 765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3039:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
															},
															"value": "ECDSA: invalid signature 's' value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
															}
														],
														"id": 758,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2949:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2949:127:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 767,
												"nodeType": "ExpressionStatement",
												"src": "2949:127:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 769,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 749,
																	"src": "3094:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "3237",
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3099:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_27_by_1",
																		"typeString": "int_const 27"
																	},
																	"value": "27"
																},
																"src": "3094:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 772,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 749,
																	"src": "3105:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "3238",
																	"id": 773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3110:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_28_by_1",
																		"typeString": "int_const 28"
																	},
																	"value": "28"
																},
																"src": "3105:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3094:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c7565",
															"id": 776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3114:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
															},
															"value": "ECDSA: invalid signature 'v' value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
															}
														],
														"id": 768,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3086:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3086:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 778,
												"nodeType": "ExpressionStatement",
												"src": "3086:65:8"
											},
											{
												"assignments": [
													780
												],
												"declarations": [
													{
														"constant": false,
														"id": 780,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"scope": 800,
														"src": "3246:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 779,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3246:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 787,
												"initialValue": {
													"arguments": [
														{
															"id": 782,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "3273:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 783,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "3279:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 784,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "3282:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 785,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "3285:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 781,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "3263:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3263:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3246:41:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 789,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "3305:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3323:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3315:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 790,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3315:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3315:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3305:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3327:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																"typeString": "literal_string \"ECDSA: invalid signature\""
															},
															"value": "ECDSA: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																"typeString": "literal_string \"ECDSA: invalid signature\""
															}
														],
														"id": 788,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3297:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3297:57:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 797,
												"nodeType": "ExpressionStatement",
												"src": "3297:57:8"
											},
											{
												"expression": {
													"id": 798,
													"name": "signer",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 780,
													"src": "3372:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 757,
												"id": 799,
												"nodeType": "Return",
												"src": "3365:13:8"
											}
										]
									},
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "1829:137:8",
										"text": " @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 801,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "1988:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 746,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2002:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 748,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2002:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2011:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 750,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2022:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 752,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2022:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:45:8"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "2056:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2056:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2055:9:8"
									},
									"scope": 819,
									"src": "1971:1414:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 817,
										"nodeType": "Block",
										"src": "3727:187:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 812,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3865:34:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"id": 813,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 804,
																	"src": "3901:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 810,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3848:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 811,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "3848:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 814,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3848:58:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 809,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3838:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3838:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 808,
												"id": 816,
												"nodeType": "Return",
												"src": "3831:76:8"
											}
										]
									},
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "3391:253:8",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n replicates the behavior of the\n https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n JSON-RPC method.\n See {recover}."
									},
									"id": 818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "3681:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 803,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3681:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3680:14:8"
									},
									"returnParameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "3718:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 806,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3718:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3717:9:8"
									},
									"scope": 819,
									"src": "3649:265:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 820,
							"src": "272:3644:8"
						}
					],
					"src": "33:3883:8"
				},
				"id": 8
			},
			"src/libraries/EIP712Upgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/EIP712Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"EIP712Upgradeable": [
							979
						],
						"Initializable": [
							2190
						]
					},
					"id": 980,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 821,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:9"
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 822,
							"nodeType": "ImportDirective",
							"scope": 980,
							"sourceUnit": 2191,
							"src": "65:36:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 824,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "1285:13:9"
									},
									"id": 825,
									"nodeType": "InheritanceSpecifier",
									"src": "1285:13:9"
								}
							],
							"contractDependencies": [
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 823,
								"nodeType": "StructuredDocumentation",
								"src": "103:1142:9",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 979,
							"linearizedBaseContracts": [
								979,
								2190
							],
							"name": "EIP712Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 827,
									"mutability": "mutable",
									"name": "_HASHED_NAME",
									"nodeType": "VariableDeclaration",
									"scope": 979,
									"src": "1350:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 826,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1350:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 829,
									"mutability": "mutable",
									"name": "_HASHED_VERSION",
									"nodeType": "VariableDeclaration",
									"scope": 979,
									"src": "1384:31:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 828,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1384:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 834,
									"mutability": "constant",
									"name": "_TYPE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 979,
									"src": "1421:133:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 830,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1421:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 832,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1469:84:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 831,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1459:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 833,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1459:95:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 849,
										"nodeType": "Block",
										"src": "2256:55:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 845,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 837,
															"src": "2290:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 846,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "2296:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 844,
														"name": "__EIP712_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 886,
														"src": "2266:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2266:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "2266:38:9"
											}
										]
									},
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "1605:559:9",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 850,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 842,
											"modifierName": {
												"id": 841,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "2244:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2244:11:9"
										}
									],
									"name": "__EIP712_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "2192:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 836,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2192:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "version",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "2212:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 838,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2191:43:9"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2256:0:9"
									},
									"scope": 979,
									"src": "2169:142:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 885,
										"nodeType": "Block",
										"src": "2414:195:9",
										"statements": [
											{
												"assignments": [
													860
												],
												"declarations": [
													{
														"constant": false,
														"id": 860,
														"mutability": "mutable",
														"name": "hashedName",
														"nodeType": "VariableDeclaration",
														"scope": 885,
														"src": "2424:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 859,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2424:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 867,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 864,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "2461:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 863,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2455:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 862,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2455:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2455:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 861,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2445:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2445:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2424:43:9"
											},
											{
												"assignments": [
													869
												],
												"declarations": [
													{
														"constant": false,
														"id": 869,
														"mutability": "mutable",
														"name": "hashedVersion",
														"nodeType": "VariableDeclaration",
														"scope": 885,
														"src": "2477:21:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 868,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2477:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 876,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 873,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 854,
																	"src": "2517:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 872,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2511:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 871,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2511:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 874,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 870,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2501:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2501:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2477:49:9"
											},
											{
												"expression": {
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 877,
														"name": "_HASHED_NAME",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "2536:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 878,
														"name": "hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 860,
														"src": "2551:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2536:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 880,
												"nodeType": "ExpressionStatement",
												"src": "2536:25:9"
											},
											{
												"expression": {
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 881,
														"name": "_HASHED_VERSION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "2571:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 882,
														"name": "hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "2589:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2571:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 884,
												"nodeType": "ExpressionStatement",
												"src": "2571:31:9"
											}
										]
									},
									"id": 886,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 857,
											"modifierName": {
												"id": 856,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "2402:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2402:11:9"
										}
									],
									"name": "__EIP712_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "2350:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 851,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2350:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "version",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "2370:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 853,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2370:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:43:9"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2414:0:9"
									},
									"scope": 979,
									"src": "2317:292:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "2757:98:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "_TYPE_HASH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 834,
															"src": "2796:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 894,
																"name": "_EIP712NameHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 965,
																"src": "2808:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2808:17:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 896,
																"name": "_EIP712VersionHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 974,
																"src": "2827:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2827:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 892,
														"name": "_buildDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "2774:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2774:74:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 891,
												"id": 899,
												"nodeType": "Return",
												"src": "2767:81:9"
											}
										]
									},
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "2615:75:9",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2722:2:9"
									},
									"returnParameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2748:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 889,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:9:9"
									},
									"scope": 979,
									"src": "2695:160:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "2972:216:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 915,
																	"name": "typeHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 903,
																	"src": "3040:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 916,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 905,
																	"src": "3066:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 917,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 907,
																	"src": "3088:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 918,
																		"name": "_getChainId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 956,
																		"src": "3113:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 919,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3113:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 922,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3152:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712Upgradeable_$979",
																				"typeString": "contract EIP712Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712Upgradeable_$979",
																				"typeString": "contract EIP712Upgradeable"
																			}
																		],
																		"id": 921,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3144:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 920,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3144:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3144:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 913,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3012:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3012:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 924,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3012:159:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 912,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2989:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2989:192:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 911,
												"id": 926,
												"nodeType": "Return",
												"src": "2982:199:9"
											}
										]
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "typeHash",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2892:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 902,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2892:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2910:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 904,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2910:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "version",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2924:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 906,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2924:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2891:49:9"
									},
									"returnParameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2963:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 909,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2963:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2962:9:9"
									},
									"scope": 979,
									"src": "2861:327:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 946,
										"nodeType": "Block",
										"src": "3899:97:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1901",
																	"id": 939,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3943:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	"value": "\u0019\u0001"
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 940,
																		"name": "_domainSeparatorV4",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 901,
																		"src": "3955:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																			"typeString": "function () view returns (bytes32)"
																		}
																	},
																	"id": 941,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3955:20:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 942,
																	"name": "structHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 931,
																	"src": "3977:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 937,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3926:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 938,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "3926:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3926:62:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 936,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3916:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3916:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 935,
												"id": 945,
												"nodeType": "Return",
												"src": "3909:80:9"
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "3194:614:9",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "structHash",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "3839:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 930,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3839:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3838:20:9"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "3890:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 933,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3890:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3889:9:9"
									},
									"scope": 979,
									"src": "3813:183:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "4064:258:9",
										"statements": [
											{
												"expression": {
													"id": 952,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "4074:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_EIP712Upgradeable_$979",
														"typeString": "contract EIP712Upgradeable"
													}
												},
												"id": 953,
												"nodeType": "ExpressionStatement",
												"src": "4074:4:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4272:44:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4286:20:9",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "4297:7:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4297:9:9"
															},
															"variableNames": [
																{
																	"name": "chainId",
																	"nodeType": "YulIdentifier",
																	"src": "4286:7:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 950,
														"isOffset": false,
														"isSlot": false,
														"src": "4286:7:9",
														"valueSize": 1
													}
												],
												"id": 954,
												"nodeType": "InlineAssembly",
												"src": "4263:53:9"
											}
										]
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getChainId",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4022:2:9"
									},
									"returnParameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "chainId",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "4047:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4047:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4046:17:9"
									},
									"scope": 979,
									"src": "4002:320:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 964,
										"nodeType": "Block",
										"src": "4625:36:9",
										"statements": [
											{
												"expression": {
													"id": 962,
													"name": "_HASHED_NAME",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 827,
													"src": "4642:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 961,
												"id": 963,
												"nodeType": "Return",
												"src": "4635:19:9"
											}
										]
									},
									"documentation": {
										"id": 957,
										"nodeType": "StructuredDocumentation",
										"src": "4328:225:9",
										"text": " @dev The hash of the name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."
									},
									"id": 965,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712NameHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4582:2:9"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "4616:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 959,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4616:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4615:9:9"
									},
									"scope": 979,
									"src": "4558:103:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 973,
										"nodeType": "Block",
										"src": "4970:39:9",
										"statements": [
											{
												"expression": {
													"id": 971,
													"name": "_HASHED_VERSION",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 829,
													"src": "4987:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 970,
												"id": 972,
												"nodeType": "Return",
												"src": "4980:22:9"
											}
										]
									},
									"documentation": {
										"id": 966,
										"nodeType": "StructuredDocumentation",
										"src": "4667:228:9",
										"text": " @dev The hash of the version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."
									},
									"id": 974,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712VersionHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4927:2:9"
									},
									"returnParameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 974,
												"src": "4961:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 968,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4961:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4960:9:9"
									},
									"scope": 979,
									"src": "4900:109:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 978,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 979,
									"src": "5014:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 975,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "5014:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 977,
										"length": {
											"hexValue": "3530",
											"id": 976,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "5022:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "5014:11:9",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 980,
							"src": "1246:3796:9"
						}
					],
					"src": "33:5009:9"
				},
				"id": 9
			},
			"src/libraries/ERC20BurnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/ERC20BurnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"ERC20BurnableUpgradeable": [
							1063
						],
						"ERC20Upgradeable": [
							1769
						],
						"IERC20Upgradeable": [
							424
						],
						"Initializable": [
							2190
						],
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 1064,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 981,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:10"
						},
						{
							"absolutePath": "src/libraries/ContextUpgradeable.sol",
							"file": "./ContextUpgradeable.sol",
							"id": 982,
							"nodeType": "ImportDirective",
							"scope": 1064,
							"sourceUnit": 651,
							"src": "66:34:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/ERC20Upgradeable.sol",
							"file": "./ERC20Upgradeable.sol",
							"id": 983,
							"nodeType": "ImportDirective",
							"scope": 1064,
							"sourceUnit": 1770,
							"src": "101:32:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 984,
							"nodeType": "ImportDirective",
							"scope": 1064,
							"sourceUnit": 2191,
							"src": "134:36:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 986,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "427:13:10"
									},
									"id": 987,
									"nodeType": "InheritanceSpecifier",
									"src": "427:13:10"
								},
								{
									"baseName": {
										"id": 988,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 650,
										"src": "442:18:10"
									},
									"id": 989,
									"nodeType": "InheritanceSpecifier",
									"src": "442:18:10"
								},
								{
									"baseName": {
										"id": 990,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1769,
										"src": "462:16:10"
									},
									"id": 991,
									"nodeType": "InheritanceSpecifier",
									"src": "462:16:10"
								}
							],
							"contractDependencies": [
								424,
								650,
								1769,
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 985,
								"nodeType": "StructuredDocumentation",
								"src": "172:208:10",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 1063,
							"linearizedBaseContracts": [
								1063,
								1769,
								424,
								650,
								2190
							],
							"name": "ERC20BurnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1002,
										"nodeType": "Block",
										"src": "538:85:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 996,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "548:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "548:26:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 998,
												"nodeType": "ExpressionStatement",
												"src": "548:26:10"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 999,
														"name": "__ERC20Burnable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1009,
														"src": "584:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "584:32:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1001,
												"nodeType": "ExpressionStatement",
												"src": "584:32:10"
											}
										]
									},
									"id": 1003,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 994,
											"modifierName": {
												"id": 993,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "526:11:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "526:11:10"
										}
									],
									"name": "__ERC20Burnable_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:10"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "538:0:10"
									},
									"scope": 1063,
									"src": "485:138:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1008,
										"nodeType": "Block",
										"src": "692:7:10",
										"statements": []
									},
									"id": 1009,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1006,
											"modifierName": {
												"id": 1005,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "680:11:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "680:11:10"
										}
									],
									"name": "__ERC20Burnable_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "668:2:10"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "692:0:10"
									},
									"scope": 1063,
									"src": "629:70:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"id": 1012,
									"libraryName": {
										"id": 1010,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2124,
										"src": "710:19:10"
									},
									"nodeType": "UsingForDirective",
									"src": "704:38:10",
									"typeName": {
										"id": 1011,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "734:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 1024,
										"nodeType": "Block",
										"src": "896:44:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1019,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "912:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "912:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1021,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1015,
															"src": "926:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1018,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1697,
														"src": "906:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1022,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "906:27:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1023,
												"nodeType": "ExpressionStatement",
												"src": "906:27:10"
											}
										]
									},
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "748:98:10",
										"text": " @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 1025,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "865:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:16:10"
									},
									"returnParameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "896:0:10"
									},
									"scope": 1063,
									"src": "851:89:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1057,
										"nodeType": "Block",
										"src": "1312:224:10",
										"statements": [
											{
												"assignments": [
													1034
												],
												"declarations": [
													{
														"constant": false,
														"id": 1034,
														"mutability": "mutable",
														"name": "decreasedAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 1057,
														"src": "1322:26:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1033,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1322:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1044,
												"initialValue": {
													"arguments": [
														{
															"id": 1041,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1030,
															"src": "1388:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365",
															"id": 1042,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1396:38:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db",
																"typeString": "literal_string \"ERC20: burn amount exceeds allowance\""
															},
															"value": "ERC20: burn amount exceeds allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db",
																"typeString": "literal_string \"ERC20: burn amount exceeds allowance\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1036,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1028,
																	"src": "1361:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1037,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 634,
																		"src": "1370:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																			"typeString": "function () view returns (address payable)"
																		}
																	},
																	"id": 1038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1370:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 1035,
																"name": "allowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1404,
																"src": "1351:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view returns (uint256)"
																}
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1351:32:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2075,
														"src": "1351:36:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1351:84:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1322:113:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1046,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1028,
															"src": "1455:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1047,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "1464:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1464:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1049,
															"name": "decreasedAllowance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "1478:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1045,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "1446:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1051,
												"nodeType": "ExpressionStatement",
												"src": "1446:51:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1053,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1028,
															"src": "1513:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1054,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1030,
															"src": "1522:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1052,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1697,
														"src": "1507:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1507:22:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1056,
												"nodeType": "ExpressionStatement",
												"src": "1507:22:10"
											}
										]
									},
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "946:295:10",
										"text": " @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."
									},
									"functionSelector": "79cc6790",
									"id": 1058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "1264:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1264:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "1281:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1263:33:10"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1312:0:10"
									},
									"scope": 1063,
									"src": "1246:290:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1062,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 1063,
									"src": "1541:25:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1059,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1541:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1061,
										"length": {
											"hexValue": "3530",
											"id": 1060,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1549:2:10",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1541:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1064,
							"src": "381:1188:10"
						}
					],
					"src": "33:1536:10"
				},
				"id": 10
			},
			"src/libraries/ERC20PermitUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/ERC20PermitUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"CountersUpgradeable": [
							703
						],
						"ECDSAUpgradeable": [
							819
						],
						"EIP712Upgradeable": [
							979
						],
						"ERC20PermitUpgradeable": [
							1239
						],
						"ERC20Upgradeable": [
							1769
						],
						"IERC20PermitUpgradeable": [
							346
						],
						"IERC20Upgradeable": [
							424
						],
						"Initializable": [
							2190
						],
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 1240,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1065,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".5",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:11"
						},
						{
							"absolutePath": "src/libraries/ERC20Upgradeable.sol",
							"file": "./ERC20Upgradeable.sol",
							"id": 1066,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 1770,
							"src": "66:32:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/IERC20PermitUpgradeable.sol",
							"file": "../interfaces/IERC20PermitUpgradeable.sol",
							"id": 1067,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 347,
							"src": "99:51:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/ECDSAUpgradeable.sol",
							"file": "./ECDSAUpgradeable.sol",
							"id": 1068,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 820,
							"src": "151:32:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/CountersUpgradeable.sol",
							"file": "./CountersUpgradeable.sol",
							"id": 1069,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 704,
							"src": "184:35:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/EIP712Upgradeable.sol",
							"file": "./EIP712Upgradeable.sol",
							"id": 1070,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 980,
							"src": "220:33:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 1071,
							"nodeType": "ImportDirective",
							"scope": 1240,
							"sourceUnit": 2191,
							"src": "254:36:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1073,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "854:13:11"
									},
									"id": 1074,
									"nodeType": "InheritanceSpecifier",
									"src": "854:13:11"
								},
								{
									"baseName": {
										"id": 1075,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1769,
										"src": "869:16:11"
									},
									"id": 1076,
									"nodeType": "InheritanceSpecifier",
									"src": "869:16:11"
								},
								{
									"baseName": {
										"id": 1077,
										"name": "IERC20PermitUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 346,
										"src": "887:23:11"
									},
									"id": 1078,
									"nodeType": "InheritanceSpecifier",
									"src": "887:23:11"
								},
								{
									"baseName": {
										"id": 1079,
										"name": "EIP712Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 979,
										"src": "912:17:11"
									},
									"id": 1080,
									"nodeType": "InheritanceSpecifier",
									"src": "912:17:11"
								}
							],
							"contractDependencies": [
								346,
								424,
								650,
								979,
								1769,
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1072,
								"nodeType": "StructuredDocumentation",
								"src": "292:517:11",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 1239,
							"linearizedBaseContracts": [
								1239,
								979,
								346,
								1769,
								424,
								650,
								2190
							],
							"name": "ERC20PermitUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1084,
									"libraryName": {
										"id": 1081,
										"name": "CountersUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 703,
										"src": "942:19:11"
									},
									"nodeType": "UsingForDirective",
									"src": "936:58:11",
									"typeName": {
										"id": 1083,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1082,
											"name": "CountersUpgradeable.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 660,
											"src": "966:27:11"
										},
										"referencedDeclaration": 660,
										"src": "966:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
											"typeString": "struct CountersUpgradeable.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 1089,
									"mutability": "mutable",
									"name": "_nonces",
									"nodeType": "VariableDeclaration",
									"scope": 1239,
									"src": "1000:64:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$660_storage_$",
										"typeString": "mapping(address => struct CountersUpgradeable.Counter)"
									},
									"typeName": {
										"id": 1088,
										"keyType": {
											"id": 1085,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1009:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1000:48:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$660_storage_$",
											"typeString": "mapping(address => struct CountersUpgradeable.Counter)"
										},
										"valueType": {
											"id": 1087,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1086,
												"name": "CountersUpgradeable.Counter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 660,
												"src": "1020:27:11"
											},
											"referencedDeclaration": 660,
											"src": "1020:27:11",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$660_storage_ptr",
												"typeString": "struct CountersUpgradeable.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1091,
									"mutability": "mutable",
									"name": "_PERMIT_TYPEHASH",
									"nodeType": "VariableDeclaration",
									"scope": 1239,
									"src": "1123:32:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1090,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1123:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "1456:131:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1099,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "1466:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1466:26:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1101,
												"nodeType": "ExpressionStatement",
												"src": "1466:26:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1103,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "1526:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"hexValue": "31",
															"id": 1104,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1532:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																"typeString": "literal_string \"1\""
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																"typeString": "literal_string \"1\""
															}
														],
														"id": 1102,
														"name": "__EIP712_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 886,
														"src": "1502:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1502:34:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1106,
												"nodeType": "ExpressionStatement",
												"src": "1502:34:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1108,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "1575:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1107,
														"name": "__ERC20Permit_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1126,
														"src": "1546:28:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory)"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1546:34:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "1546:34:11"
											}
										]
									},
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "1162:220:11",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1097,
											"modifierName": {
												"id": 1096,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "1444:11:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1444:11:11"
										}
									],
									"name": "__ERC20Permit_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "1415:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1093,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1415:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1414:20:11"
									},
									"returnParameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1456:0:11"
									},
									"scope": 1239,
									"src": "1387:200:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1125,
										"nodeType": "Block",
										"src": "1672:131:11",
										"statements": [
											{
												"expression": {
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1119,
														"name": "_PERMIT_TYPEHASH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1091,
														"src": "1682:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1711:84:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
																	"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
																},
																"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
																	"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
																}
															],
															"id": 1120,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "1701:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1122,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1701:95:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1682:114:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "1682:114:11"
											}
										]
									},
									"id": 1126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1117,
											"modifierName": {
												"id": 1116,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "1660:11:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1660:11:11"
										}
									],
									"name": "__ERC20Permit_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "name",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "1631:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1113,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1631:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1630:20:11"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1672:0:11"
									},
									"scope": 1239,
									"src": "1593:210:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										331
									],
									"body": {
										"id": 1206,
										"nodeType": "Block",
										"src": "2000:669:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1146,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2072:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2072:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1148,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1135,
																"src": "2091:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2072:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 1145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2064:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2064:69:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1152,
												"nodeType": "ExpressionStatement",
												"src": "2064:69:11"
											},
											{
												"assignments": [
													1154
												],
												"declarations": [
													{
														"constant": false,
														"id": 1154,
														"mutability": "mutable",
														"name": "structHash",
														"nodeType": "VariableDeclaration",
														"scope": 1206,
														"src": "2144:18:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1153,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2144:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1170,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1158,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "2216:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1159,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1129,
																	"src": "2250:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1160,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "2273:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1133,
																	"src": "2298:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"baseExpression": {
																				"id": 1162,
																				"name": "_nonces",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1089,
																				"src": "2321:7:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$660_storage_$",
																					"typeString": "mapping(address => struct CountersUpgradeable.Counter storage ref)"
																				}
																			},
																			"id": 1164,
																			"indexExpression": {
																				"id": 1163,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1129,
																				"src": "2329:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2321:14:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Counter_$660_storage",
																				"typeString": "struct CountersUpgradeable.Counter storage ref"
																			}
																		},
																		"id": 1165,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "current",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 672,
																		"src": "2321:22:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$660_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$660_storage_ptr_$",
																			"typeString": "function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"
																		}
																	},
																	"id": 1166,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2321:24:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1167,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1135,
																	"src": "2363:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1156,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2188:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2188:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1168,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2188:197:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1155,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2165:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2165:230:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2144:251:11"
											},
											{
												"assignments": [
													1172
												],
												"declarations": [
													{
														"constant": false,
														"id": 1172,
														"mutability": "mutable",
														"name": "hash",
														"nodeType": "VariableDeclaration",
														"scope": 1206,
														"src": "2406:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1171,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2406:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1176,
												"initialValue": {
													"arguments": [
														{
															"id": 1174,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1154,
															"src": "2438:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1173,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "2421:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2421:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2406:43:11"
											},
											{
												"assignments": [
													1178
												],
												"declarations": [
													{
														"constant": false,
														"id": 1178,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"scope": 1206,
														"src": "2460:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1177,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2460:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1186,
												"initialValue": {
													"arguments": [
														{
															"id": 1181,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1172,
															"src": "2502:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1182,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "2508:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1183,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "2511:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1184,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1141,
															"src": "2514:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1179,
															"name": "ECDSAUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 819,
															"src": "2477:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSAUpgradeable_$819_$",
																"typeString": "type(library ECDSAUpgradeable)"
															}
														},
														"id": 1180,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 801,
														"src": "2477:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2477:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2460:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1190,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1188,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1178,
																"src": "2534:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1189,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1129,
																"src": "2544:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2534:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2551:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 1187,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2526:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2526:58:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1193,
												"nodeType": "ExpressionStatement",
												"src": "2526:58:11"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 1194,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1089,
																"src": "2595:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$660_storage_$",
																	"typeString": "mapping(address => struct CountersUpgradeable.Counter storage ref)"
																}
															},
															"id": 1196,
															"indexExpression": {
																"id": 1195,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1129,
																"src": "2603:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2595:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$660_storage",
																"typeString": "struct CountersUpgradeable.Counter storage ref"
															}
														},
														"id": 1197,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 685,
														"src": "2595:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$660_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$660_storage_ptr_$",
															"typeString": "function (struct CountersUpgradeable.Counter storage pointer)"
														}
													},
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2595:26:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1199,
												"nodeType": "ExpressionStatement",
												"src": "2595:26:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1201,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "2640:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1202,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "2647:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1203,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "2656:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1200,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "2631:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2631:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1205,
												"nodeType": "ExpressionStatement",
												"src": "2631:31:11"
											}
										]
									},
									"documentation": {
										"id": 1127,
										"nodeType": "StructuredDocumentation",
										"src": "1809:50:11",
										"text": " @dev See {IERC20Permit-permit}."
									},
									"functionSelector": "d505accf",
									"id": 1207,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1143,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1991:8:11"
									},
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1880:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1880:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1895:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1895:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1912:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1912:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1927:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1927:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1945:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1136,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1945:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1954:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1138,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1954:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "1965:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1140,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1965:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1879:96:11"
									},
									"returnParameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2000:0:11"
									},
									"scope": 1239,
									"src": "1864:805:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										339
									],
									"body": {
										"id": 1222,
										"nodeType": "Block",
										"src": "2800:48:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 1216,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1089,
																"src": "2817:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$660_storage_$",
																	"typeString": "mapping(address => struct CountersUpgradeable.Counter storage ref)"
																}
															},
															"id": 1218,
															"indexExpression": {
																"id": 1217,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "2825:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2817:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$660_storage",
																"typeString": "struct CountersUpgradeable.Counter storage ref"
															}
														},
														"id": 1219,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 672,
														"src": "2817:22:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$660_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$660_storage_ptr_$",
															"typeString": "function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 1220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2817:24:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1215,
												"id": 1221,
												"nodeType": "Return",
												"src": "2810:31:11"
											}
										]
									},
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "2675:50:11",
										"text": " @dev See {IERC20Permit-nonces}."
									},
									"functionSelector": "7ecebe00",
									"id": 1223,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1212,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2773:8:11"
									},
									"parameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "2746:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2746:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2745:15:11"
									},
									"returnParameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "2791:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:9:11"
									},
									"scope": 1239,
									"src": "2730:118:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										345
									],
									"body": {
										"id": 1233,
										"nodeType": "Block",
										"src": "3041:44:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1230,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 901,
														"src": "3058:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3058:20:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1229,
												"id": 1232,
												"nodeType": "Return",
												"src": "3051:27:11"
											}
										]
									},
									"documentation": {
										"id": 1224,
										"nodeType": "StructuredDocumentation",
										"src": "2854:60:11",
										"text": " @dev See {IERC20Permit-DOMAIN_SEPARATOR}."
									},
									"functionSelector": "3644e515",
									"id": 1234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1226,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3014:8:11"
									},
									"parameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2997:2:11"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "3032:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1227,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3032:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3031:9:11"
									},
									"scope": 1239,
									"src": "2972:113:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"constant": false,
									"id": 1238,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 1239,
									"src": "3090:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 1235,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3090:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1237,
										"length": {
											"hexValue": "3439",
											"id": 1236,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3098:2:11",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3090:11:11",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1240,
							"src": "810:2308:11"
						}
					],
					"src": "33:3085:11"
				},
				"id": 11
			},
			"src/libraries/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"ContextUpgradeable": [
							650
						],
						"ERC20Upgradeable": [
							1769
						],
						"IERC20Upgradeable": [
							424
						],
						"Initializable": [
							2190
						],
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 1770,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1241,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:12"
						},
						{
							"absolutePath": "src/libraries/ContextUpgradeable.sol",
							"file": "./ContextUpgradeable.sol",
							"id": 1242,
							"nodeType": "ImportDirective",
							"scope": 1770,
							"sourceUnit": 651,
							"src": "66:34:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/IERC20Upgradeable.sol",
							"file": "../interfaces/IERC20Upgradeable.sol",
							"id": 1243,
							"nodeType": "ImportDirective",
							"scope": 1770,
							"sourceUnit": 425,
							"src": "101:45:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/libraries/SafeMathUpgradeable.sol",
							"file": "./SafeMathUpgradeable.sol",
							"id": 1244,
							"nodeType": "ImportDirective",
							"scope": 1770,
							"sourceUnit": 2125,
							"src": "147:35:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 1245,
							"nodeType": "ImportDirective",
							"scope": 1770,
							"sourceUnit": 2191,
							"src": "183:36:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1247,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2190,
										"src": "1413:13:12"
									},
									"id": 1248,
									"nodeType": "InheritanceSpecifier",
									"src": "1413:13:12"
								},
								{
									"baseName": {
										"id": 1249,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 650,
										"src": "1428:18:12"
									},
									"id": 1250,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:18:12"
								},
								{
									"baseName": {
										"id": 1251,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 424,
										"src": "1448:17:12"
									},
									"id": 1252,
									"nodeType": "InheritanceSpecifier",
									"src": "1448:17:12"
								}
							],
							"contractDependencies": [
								424,
								650,
								2190
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1246,
								"nodeType": "StructuredDocumentation",
								"src": "221:1162:12",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1769,
							"linearizedBaseContracts": [
								1769,
								424,
								650,
								2190
							],
							"name": "ERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1255,
									"libraryName": {
										"id": 1253,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2124,
										"src": "1478:19:12"
									},
									"nodeType": "UsingForDirective",
									"src": "1472:38:12",
									"typeName": {
										"id": 1254,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1502:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1259,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1516:46:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1258,
										"keyType": {
											"id": 1256,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1525:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1516:28:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1257,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1536:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1265,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1569:69:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1264,
										"keyType": {
											"id": 1260,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1578:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1569:49:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1263,
											"keyType": {
												"id": 1261,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1598:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1589:28:12",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1262,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1609:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1267,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1645:28:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1266,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1645:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1269,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1680:20:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1268,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1680:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1271,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1706:22:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1270,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1706:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1273,
									"mutability": "mutable",
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "1734:23:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1272,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1734:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1291,
										"nodeType": "Block",
										"src": "2167:91:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1283,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "2177:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2177:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1285,
												"nodeType": "ExpressionStatement",
												"src": "2177:26:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1287,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1276,
															"src": "2236:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1288,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1278,
															"src": "2243:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1286,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "2213:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2213:38:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1290,
												"nodeType": "ExpressionStatement",
												"src": "2213:38:12"
											}
										]
									},
									"documentation": {
										"id": 1274,
										"nodeType": "StructuredDocumentation",
										"src": "1764:311:12",
										"text": " @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n a default value of 18.\n To select a different value for {decimals}, use {_setupDecimals}.\n All three of these values are immutable: they can only be set once during\n construction."
									},
									"id": 1292,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1281,
											"modifierName": {
												"id": 1280,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "2155:11:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "2155:11:12"
										}
									],
									"name": "__ERC20_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "2102:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1275,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2102:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "2123:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1277,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2123:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2101:44:12"
									},
									"returnParameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:12"
									},
									"scope": 1769,
									"src": "2080:178:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1313,
										"nodeType": "Block",
										"src": "2361:81:12",
										"statements": [
											{
												"expression": {
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1301,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1269,
														"src": "2371:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1302,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1294,
														"src": "2379:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2371:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1304,
												"nodeType": "ExpressionStatement",
												"src": "2371:13:12"
											},
											{
												"expression": {
													"id": 1307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1305,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1271,
														"src": "2394:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1306,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1296,
														"src": "2404:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2394:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1308,
												"nodeType": "ExpressionStatement",
												"src": "2394:17:12"
											},
											{
												"expression": {
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1309,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1273,
														"src": "2421:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3138",
														"id": 1310,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2433:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "2421:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1312,
												"nodeType": "ExpressionStatement",
												"src": "2421:14:12"
											}
										]
									},
									"id": 1314,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1299,
											"modifierName": {
												"id": 1298,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2173,
												"src": "2349:11:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "2349:11:12"
										}
									],
									"name": "__ERC20_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "2296:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1293,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2296:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "2317:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1295,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2317:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2295:44:12"
									},
									"returnParameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2361:0:12"
									},
									"scope": 1769,
									"src": "2264:178:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1322,
										"nodeType": "Block",
										"src": "2567:29:12",
										"statements": [
											{
												"expression": {
													"id": 1320,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1269,
													"src": "2584:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1319,
												"id": 1321,
												"nodeType": "Return",
												"src": "2577:12:12"
											}
										]
									},
									"documentation": {
										"id": 1315,
										"nodeType": "StructuredDocumentation",
										"src": "2448:54:12",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2520:2:12"
									},
									"returnParameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "2552:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1317,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2552:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2551:15:12"
									},
									"scope": 1769,
									"src": "2507:89:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1331,
										"nodeType": "Block",
										"src": "2771:31:12",
										"statements": [
											{
												"expression": {
													"id": 1329,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1271,
													"src": "2788:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1328,
												"id": 1330,
												"nodeType": "Return",
												"src": "2781:14:12"
											}
										]
									},
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "2602:102:12",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:2:12"
									},
									"returnParameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1332,
												"src": "2756:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1326,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2756:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2755:15:12"
									},
									"scope": 1769,
									"src": "2709:93:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "3481:33:12",
										"statements": [
											{
												"expression": {
													"id": 1338,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1273,
													"src": "3498:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1337,
												"id": 1339,
												"nodeType": "Return",
												"src": "3491:16:12"
											}
										]
									},
									"documentation": {
										"id": 1333,
										"nodeType": "StructuredDocumentation",
										"src": "2808:612:12",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3442:2:12"
									},
									"returnParameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "3474:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1335,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3474:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3473:7:12"
									},
									"scope": 1769,
									"src": "3425:89:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										355
									],
									"body": {
										"id": 1350,
										"nodeType": "Block",
										"src": "3644:36:12",
										"statements": [
											{
												"expression": {
													"id": 1348,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1267,
													"src": "3661:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1347,
												"id": 1349,
												"nodeType": "Return",
												"src": "3654:19:12"
											}
										]
									},
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "3520:49:12",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1344,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3617:8:12"
									},
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3594:2:12"
									},
									"returnParameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1351,
												"src": "3635:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3635:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3634:9:12"
									},
									"scope": 1769,
									"src": "3574:106:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										363
									],
									"body": {
										"id": 1364,
										"nodeType": "Block",
										"src": "3821:42:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1360,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1259,
														"src": "3838:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1362,
													"indexExpression": {
														"id": 1361,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1354,
														"src": "3848:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3838:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1359,
												"id": 1363,
												"nodeType": "Return",
												"src": "3831:25:12"
											}
										]
									},
									"documentation": {
										"id": 1352,
										"nodeType": "StructuredDocumentation",
										"src": "3686:47:12",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1356,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3794:8:12"
									},
									"parameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3757:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3756:17:12"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3812:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3811:9:12"
									},
									"scope": 1769,
									"src": "3738:125:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										373
									],
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "4158:80:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1377,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "4178:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4178:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1379,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1368,
															"src": "4192:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1380,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "4203:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1376,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1586,
														"src": "4168:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4168:42:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1382,
												"nodeType": "ExpressionStatement",
												"src": "4168:42:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4227:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1375,
												"id": 1384,
												"nodeType": "Return",
												"src": "4220:11:12"
											}
										]
									},
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "3869:192:12",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1372,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4134:8:12"
									},
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "4084:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "4103:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4083:35:12"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "4152:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4152:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4151:6:12"
									},
									"scope": 1769,
									"src": "4066:172:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										383
									],
									"body": {
										"id": 1403,
										"nodeType": "Block",
										"src": "4394:51:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1397,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1265,
															"src": "4411:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1399,
														"indexExpression": {
															"id": 1398,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "4423:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4411:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1401,
													"indexExpression": {
														"id": 1400,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "4430:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4411:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1396,
												"id": 1402,
												"nodeType": "Return",
												"src": "4404:34:12"
											}
										]
									},
									"documentation": {
										"id": 1387,
										"nodeType": "StructuredDocumentation",
										"src": "4244:47:12",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1404,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1393,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4367:8:12"
									},
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "4315:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4315:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "4330:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4330:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4314:32:12"
									},
									"returnParameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1395,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "4385:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4385:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4384:9:12"
									},
									"scope": 1769,
									"src": "4296:149:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										393
									],
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "4672:77:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1416,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "4691:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4691:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1418,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1407,
															"src": "4705:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1419,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "4714:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1415,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "4682:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4682:39:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "4682:39:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4738:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1414,
												"id": 1423,
												"nodeType": "Return",
												"src": "4731:11:12"
											}
										]
									},
									"documentation": {
										"id": 1405,
										"nodeType": "StructuredDocumentation",
										"src": "4451:127:12",
										"text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1411,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4648:8:12"
									},
									"parameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4600:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4600:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4617:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4617:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4599:33:12"
									},
									"returnParameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4666:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1412,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4666:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4665:6:12"
									},
									"scope": 1769,
									"src": "4583:166:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										405
									],
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "5328:205:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1439,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1428,
															"src": "5348:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1440,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1430,
															"src": "5356:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1441,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1432,
															"src": "5367:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1438,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1586,
														"src": "5338:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5338:36:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1443,
												"nodeType": "ExpressionStatement",
												"src": "5338:36:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1445,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1428,
															"src": "5393:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1446,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "5401:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5401:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 1455,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1432,
																	"src": "5453:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 1456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5461:42:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	},
																	"value": "ERC20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1448,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1265,
																			"src": "5415:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1450,
																		"indexExpression": {
																			"id": 1449,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1428,
																			"src": "5427:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5415:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1453,
																	"indexExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1451,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 634,
																			"src": "5435:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 1452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5435:12:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5415:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1454,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2075,
																"src": "5415:37:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 1457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5415:89:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1444,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "5384:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5384:121:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1459,
												"nodeType": "ExpressionStatement",
												"src": "5384:121:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5522:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1437,
												"id": 1461,
												"nodeType": "Return",
												"src": "5515:11:12"
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "4755:456:12",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1434,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5304:8:12"
									},
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "5238:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5238:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "5254:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5254:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "5273:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5273:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5237:51:12"
									},
									"returnParameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "5322:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1435,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5322:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5321:6:12"
									},
									"scope": 1769,
									"src": "5216:317:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1490,
										"nodeType": "Block",
										"src": "6022:121:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1474,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "6041:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6041:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1476,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1466,
															"src": "6055:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1484,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1468,
																	"src": "6103:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1477,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1265,
																			"src": "6064:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1480,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1478,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 634,
																				"src": "6076:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 1479,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6076:12:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6064:25:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1482,
																	"indexExpression": {
																		"id": 1481,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1466,
																		"src": "6090:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6064:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1951,
																"src": "6064:38:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6064:50:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1473,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "6032:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6032:83:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1487,
												"nodeType": "ExpressionStatement",
												"src": "6032:83:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6132:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1472,
												"id": 1489,
												"nodeType": "Return",
												"src": "6125:11:12"
											}
										]
									},
									"documentation": {
										"id": 1464,
										"nodeType": "StructuredDocumentation",
										"src": "5539:384:12",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "5955:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5955:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "5972:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5972:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5954:37:12"
									},
									"returnParameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "6016:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6016:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6015:6:12"
									},
									"scope": 1769,
									"src": "5928:215:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1519,
										"nodeType": "Block",
										"src": "6729:167:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1502,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "6748:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 1503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6748:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1504,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "6762:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1512,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1496,
																	"src": "6810:15:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6827:39:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	},
																	"value": "ERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1505,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1265,
																			"src": "6771:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1508,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1506,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 634,
																				"src": "6783:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 1507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6783:12:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6771:25:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1510,
																	"indexExpression": {
																		"id": 1509,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1494,
																		"src": "6797:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6771:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1511,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2075,
																"src": "6771:38:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6771:96:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1501,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1742,
														"src": "6739:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6739:129:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1516,
												"nodeType": "ExpressionStatement",
												"src": "6739:129:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1517,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6885:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1500,
												"id": 1518,
												"nodeType": "Return",
												"src": "6878:11:12"
											}
										]
									},
									"documentation": {
										"id": 1492,
										"nodeType": "StructuredDocumentation",
										"src": "6149:476:12",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "6657:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6657:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "6674:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6674:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6656:42:12"
									},
									"returnParameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "6723:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1498,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6723:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6722:6:12"
									},
									"scope": 1769,
									"src": "6630:266:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1585,
										"nodeType": "Block",
										"src": "7457:443:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1531,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1523,
																"src": "7475:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7493:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7485:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1532,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7485:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7485:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7475:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7497:39:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1530,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7467:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7467:70:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1539,
												"nodeType": "ExpressionStatement",
												"src": "7467:70:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1541,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1525,
																"src": "7555:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1544,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7576:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7568:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1542,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7568:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1545,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7568:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7555:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7580:37:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1540,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7547:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7547:71:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1549,
												"nodeType": "ExpressionStatement",
												"src": "7547:71:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1551,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1523,
															"src": "7650:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1552,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1525,
															"src": "7658:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1553,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1527,
															"src": "7669:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1550,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1764,
														"src": "7629:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7629:47:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1555,
												"nodeType": "ExpressionStatement",
												"src": "7629:47:12"
											},
											{
												"expression": {
													"id": 1566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1556,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "7687:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1558,
														"indexExpression": {
															"id": 1557,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1523,
															"src": "7697:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7687:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1563,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1527,
																"src": "7729:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7737:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																},
																"value": "ERC20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1559,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "7707:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1561,
																"indexExpression": {
																	"id": 1560,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1523,
																	"src": "7717:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7707:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2075,
															"src": "7707:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 1565,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7707:71:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7687:91:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1567,
												"nodeType": "ExpressionStatement",
												"src": "7687:91:12"
											},
											{
												"expression": {
													"id": 1577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1568,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "7788:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1570,
														"indexExpression": {
															"id": 1569,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1525,
															"src": "7798:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7788:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1575,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1527,
																"src": "7836:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1571,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "7811:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1573,
																"indexExpression": {
																	"id": 1572,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1525,
																	"src": "7821:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7811:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1951,
															"src": "7811:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7811:32:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7788:55:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1578,
												"nodeType": "ExpressionStatement",
												"src": "7788:55:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1580,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1523,
															"src": "7867:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1581,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1525,
															"src": "7875:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1582,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1527,
															"src": "7886:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1579,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "7858:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7858:35:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1584,
												"nodeType": "EmitStatement",
												"src": "7853:40:12"
											}
										]
									},
									"documentation": {
										"id": 1521,
										"nodeType": "StructuredDocumentation",
										"src": "6902:463:12",
										"text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
									},
									"id": 1586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "7389:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7389:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1525,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "7405:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7405:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "7424:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7424:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7388:51:12"
									},
									"returnParameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7457:0:12"
									},
									"scope": 1769,
									"src": "7370:530:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1640,
										"nodeType": "Block",
										"src": "8236:305:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1595,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1589,
																"src": "8254:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8273:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8265:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1596,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8265:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1599,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8265:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8254:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1601,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8277:33:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1594,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8246:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8246:65:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1603,
												"nodeType": "ExpressionStatement",
												"src": "8246:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8351:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8343:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1605,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8343:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1608,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8343:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1609,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "8355:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1610,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "8364:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1604,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1764,
														"src": "8322:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8322:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1612,
												"nodeType": "ExpressionStatement",
												"src": "8322:49:12"
											},
											{
												"expression": {
													"id": 1618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1613,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "8382:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1616,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1591,
																"src": "8414:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1614,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1267,
																"src": "8397:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1951,
															"src": "8397:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8397:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8382:39:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1619,
												"nodeType": "ExpressionStatement",
												"src": "8382:39:12"
											},
											{
												"expression": {
													"id": 1629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1620,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "8431:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1622,
														"indexExpression": {
															"id": 1621,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "8441:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8431:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1627,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1591,
																"src": "8475:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1623,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "8452:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1625,
																"indexExpression": {
																	"id": 1624,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1589,
																	"src": "8462:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8452:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1626,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1951,
															"src": "8452:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1628,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8452:30:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8431:51:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1630,
												"nodeType": "ExpressionStatement",
												"src": "8431:51:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8514:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1633,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8506:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1632,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8506:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1635,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8506:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1636,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "8518:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1637,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "8527:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1631,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "8497:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8497:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1639,
												"nodeType": "EmitStatement",
												"src": "8492:42:12"
											}
										]
									},
									"documentation": {
										"id": 1587,
										"nodeType": "StructuredDocumentation",
										"src": "7906:260:12",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
									},
									"id": 1641,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "8186:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "8203:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8203:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8185:33:12"
									},
									"returnParameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8236:0:12"
									},
									"scope": 1769,
									"src": "8171:370:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1696,
										"nodeType": "Block",
										"src": "8926:345:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1650,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1644,
																"src": "8944:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1653,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8963:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1652,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8955:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1651,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8955:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8955:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8944:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8967:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1649,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8936:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8936:67:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1658,
												"nodeType": "ExpressionStatement",
												"src": "8936:67:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1660,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "9035:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1663,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9052:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9044:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1661,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9044:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9044:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1665,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "9056:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1659,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1764,
														"src": "9014:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9014:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1667,
												"nodeType": "ExpressionStatement",
												"src": "9014:49:12"
											},
											{
												"expression": {
													"id": 1678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1668,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "9074:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1670,
														"indexExpression": {
															"id": 1669,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "9084:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9074:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1675,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1646,
																"src": "9118:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
																"id": 1676,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9126:36:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																},
																"value": "ERC20: burn amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1671,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1259,
																	"src": "9095:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1673,
																"indexExpression": {
																	"id": 1672,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1644,
																	"src": "9105:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9095:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2075,
															"src": "9095:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 1677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9095:68:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9074:89:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1679,
												"nodeType": "ExpressionStatement",
												"src": "9074:89:12"
											},
											{
												"expression": {
													"id": 1685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1680,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "9173:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1683,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1646,
																"src": "9205:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1681,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1267,
																"src": "9188:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1682,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1973,
															"src": "9188:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9188:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9173:39:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1686,
												"nodeType": "ExpressionStatement",
												"src": "9173:39:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1688,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1644,
															"src": "9236:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9253:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1690,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9245:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1689,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9245:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1692,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9245:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1693,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "9257:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1687,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "9227:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9227:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1695,
												"nodeType": "EmitStatement",
												"src": "9222:42:12"
											}
										]
									},
									"documentation": {
										"id": 1642,
										"nodeType": "StructuredDocumentation",
										"src": "8547:309:12",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1644,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "8876:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1643,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8876:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "8893:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8893:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8875:33:12"
									},
									"returnParameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8926:0:12"
									},
									"scope": 1769,
									"src": "8861:410:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1741,
										"nodeType": "Block",
										"src": "9777:257:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1708,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1700,
																"src": "9795:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9812:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9804:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1709,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9804:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9804:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9795:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1714,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9816:38:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1707,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9787:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9787:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1716,
												"nodeType": "ExpressionStatement",
												"src": "9787:68:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1718,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1702,
																"src": "9873:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1721,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9892:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9884:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1719,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9884:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1722,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9884:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9873:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1724,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9896:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1717,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9865:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9865:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1726,
												"nodeType": "ExpressionStatement",
												"src": "9865:68:12"
											},
											{
												"expression": {
													"id": 1733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1727,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1265,
																"src": "9944:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1730,
															"indexExpression": {
																"id": 1728,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1700,
																"src": "9956:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9944:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1731,
														"indexExpression": {
															"id": 1729,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1702,
															"src": "9963:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9944:27:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1732,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1704,
														"src": "9974:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9944:36:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1734,
												"nodeType": "ExpressionStatement",
												"src": "9944:36:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1736,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "10004:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1737,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1702,
															"src": "10011:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1738,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1704,
															"src": "10020:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1735,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 423,
														"src": "9995:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9995:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1740,
												"nodeType": "EmitStatement",
												"src": "9990:37:12"
											}
										]
									},
									"documentation": {
										"id": 1698,
										"nodeType": "StructuredDocumentation",
										"src": "9277:412:12",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1742,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "9712:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9712:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "9727:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9727:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1742,
												"src": "9744:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9744:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9711:48:12"
									},
									"returnParameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9777:0:12"
									},
									"scope": 1769,
									"src": "9694:340:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1752,
										"nodeType": "Block",
										"src": "10415:38:12",
										"statements": [
											{
												"expression": {
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1748,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1273,
														"src": "10425:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1749,
														"name": "decimals_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1745,
														"src": "10437:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "10425:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1751,
												"nodeType": "ExpressionStatement",
												"src": "10425:21:12"
											}
										]
									},
									"documentation": {
										"id": 1743,
										"nodeType": "StructuredDocumentation",
										"src": "10040:312:12",
										"text": " @dev Sets {decimals} to a value other than the default one of 18.\n WARNING: This function should only be called from the constructor. Most\n applications that interact with token contracts will not expect\n {decimals} to ever change, and may work incorrectly if it does."
									},
									"id": 1753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupDecimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "decimals_",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "10381:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1744,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10381:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10380:17:12"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10415:0:12"
									},
									"scope": 1769,
									"src": "10357:96:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1763,
										"nodeType": "Block",
										"src": "11129:3:12",
										"statements": []
									},
									"documentation": {
										"id": 1754,
										"nodeType": "StructuredDocumentation",
										"src": "10459:576:12",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "11070:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11070:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "11084:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11084:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "11096:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11096:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11069:42:12"
									},
									"returnParameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11129:0:12"
									},
									"scope": 1769,
									"src": "11040:92:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1768,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 1769,
									"src": "11137:25:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$44_storage",
										"typeString": "uint256[44]"
									},
									"typeName": {
										"baseType": {
											"id": 1765,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "11137:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1767,
										"length": {
											"hexValue": "3434",
											"id": 1766,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "11145:2:12",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_44_by_1",
												"typeString": "int_const 44"
											},
											"value": "44"
										},
										"nodeType": "ArrayTypeName",
										"src": "11137:11:12",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$44_storage_ptr",
											"typeString": "uint256[44]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1770,
							"src": "1384:9781:12"
						}
					],
					"src": "33:11132:12"
				},
				"id": 12
			},
			"src/libraries/SafeMathUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/libraries/SafeMathUpgradeable.sol",
					"exportedSymbols": {
						"SafeMathUpgradeable": [
							2124
						]
					},
					"id": 2125,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1771,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1772,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:13",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 2124,
							"linearizedBaseContracts": [
								2124
							],
							"name": "SafeMathUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1802,
										"nodeType": "Block",
										"src": "876:98:13",
										"statements": [
											{
												"assignments": [
													1785
												],
												"declarations": [
													{
														"constant": false,
														"id": 1785,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1802,
														"src": "886:9:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1784,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "886:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1789,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1786,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1775,
														"src": "898:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1787,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1777,
														"src": "902:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "898:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "886:17:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1790,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1785,
														"src": "917:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1791,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1775,
														"src": "921:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "917:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1797,
												"nodeType": "IfStatement",
												"src": "913:28:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1793,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "932:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "939:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1795,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "931:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1783,
													"id": 1796,
													"nodeType": "Return",
													"src": "924:17:13"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1798,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "959:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1799,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "965:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1800,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "958:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1783,
												"id": 1801,
												"nodeType": "Return",
												"src": "951:16:13"
											}
										]
									},
									"documentation": {
										"id": 1773,
										"nodeType": "StructuredDocumentation",
										"src": "664:131:13",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1775,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "816:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1777,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "827:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "827:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "815:22:13"
									},
									"returnParameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "861:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1779,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1782,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1803,
												"src": "867:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1781,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:15:13"
									},
									"scope": 2124,
									"src": "800:174:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1829,
										"nodeType": "Block",
										"src": "1196:75:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1815,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1808,
														"src": "1210:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1816,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1806,
														"src": "1214:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1210:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1822,
												"nodeType": "IfStatement",
												"src": "1206:28:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1818,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1225:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1819,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1232:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1820,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1224:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1814,
													"id": 1821,
													"nodeType": "Return",
													"src": "1217:17:13"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1823,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1252:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1824,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1806,
																"src": "1258:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1825,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1808,
																"src": "1262:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1258:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1827,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1251:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1814,
												"id": 1828,
												"nodeType": "Return",
												"src": "1244:20:13"
											}
										]
									},
									"documentation": {
										"id": 1804,
										"nodeType": "StructuredDocumentation",
										"src": "980:135:13",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1830,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "1136:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "1147:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1147:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1135:22:13"
									},
									"returnParameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "1181:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1810,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1181:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "1187:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1180:15:13"
									},
									"scope": 2124,
									"src": "1120:151:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1870,
										"nodeType": "Block",
										"src": "1495:359:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1842,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1833,
														"src": "1727:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1843,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1732:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1727:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1849,
												"nodeType": "IfStatement",
												"src": "1723:28:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 1845,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1743:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 1846,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1749:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1847,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1742:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1841,
													"id": 1848,
													"nodeType": "Return",
													"src": "1735:16:13"
												}
											},
											{
												"assignments": [
													1851
												],
												"declarations": [
													{
														"constant": false,
														"id": 1851,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1870,
														"src": "1761:9:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1850,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1761:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1855,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1852,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1833,
														"src": "1773:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1853,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1835,
														"src": "1777:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1773:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1761:17:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1856,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1851,
															"src": "1792:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 1857,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "1796:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1792:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1859,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1835,
														"src": "1801:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1792:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1865,
												"nodeType": "IfStatement",
												"src": "1788:33:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1861,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1819:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1863,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1811:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1841,
													"id": 1864,
													"nodeType": "Return",
													"src": "1804:17:13"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1866,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1839:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1867,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1851,
															"src": "1845:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1868,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1838:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1841,
												"id": 1869,
												"nodeType": "Return",
												"src": "1831:16:13"
											}
										]
									},
									"documentation": {
										"id": 1831,
										"nodeType": "StructuredDocumentation",
										"src": "1277:137:13",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1833,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1435:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1446:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1834,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1446:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:22:13"
									},
									"returnParameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1480:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1837,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1480:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "1486:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1486:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:15:13"
									},
									"scope": 2124,
									"src": "1419:435:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1897,
										"nodeType": "Block",
										"src": "2079:76:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1883,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1876,
														"src": "2093:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1884,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2098:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2093:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1890,
												"nodeType": "IfStatement",
												"src": "2089:29:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1886,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2109:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2116:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1888,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2108:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1882,
													"id": 1889,
													"nodeType": "Return",
													"src": "2101:17:13"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1891,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2136:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1892,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1874,
																"src": "2142:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1893,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1876,
																"src": "2146:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2142:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1895,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2135:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1882,
												"id": 1896,
												"nodeType": "Return",
												"src": "2128:20:13"
											}
										]
									},
									"documentation": {
										"id": 1872,
										"nodeType": "StructuredDocumentation",
										"src": "1860:138:13",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1898,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "2019:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "2030:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2018:22:13"
									},
									"returnParameters": {
										"id": 1882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "2064:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1878,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2064:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1881,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "2070:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2070:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2063:15:13"
									},
									"scope": 2124,
									"src": "2003:152:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "2390:76:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1910,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1903,
														"src": "2404:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1911,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2409:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2404:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1917,
												"nodeType": "IfStatement",
												"src": "2400:29:13",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1913,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2420:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1914,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2427:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1915,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2419:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1909,
													"id": 1916,
													"nodeType": "Return",
													"src": "2412:17:13"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1918,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2447:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1919,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1901,
																"src": "2453:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1920,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1903,
																"src": "2457:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2453:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1922,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2446:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1909,
												"id": 1923,
												"nodeType": "Return",
												"src": "2439:20:13"
											}
										]
									},
									"documentation": {
										"id": 1899,
										"nodeType": "StructuredDocumentation",
										"src": "2161:148:13",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "2330:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1900,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "2341:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2341:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2329:22:13"
									},
									"returnParameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "2375:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1905,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "2381:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:15:13"
									},
									"scope": 2124,
									"src": "2314:152:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1950,
										"nodeType": "Block",
										"src": "2768:108:13",
										"statements": [
											{
												"assignments": [
													1936
												],
												"declarations": [
													{
														"constant": false,
														"id": 1936,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 1950,
														"src": "2778:9:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1935,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2778:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1940,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1937,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1928,
														"src": "2790:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1938,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1930,
														"src": "2794:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2790:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2778:17:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1944,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1942,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1936,
																"src": "2813:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1943,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "2818:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2813:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 1945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2821:29:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 1941,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2805:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2805:46:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1947,
												"nodeType": "ExpressionStatement",
												"src": "2805:46:13"
											},
											{
												"expression": {
													"id": 1948,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1936,
													"src": "2868:1:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1934,
												"id": 1949,
												"nodeType": "Return",
												"src": "2861:8:13"
											}
										]
									},
									"documentation": {
										"id": 1926,
										"nodeType": "StructuredDocumentation",
										"src": "2472:224:13",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2714:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2725:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2713:22:13"
									},
									"returnParameters": {
										"id": 1934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2759:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2759:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2758:9:13"
									},
									"scope": 2124,
									"src": "2701:175:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1972,
										"nodeType": "Block",
										"src": "3214:88:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1964,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1962,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "3232:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1963,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1954,
																"src": "3237:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3232:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 1965,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3240:32:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 1961,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3224:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3224:49:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1967,
												"nodeType": "ExpressionStatement",
												"src": "3224:49:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1968,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1954,
														"src": "3290:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1969,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1956,
														"src": "3294:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3290:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1960,
												"id": 1971,
												"nodeType": "Return",
												"src": "3283:12:13"
											}
										]
									},
									"documentation": {
										"id": 1952,
										"nodeType": "StructuredDocumentation",
										"src": "2882:260:13",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1954,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "3160:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1953,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1956,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "3171:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3171:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3159:22:13"
									},
									"returnParameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1959,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "3205:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3205:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3204:9:13"
									},
									"scope": 2124,
									"src": "3147:155:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2006,
										"nodeType": "Block",
										"src": "3616:148:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1983,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1976,
														"src": "3630:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1984,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3635:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3630:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1988,
												"nodeType": "IfStatement",
												"src": "3626:20:13",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 1986,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3645:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 1982,
													"id": 1987,
													"nodeType": "Return",
													"src": "3638:8:13"
												}
											},
											{
												"assignments": [
													1990
												],
												"declarations": [
													{
														"constant": false,
														"id": 1990,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 2006,
														"src": "3656:9:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1989,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3656:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1994,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1991,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1976,
														"src": "3668:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1992,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1978,
														"src": "3672:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3668:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3656:17:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2000,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1998,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1996,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1990,
																	"src": "3691:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1997,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1976,
																	"src": "3695:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3691:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1999,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1978,
																"src": "3700:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3691:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3703:35:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 1995,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3683:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3683:56:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2003,
												"nodeType": "ExpressionStatement",
												"src": "3683:56:13"
											},
											{
												"expression": {
													"id": 2004,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1990,
													"src": "3756:1:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1982,
												"id": 2005,
												"nodeType": "Return",
												"src": "3749:8:13"
											}
										]
									},
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "3308:236:13",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 2007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1976,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2007,
												"src": "3562:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1975,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2007,
												"src": "3573:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1977,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3573:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3561:22:13"
									},
									"returnParameters": {
										"id": 1982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1981,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2007,
												"src": "3607:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1980,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3607:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3606:9:13"
									},
									"scope": 2124,
									"src": "3549:215:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2028,
										"nodeType": "Block",
										"src": "4295:83:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2018,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2012,
																"src": "4313:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2019,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4317:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4313:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 2021,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4320:28:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 2017,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4305:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2022,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4305:44:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2023,
												"nodeType": "ExpressionStatement",
												"src": "4305:44:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2024,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2010,
														"src": "4366:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2025,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2012,
														"src": "4370:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4366:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2016,
												"id": 2027,
												"nodeType": "Return",
												"src": "4359:12:13"
											}
										]
									},
									"documentation": {
										"id": 2008,
										"nodeType": "StructuredDocumentation",
										"src": "3770:453:13",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2010,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2029,
												"src": "4241:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2029,
												"src": "4252:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4252:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:22:13"
									},
									"returnParameters": {
										"id": 2016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2029,
												"src": "4286:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4286:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4285:9:13"
									},
									"scope": 2124,
									"src": "4228:150:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2050,
										"nodeType": "Block",
										"src": "4898:81:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2042,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2040,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2034,
																"src": "4916:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2041,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4920:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4916:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4923:26:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 2039,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4908:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4908:42:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "4908:42:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2046,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2032,
														"src": "4967:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2047,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2034,
														"src": "4971:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4967:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2038,
												"id": 2049,
												"nodeType": "Return",
												"src": "4960:12:13"
											}
										]
									},
									"documentation": {
										"id": 2030,
										"nodeType": "StructuredDocumentation",
										"src": "4384:442:13",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2051,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "4844:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "4855:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4855:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:22:13"
									},
									"returnParameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2051,
												"src": "4889:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4889:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4888:9:13"
									},
									"scope": 2124,
									"src": "4831:148:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2074,
										"nodeType": "Block",
										"src": "5538:68:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2064,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2056,
																"src": "5556:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2065,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2054,
																"src": "5561:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5556:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2067,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2058,
															"src": "5564:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2063,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5548:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5548:29:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2069,
												"nodeType": "ExpressionStatement",
												"src": "5548:29:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2070,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2054,
														"src": "5594:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 2071,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2056,
														"src": "5598:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5594:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2062,
												"id": 2073,
												"nodeType": "Return",
												"src": "5587:12:13"
											}
										]
									},
									"documentation": {
										"id": 2052,
										"nodeType": "StructuredDocumentation",
										"src": "4985:453:13",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 2075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "5456:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "5467:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2055,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5467:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2058,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "5478:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2057,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5478:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5455:50:13"
									},
									"returnParameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "5529:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5529:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5528:9:13"
									},
									"scope": 2124,
									"src": "5443:163:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2098,
										"nodeType": "Block",
										"src": "6358:67:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2090,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2088,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2080,
																"src": "6376:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6380:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6376:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2091,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2082,
															"src": "6383:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2087,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6368:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6368:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2093,
												"nodeType": "ExpressionStatement",
												"src": "6368:28:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2094,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2078,
														"src": "6413:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 2095,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2080,
														"src": "6417:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6413:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2086,
												"id": 2097,
												"nodeType": "Return",
												"src": "6406:12:13"
											}
										]
									},
									"documentation": {
										"id": 2076,
										"nodeType": "StructuredDocumentation",
										"src": "5612:646:13",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "6276:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "6287:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6287:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2082,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "6298:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2081,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6298:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6275:50:13"
									},
									"returnParameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "6349:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6349:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6348:9:13"
									},
									"scope": 2124,
									"src": "6263:162:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2122,
										"nodeType": "Block",
										"src": "7166:67:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2112,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2104,
																"src": "7184:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2113,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7188:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7184:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2115,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2106,
															"src": "7191:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2111,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7176:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7176:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2117,
												"nodeType": "ExpressionStatement",
												"src": "7176:28:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2118,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2102,
														"src": "7221:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 2119,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2104,
														"src": "7225:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7221:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2110,
												"id": 2121,
												"nodeType": "Return",
												"src": "7214:12:13"
											}
										]
									},
									"documentation": {
										"id": 2100,
										"nodeType": "StructuredDocumentation",
										"src": "6431:635:13",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 2123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "7084:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "7095:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7095:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "7106:26:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2105,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7106:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7083:50:13"
									},
									"returnParameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "7157:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7157:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7156:9:13"
									},
									"scope": 2124,
									"src": "7071:162:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2125,
							"src": "630:6605:13"
						}
					],
					"src": "33:7202:13"
				},
				"id": 13
			},
			"src/proxy/Initializable.sol": {
				"ast": {
					"absolutePath": "src/proxy/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						],
						"Initializable": [
							2190
						]
					},
					"id": 2191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2126,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".24",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "79:32:14"
						},
						{
							"absolutePath": "src/utils/AddressUpgradeable.sol",
							"file": "../utils/AddressUpgradeable.sol",
							"id": 2127,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 2435,
							"src": "113:41:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2128,
								"nodeType": "StructuredDocumentation",
								"src": "156:938:14",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity."
							},
							"fullyImplemented": true,
							"id": 2190,
							"linearizedBaseContracts": [
								2190
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 2129,
										"nodeType": "StructuredDocumentation",
										"src": "1134:73:14",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 2131,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"scope": 2190,
									"src": "1212:25:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 2130,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1212:4:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2132,
										"nodeType": "StructuredDocumentation",
										"src": "1244:91:14",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 2134,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"scope": 2190,
									"src": "1340:26:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 2133,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1340:4:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2172,
										"nodeType": "Block",
										"src": "1494:368:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2138,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2134,
																	"src": "1512:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2139,
																		"name": "_isConstructor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2189,
																		"src": "1529:14:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																			"typeString": "function () view returns (bool)"
																		}
																	},
																	"id": 2140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1529:16:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1512:33:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"id": 2143,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "1549:13:14",
																"subExpression": {
																	"id": 2142,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2131,
																	"src": "1550:12:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1512:50:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1564:48:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 2137,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1504:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1504:109:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2147,
												"nodeType": "ExpressionStatement",
												"src": "1504:109:14"
											},
											{
												"assignments": [
													2149
												],
												"declarations": [
													{
														"constant": false,
														"id": 2149,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"scope": 2172,
														"src": "1624:19:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2148,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1624:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2152,
												"initialValue": {
													"id": 2151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1646:14:14",
													"subExpression": {
														"id": 2150,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2134,
														"src": "1647:13:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1624:36:14"
											},
											{
												"condition": {
													"id": 2153,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2149,
													"src": "1674:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2163,
												"nodeType": "IfStatement",
												"src": "1670:98:14",
												"trueBody": {
													"id": 2162,
													"nodeType": "Block",
													"src": "1690:78:14",
													"statements": [
														{
															"expression": {
																"id": 2156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2154,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2134,
																	"src": "1704:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 2155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1704:20:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2157,
															"nodeType": "ExpressionStatement",
															"src": "1704:20:14"
														},
														{
															"expression": {
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2158,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2131,
																	"src": "1738:12:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 2159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1753:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1738:19:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2161,
															"nodeType": "ExpressionStatement",
															"src": "1738:19:14"
														}
													]
												}
											},
											{
												"id": 2164,
												"nodeType": "PlaceholderStatement",
												"src": "1778:1:14"
											},
											{
												"condition": {
													"id": 2165,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2149,
													"src": "1794:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2171,
												"nodeType": "IfStatement",
												"src": "1790:66:14",
												"trueBody": {
													"id": 2170,
													"nodeType": "Block",
													"src": "1810:46:14",
													"statements": [
														{
															"expression": {
																"id": 2168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2166,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2134,
																	"src": "1824:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 2167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1840:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1824:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2169,
															"nodeType": "ExpressionStatement",
															"src": "1824:21:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2135,
										"nodeType": "StructuredDocumentation",
										"src": "1373:93:14",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 2173,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1491:2:14"
									},
									"src": "1471:391:14",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2188,
										"nodeType": "Block",
										"src": "2006:69:14",
										"statements": [
											{
												"expression": {
													"id": 2186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2023:45:14",
													"subExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2183,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2062:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Initializable_$2190",
																			"typeString": "contract Initializable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Initializable_$2190",
																			"typeString": "contract Initializable"
																		}
																	],
																	"id": 2182,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2054:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2181,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2054:7:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2184,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2054:13:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 2179,
																"name": "AddressUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2434,
																"src": "2024:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2434_$",
																	"typeString": "type(library AddressUpgradeable)"
																}
															},
															"id": 2180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2210,
															"src": "2024:29:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2024:44:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2178,
												"id": 2187,
												"nodeType": "Return",
												"src": "2016:52:14"
											}
										]
									},
									"documentation": {
										"id": 2174,
										"nodeType": "StructuredDocumentation",
										"src": "1868:79:14",
										"text": "@dev Returns true if and only if the function is running in the constructor"
									},
									"id": 2189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isConstructor",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:2:14"
									},
									"returnParameters": {
										"id": 2178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2177,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "2000:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2000:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:6:14"
									},
									"scope": 2190,
									"src": "1952:123:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2191,
							"src": "1095:982:14"
						}
					],
					"src": "79:1998:14"
				},
				"id": 14
			},
			"src/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "src/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2434
						]
					},
					"id": 2435,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2192,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2193,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:15",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2434,
							"linearizedBaseContracts": [
								2434
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2209,
										"nodeType": "Block",
										"src": "803:347:15",
										"statements": [
											{
												"assignments": [
													2202
												],
												"declarations": [
													{
														"constant": false,
														"id": 2202,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 2209,
														"src": "1000:12:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2201,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1000:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2203,
												"nodeType": "VariableDeclarationStatement",
												"src": "1000:12:15"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1087:32:15",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1089:28:15",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1109:7:15"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1097:11:15"
																},
																"nodeType": "YulFunctionCall",
																"src": "1097:20:15"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1089:4:15"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2196,
														"isOffset": false,
														"isSlot": false,
														"src": "1109:7:15",
														"valueSize": 1
													},
													{
														"declaration": 2202,
														"isOffset": false,
														"isSlot": false,
														"src": "1089:4:15",
														"valueSize": 1
													}
												],
												"id": 2204,
												"nodeType": "InlineAssembly",
												"src": "1078:41:15"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2205,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "1135:4:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2206,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1142:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1135:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2200,
												"id": 2208,
												"nodeType": "Return",
												"src": "1128:15:15"
											}
										]
									},
									"documentation": {
										"id": 2194,
										"nodeType": "StructuredDocumentation",
										"src": "167:565:15",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 2210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "757:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:17:15"
									},
									"returnParameters": {
										"id": 2200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2199,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "797:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2198,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "797:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:6:15"
									},
									"scope": 2434,
									"src": "737:413:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2243,
										"nodeType": "Block",
										"src": "2138:320:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2221,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2164:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2434",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2434",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2156:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2219,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2156:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2156:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2156:21:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2224,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2215,
																"src": "2181:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2156:31:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 2226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2189:31:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 2218,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2148:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2148:73:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2228,
												"nodeType": "ExpressionStatement",
												"src": "2148:73:15"
											},
											{
												"assignments": [
													2230,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2230,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2243,
														"src": "2310:12:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2229,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2310:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2237,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2235,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2360:2:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2231,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2213,
																"src": "2328:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2328:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2234,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2233,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2215,
																"src": "2351:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2328:31:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2328:35:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2309:54:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2239,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2230,
															"src": "2381:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 2240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2390:60:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 2238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2373:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2373:78:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2242,
												"nodeType": "ExpressionStatement",
												"src": "2373:78:15"
											}
										]
									},
									"documentation": {
										"id": 2211,
										"nodeType": "StructuredDocumentation",
										"src": "1156:906:15",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2213,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "2086:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2086:15:15",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2215,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "2113:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2113:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2085:43:15"
									},
									"returnParameters": {
										"id": 2217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:15"
									},
									"scope": 2434,
									"src": "2067:391:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2260,
										"nodeType": "Block",
										"src": "3288:82:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2255,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2247,
															"src": "3316:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2256,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2249,
															"src": "3324:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3330:32:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 2254,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2261,
															2281
														],
														"referencedDeclaration": 2281,
														"src": "3303:12:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 2258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3303:60:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2253,
												"id": 2259,
												"nodeType": "Return",
												"src": "3296:67:15"
											}
										]
									},
									"documentation": {
										"id": 2245,
										"nodeType": "StructuredDocumentation",
										"src": "2464:730:15",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 2261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2261,
												"src": "3221:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3221:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2249,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2261,
												"src": "3237:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2248,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3237:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3220:35:15"
									},
									"returnParameters": {
										"id": 2253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2252,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2261,
												"src": "3274:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2251,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3274:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3273:14:15"
									},
									"scope": 2434,
									"src": "3199:171:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2280,
										"nodeType": "Block",
										"src": "3709:76:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2274,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2264,
															"src": "3748:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2275,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2266,
															"src": "3756:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3762:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 2277,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2268,
															"src": "3765:12:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2273,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2301,
															2351
														],
														"referencedDeclaration": 2351,
														"src": "3726:21:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3726:52:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2272,
												"id": 2279,
												"nodeType": "Return",
												"src": "3719:59:15"
											}
										]
									},
									"documentation": {
										"id": 2262,
										"nodeType": "StructuredDocumentation",
										"src": "3376:211:15",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "3614:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3614:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "3630:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2265,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3630:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2268,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "3649:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2267,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3649:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3613:63:15"
									},
									"returnParameters": {
										"id": 2272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2271,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "3695:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2270,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3695:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3694:14:15"
									},
									"scope": 2434,
									"src": "3592:193:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2300,
										"nodeType": "Block",
										"src": "4260:111:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2294,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2284,
															"src": "4299:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2295,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2286,
															"src": "4307:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2288,
															"src": "4313:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4320:43:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 2293,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2301,
															2351
														],
														"referencedDeclaration": 2351,
														"src": "4277:21:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4277:87:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2292,
												"id": 2299,
												"nodeType": "Return",
												"src": "4270:94:15"
											}
										]
									},
									"documentation": {
										"id": 2282,
										"nodeType": "StructuredDocumentation",
										"src": "3791:351:15",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 2301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2284,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4178:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4178:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2286,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4194:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2285,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4194:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2288,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4213:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4177:50:15"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4246:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2290,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4246:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4245:14:15"
									},
									"scope": 2434,
									"src": "4147:224:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2350,
										"nodeType": "Block",
										"src": "4760:382:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2318,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4786:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2434",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2434",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4778:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2316,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4778:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4778:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4778:21:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2321,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2308,
																"src": "4803:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4778:30:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 2323,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4810:40:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 2315,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4770:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4770:81:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2325,
												"nodeType": "ExpressionStatement",
												"src": "4770:81:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2328,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2304,
																	"src": "4880:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2327,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2210,
																"src": "4869:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 2329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4869:18:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4889:31:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 2326,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4861:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4861:60:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2332,
												"nodeType": "ExpressionStatement",
												"src": "4861:60:15"
											},
											{
												"assignments": [
													2334,
													2336
												],
												"declarations": [
													{
														"constant": false,
														"id": 2334,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2350,
														"src": "4992:12:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2333,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4992:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2336,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 2350,
														"src": "5006:23:15",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2335,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5006:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2343,
												"initialValue": {
													"arguments": [
														{
															"id": 2341,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2306,
															"src": "5061:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2337,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2304,
																"src": "5033:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5033:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2339,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2308,
																"src": "5053:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5033:27:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5033:33:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4991:75:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2345,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2334,
															"src": "5101:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2346,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2336,
															"src": "5110:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2347,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2310,
															"src": "5122:12:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2344,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2433,
														"src": "5083:17:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 2348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5083:52:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2314,
												"id": 2349,
												"nodeType": "Return",
												"src": "5076:59:15"
											}
										]
									},
									"documentation": {
										"id": 2302,
										"nodeType": "StructuredDocumentation",
										"src": "4377:237:15",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "4650:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4650:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "4666:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2305,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4666:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2308,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "4685:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4685:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "4700:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2309,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4700:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4649:78:15"
									},
									"returnParameters": {
										"id": 2314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2313,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "4746:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2312,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4746:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4745:14:15"
									},
									"scope": 2434,
									"src": "4619:523:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2367,
										"nodeType": "Block",
										"src": "5419:97:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2362,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2354,
															"src": "5455:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2363,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2356,
															"src": "5463:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 2364,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5469:39:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 2361,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2368,
															2403
														],
														"referencedDeclaration": 2403,
														"src": "5436:18:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5436:73:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2360,
												"id": 2366,
												"nodeType": "Return",
												"src": "5429:80:15"
											}
										]
									},
									"documentation": {
										"id": 2352,
										"nodeType": "StructuredDocumentation",
										"src": "5148:166:15",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2368,
												"src": "5347:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5347:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2368,
												"src": "5363:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2355,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5363:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5346:35:15"
									},
									"returnParameters": {
										"id": 2360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2359,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2368,
												"src": "5405:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5405:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5404:14:15"
									},
									"scope": 2434,
									"src": "5319:197:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2402,
										"nodeType": "Block",
										"src": "5828:288:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2382,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2371,
																	"src": "5857:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2381,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2210,
																"src": "5846:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 2383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5846:18:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 2384,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5866:38:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 2380,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5838:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5838:67:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2386,
												"nodeType": "ExpressionStatement",
												"src": "5838:67:15"
											},
											{
												"assignments": [
													2388,
													2390
												],
												"declarations": [
													{
														"constant": false,
														"id": 2388,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2402,
														"src": "5976:12:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2387,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5976:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2390,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 2402,
														"src": "5990:23:15",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2389,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5990:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2395,
												"initialValue": {
													"arguments": [
														{
															"id": 2393,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2373,
															"src": "6035:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2391,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2371,
															"src": "6017:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6017:17:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6017:23:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5975:65:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2397,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2388,
															"src": "6075:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2398,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2390,
															"src": "6084:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2399,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2375,
															"src": "6096:12:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2396,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2433,
														"src": "6057:17:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 2400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6057:52:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2379,
												"id": 2401,
												"nodeType": "Return",
												"src": "6050:59:15"
											}
										]
									},
									"documentation": {
										"id": 2369,
										"nodeType": "StructuredDocumentation",
										"src": "5522:173:15",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2371,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "5728:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "5744:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2372,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5744:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "5763:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2374,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5763:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5727:63:15"
									},
									"returnParameters": {
										"id": 2379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2378,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2403,
												"src": "5814:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2377,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5814:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5813:14:15"
									},
									"scope": 2434,
									"src": "5700:416:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2432,
										"nodeType": "Block",
										"src": "6251:596:15",
										"statements": [
											{
												"condition": {
													"id": 2414,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2405,
													"src": "6265:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2430,
													"nodeType": "Block",
													"src": "6322:519:15",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2418,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2407,
																		"src": "6406:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6406:17:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6426:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6406:21:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 2428,
																"nodeType": "Block",
																"src": "6778:53:15",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 2425,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2409,
																					"src": "6803:12:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 2424,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "6796:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 2426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6796:20:15",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2427,
																		"nodeType": "ExpressionStatement",
																		"src": "6796:20:15"
																	}
																]
															},
															"id": 2429,
															"nodeType": "IfStatement",
															"src": "6402:429:15",
															"trueBody": {
																"id": 2423,
																"nodeType": "Block",
																"src": "6429:343:15",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6613:145:15",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6635:40:15",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6664:10:15"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6658:5:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6658:17:15"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6639:15:15",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6707:2:15",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6711:10:15"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6703:3:15"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6703:19:15"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6724:15:15"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6696:6:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6696:44:15"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6696:44:15"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 2407,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6664:10:15",
																				"valueSize": 1
																			},
																			{
																				"declaration": 2407,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6711:10:15",
																				"valueSize": 1
																			}
																		],
																		"id": 2422,
																		"nodeType": "InlineAssembly",
																		"src": "6604:154:15"
																	}
																]
															}
														}
													]
												},
												"id": 2431,
												"nodeType": "IfStatement",
												"src": "6261:580:15",
												"trueBody": {
													"id": 2417,
													"nodeType": "Block",
													"src": "6274:42:15",
													"statements": [
														{
															"expression": {
																"id": 2415,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2407,
																"src": "6295:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2413,
															"id": 2416,
															"nodeType": "Return",
															"src": "6288:17:15"
														}
													]
												}
											}
										]
									},
									"id": 2433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "6149:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2404,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6149:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2407,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "6163:23:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2406,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6163:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2409,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "6188:26:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2408,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6188:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:67:15"
									},
									"returnParameters": {
										"id": 2413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2433,
												"src": "6237:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2411,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6237:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6236:14:15"
									},
									"scope": 2434,
									"src": "6122:725:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2435,
							"src": "134:6715:15"
						}
					],
					"src": "33:6816:15"
				},
				"id": 15
			}
		}
	}
}